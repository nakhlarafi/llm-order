{
    "bug_id": 15,
    "test_id": 0,
    "test_name": "org.joda.time.field.TestFieldUtils.testSafeMultiplyLongInt",
    "test_body": "public void testSafeMultiplyLongInt() {\nassertEquals(0L, FieldUtils.safeMultiply(0L, 0));\nassertEquals(1L, FieldUtils.safeMultiply(1L, 1));\nassertEquals(3L, FieldUtils.safeMultiply(1L, 3));\nassertEquals(3L, FieldUtils.safeMultiply(3L, 1));\nassertEquals(6L, FieldUtils.safeMultiply(2L, 3));\nassertEquals(-6L, FieldUtils.safeMultiply(2L, -3));\nassertEquals(-6L, FieldUtils.safeMultiply(-2L, 3));\nassertEquals(6L, FieldUtils.safeMultiply(-2L, -3));\nassertEquals(-1L * Integer.MIN_VALUE, FieldUtils.safeMultiply(-1L, Integer.MIN_VALUE));\nassertEquals(Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, 1));\nassertEquals(Long.MIN_VALUE, FieldUtils.safeMultiply(Long.MIN_VALUE, 1));\nassertEquals(-Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, -1));\ntry {\nFieldUtils.safeMultiply(Long.MIN_VALUE, -1);\nfail();\n} catch (ArithmeticException e) {\n}\ntry {\nFieldUtils.safeMultiply(Long.MIN_VALUE, 100);\nfail();\n} catch (ArithmeticException e) {\n}\ntry {\nFieldUtils.safeMultiply(Long.MIN_VALUE, Integer.MAX_VALUE);\nfail();\n} catch (ArithmeticException e) {\n}\ntry {\nFieldUtils.safeMultiply(Long.MAX_VALUE, Integer.MIN_VALUE);\nfail();\n} catch (ArithmeticException e) {\n}\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError\nat junit.framework.Assert.fail(Assert.java:55)\nat junit.framework.Assert.fail(Assert.java:64)\nat junit.framework.TestCase.fail(TestCase.java:235)\nat org.joda.time.field.TestFieldUtils.testSafeMultiplyLongInt(TestFieldUtils.java:261)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.field.FieldUtils:safeMultiply(JI)J",
            "method_body": "public static long safeMultiply(long val1, int val2) {\nswitch (val2) {\ncase -1:\nreturn -val1;\ncase 0:\nreturn 0L;\ncase 1:\nreturn val1;\n}\nlong total = val1 * val2;\nif (total / val2 != val1) {\nthrow new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n}\nreturn total;\n}",
            "method_id": 0,
            "loc": 15
        }
    ]
}
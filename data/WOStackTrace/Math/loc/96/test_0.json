{
    "bug_id": 96,
    "test_id": 0,
    "test_name": "org.apache.commons.math.complex.ComplexTest.testMath221",
    "test_body": "public void testMath221() {\nassertEquals(new Complex(0,-1), new Complex(0,1).multiply(new Complex(-1,0)));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<org.apache.commons.math.complex.Complex@98b00000> but was:<org.apache.commons.math.complex.Complex@18b00000>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.apache.commons.math.complex.ComplexTest.testMath221(ComplexTest.java:696)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.complex.Complex:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object other) {\nboolean ret;\n\nif (this == other) {\nret = true;\n} else if (other == null) {\nret = false;\n} else  {\ntry {\nComplex rhs = (Complex)other;\nif (rhs.isNaN()) {\nret = this.isNaN();\n} else {\nret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary()));\n}\n} catch (ClassCastException ex) {\n// ignore exception\nret = false;\n}\n}\n\nreturn ret;\n}",
            "method_id": 0,
            "loc": 23
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:multiply(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;",
            "method_body": "public Complex multiply(Complex rhs) {\nif (isNaN() || rhs.isNaN()) {\nreturn NaN;\n}\nif (Double.isInfinite(real) || Double.isInfinite(imaginary) ||\nDouble.isInfinite(rhs.real)|| Double.isInfinite(rhs.imaginary)) {\n// we don't use Complex.isInfinite() to avoid testing for NaN again\nreturn INF;\n}\nreturn createComplex(real * rhs.real - imaginary * rhs.imaginary,\nreal * rhs.imaginary + imaginary * rhs.real);\n}",
            "method_id": 1,
            "loc": 12
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:hashCode()I",
            "method_body": "public int hashCode() {\nif (isNaN()) {\nreturn 7;\n}\nreturn 37 * (17 * MathUtils.hash(imaginary) +\nMathUtils.hash(real));\n}",
            "method_id": 2,
            "loc": 7
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:<init>(DD)V",
            "method_body": "public Complex(double real, double imaginary) {\nsuper();\nthis.real = real;\nthis.imaginary = imaginary;\n}",
            "method_id": 3,
            "loc": 5
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:hash(D)I",
            "method_body": "public static int hash(double value) {\nlong bits = Double.doubleToLongBits(value);\nreturn (int)(bits ^ (bits >>> 32));\n}",
            "method_id": 4,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:isNaN()Z",
            "method_body": "public boolean isNaN() {\nreturn Double.isNaN(real) || Double.isNaN(imaginary);\n}",
            "method_id": 5,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:createComplex(DD)Lorg/apache/commons/math/complex/Complex;",
            "method_body": "protected Complex createComplex(double real, double imaginary) {\nreturn new Complex(real, imaginary);\n}",
            "method_id": 6,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:getReal()D",
            "method_body": "public double getReal() {\nreturn real;\n}",
            "method_id": 7,
            "loc": 3
        }
    ]
}
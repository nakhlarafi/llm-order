{
    "bug_id": 17,
    "test_id": 0,
    "test_name": "org.mockitousage.basicapi.MocksSerializationTest.shouldBeSerializeAndHaveExtraInterfaces",
    "test_body": "public void shouldBeSerializeAndHaveExtraInterfaces() throws Exception {\n//when\nIMethods mock = mock(IMethods.class, withSettings().serializable().extraInterfaces(List.class));\nIMethods mockTwo = mock(IMethods.class, withSettings().extraInterfaces(List.class).serializable());\n//then\nserializeAndBack((List) mock);\nserializeAndBack((List) mockTwo);\n}\n",
    "stack_trace": "java.io.NotSerializableException: org.mockitousage.IMethods$$EnhancerByMockitoWithCGLIB$$a155cf16\nat java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1184)\nat java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:348)\nat org.mockitoutil.TestBase.serializeMock(TestBase.java:160)\nat org.mockitoutil.TestBase.serializeAndBack(TestBase.java:146)\nat org.mockitousage.basicapi.MocksSerializationTest.shouldBeSerializeAndHaveExtraInterfaces(MocksSerializationTest.java:312)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:createProxyClass(Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/Class;",
            "method_body": "private Class<?> createProxyClass(Class<?> mockedType, Class<?>...interfaces) {\nif (mockedType == Object.class) {\nmockedType = ClassWithSuperclassToWorkAroundCglibBug.class;\n}\n\nEnhancer enhancer = new Enhancer() {\n@Override\n@SuppressWarnings(\"unchecked\")\nprotected void filterConstructors(Class sc, List constructors) {\n// Don't filter\n}\n};\nenhancer.setClassLoader(SearchingClassLoader.combineLoadersOf(mockedType));\nenhancer.setUseFactory(true);\nif (mockedType.isInterface()) {\nenhancer.setSuperclass(Object.class);\nenhancer.setInterfaces(prepend(mockedType, interfaces));\n} else {\nenhancer.setSuperclass(mockedType);\nenhancer.setInterfaces(interfaces);\n}\nenhancer.setCallbackTypes(new Class[]{MethodInterceptor.class, NoOp.class});\nenhancer.setCallbackFilter(IGNORE_BRIDGE_METHODS);\nif (mockedType.getSigners() != null) {\nenhancer.setNamingPolicy(NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES);\n} else {\nenhancer.setNamingPolicy(MockitoNamingPolicy.INSTANCE);\n}\n\ntry {\nreturn enhancer.createClass();\n} catch (CodeGenerationException e) {\nif (Modifier.isPrivate(mockedType.getModifiers())) {\nthrow new MockitoException(\"\\n\"\n+ \"Mockito cannot mock this class: \" + mockedType\n+ \".\\n\"\n+ \"Most likely it is a private class that is not visible by Mockito\");\n}\nthrow new MockitoException(\"\\n\"\n+ \"Mockito cannot mock this class: \" + mockedType\n+ \"\\n\"\n+ \"Mockito can only mock visible & non-final classes.\"\n+ \"\\n\"\n+ \"If you're not sure why you're getting this error, please report to the mailing list.\", e);\n}\n}",
            "method_id": 0,
            "loc": 46
        },
        {
            "method_signature": "org.mockito.internal.util.MockUtil:createMock(Ljava/lang/Class;Lorg/mockito/internal/creation/MockSettingsImpl;)Ljava/lang/Object;",
            "method_body": "public <T> T createMock(Class<T> classToMock, MockSettingsImpl settings) {\ncreationValidator.validateType(classToMock);\ncreationValidator.validateExtraInterfaces(classToMock, settings.getExtraInterfaces());\ncreationValidator.validateMockedType(classToMock, settings.getSpiedInstance());\n\nsettings.initiateMockName(classToMock);\n\nMockHandler<T> mockHandler = new MockHandler<T>(settings);\nMethodInterceptorFilter filter = new MethodInterceptorFilter(mockHandler, settings);\nClass<?>[] interfaces = settings.getExtraInterfaces();\n\nClass<?>[] ancillaryTypes;\nancillaryTypes = interfaces == null ? new Class<?>[0] : interfaces;\n\nObject spiedInstance = settings.getSpiedInstance();\n\nT mock = ClassImposterizer.INSTANCE.imposterise(filter, classToMock, ancillaryTypes);\n\nif (spiedInstance != null) {\nnew LenientCopyTool().copyToMock(spiedInstance, mock);\n}\n\nreturn mock;\n}",
            "method_id": 1,
            "loc": 24
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.SearchingClassLoader:combineLoadersOf(Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/ClassLoader;",
            "method_body": "private static ClassLoader combineLoadersOf(Class<?> first, Class<?>... others) {\nList<ClassLoader> loaders = new ArrayList<ClassLoader>();\n\naddIfNewElement(loaders, first.getClassLoader());\nfor (Class<?> c : others) {\naddIfNewElement(loaders, c.getClassLoader());\n}\n\n// To support Eclipse Plug-in tests.\n// In an Eclipse plug-in, jMock itself will not be on the system class loader\n// but in the class loader of the plug-in.\n//\n// Note: I've been unable to reproduce the error in jMock's test suite.\naddIfNewElement(loaders, SearchingClassLoader.class.getClassLoader());\n\n// To support the Maven Surefire plugin.\n// Note: I've been unable to reproduce the error in jMock's test suite.\naddIfNewElement(loaders, currentThread().getContextClassLoader());\n\n//Had to comment that out because it didn't work with in-container Spring tests\n//addIfNewElement(loaders, ClassLoader.getSystemClassLoader());\n\nreturn combine(loaders);\n}",
            "method_id": 2,
            "loc": 24
        },
        {
            "method_signature": "org.mockito.MockitoAnnotations:scan(Ljava/lang/Object;Ljava/lang/Class;)V",
            "method_body": "private static void scan(Object testClass, Class<?> clazz) {\nAnnotationEngine annotationEngine = new GlobalConfiguration().getAnnotationEngine();\nField[] fields = clazz.getDeclaredFields();\nfor (Field field : fields) {\nfor(Annotation annotation : field.getAnnotations()) {\nObject mock = annotationEngine.createMockFor(annotation, field);\nif (mock != null) {\nboolean wasAccessible = field.isAccessible();\nfield.setAccessible(true);\ntry {\nfield.set(testClass, mock);\n} catch (IllegalAccessException e) {\nthrow new MockitoException(\"Problems initiating mocks annotated with \" + annotation, e);\n} finally {\nfield.setAccessible(wasAccessible);\n}\n}\n}\n}\n}",
            "method_id": 3,
            "loc": 20
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:validateState()V",
            "method_body": "public void validateState() {\n//State is cool when GlobalConfiguration is already loaded\n//this cannot really be tested functionally because I cannot dynamically mess up org.mockito.configuration.MockitoConfiguration class\nGlobalConfiguration.validate();\n\nif (verificationMode != null) {\nLocation location = verificationMode.getLocation();\nverificationMode = null;\nreporter.unfinishedVerificationException(location);\n}\n\nif (stubbingInProgress != null) {\nLocation temp = stubbingInProgress;\nstubbingInProgress = null;\nreporter.unfinishedStubbing(temp);\n}\n\ngetArgumentMatcherStorage().validateState();\n}",
            "method_id": 4,
            "loc": 19
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:extraInterfaces([Ljava/lang/Class;)Lorg/mockito/MockSettings;",
            "method_body": "public MockSettings extraInterfaces(Class<?>... extraInterfaces) {\nif (extraInterfaces == null || extraInterfaces.length == 0) {\nnew Reporter().extraInterfacesRequiresAtLeastOneInterface();\n}\n\nfor (Class<?> i : extraInterfaces) {\nif (i == null) {\nnew Reporter().extraInterfacesDoesNotAcceptNullParameters();\n} else if (!i.isInterface()) {\nnew Reporter().extraInterfacesAcceptsOnlyInterfaces(i);\n}\n}\nthis.extraInterfaces = extraInterfaces;\nreturn this;\n}",
            "method_id": 5,
            "loc": 15
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer$3:<init>(Lorg/mockito/internal/creation/jmock/ClassImposterizer;)V",
            "method_body": "private Class<?> createProxyClass(Class<?> mockedType, Class<?>...interfaces) {\nif (mockedType == Object.class) {\nEnhancer enhancer = new Enhancer() {\nenhancer.setClassLoader(SearchingClassLoader.combineLoadersOf(mockedType));\nenhancer.setUseFactory(true);\nif (mockedType.isInterface()) {\nenhancer.setSuperclass(Object.class);\nenhancer.setInterfaces(prepend(mockedType, interfaces));\nenhancer.setCallbackTypes(new Class[]{MethodInterceptor.class, NoOp.class});\nenhancer.setCallbackFilter(IGNORE_BRIDGE_METHODS);\nif (mockedType.getSigners() != null) {\nenhancer.setNamingPolicy(MockitoNamingPolicy.INSTANCE);\nreturn enhancer.createClass();\n}",
            "method_id": 6,
            "loc": 14
        },
        {
            "method_signature": "org.mockito.MockitoAnnotations:initMocks(Ljava/lang/Object;)V",
            "method_body": "public static void initMocks(Object testClass) {\nif (testClass == null) {\nthrow new MockitoException(\"testClass cannot be null. For info how to use @Mock annotations see examples in javadoc for MockitoAnnotations class\");\n}\n\nClass<?> clazz = testClass.getClass();\nwhile (clazz != Object.class) {\nscan(testClass, clazz);\nclazz = clazz.getSuperclass();\n}\n}",
            "method_id": 7,
            "loc": 11
        },
        {
            "method_signature": "org.mockito.internal.util.CreationValidator:validateExtraInterfaces(Ljava/lang/Class;[Ljava/lang/Class;)V",
            "method_body": "public void validateExtraInterfaces(Class classToMock, Class ... extraInterfaces) {\nif (extraInterfaces == null) {\nreturn;\n}\n\nfor (Class i : extraInterfaces) {\nif (classToMock == i) {\nnew Reporter().extraInterfacesCannotContainMockedType(classToMock);\n}\n}\n}",
            "method_id": 8,
            "loc": 11
        },
        {
            "method_signature": "org.mockito.internal.util.MockName:toInstanceName(Ljava/lang/Class;)Ljava/lang/String;",
            "method_body": "private static String toInstanceName(Class<?> clazz) {\nString className = clazz.getSimpleName();\nif (className.length() == 0) {\n//it's an anonymous class, let's get name from the parent\nclassName = clazz.getSuperclass().getSimpleName();\n}\n//lower case first letter\nreturn className.substring(0, 1).toLowerCase() + className.substring(1);\n}",
            "method_id": 9,
            "loc": 9
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:imposterise(Lorg/mockito/cglib/proxy/MethodInterceptor;Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "public <T> T imposterise(final MethodInterceptor interceptor, Class<T> mockedType, Class<?>... ancillaryTypes) {\ntry {\nsetConstructorsAccessible(mockedType, true);\nClass<?> proxyClass = createProxyClass(mockedType, ancillaryTypes);\nreturn mockedType.cast(createProxy(proxyClass, interceptor));\n} finally {\nsetConstructorsAccessible(mockedType, false);\n}\n}",
            "method_id": 10,
            "loc": 9
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.SearchingClassLoader:combine(Ljava/util/List;)Ljava/lang/ClassLoader;",
            "method_body": "private static ClassLoader combine(List<ClassLoader> parentLoaders) {\nClassLoader loader = parentLoaders.get(parentLoaders.size()-1);\n\nfor (int i = parentLoaders.size()-2; i >= 0; i--) {\nloader = new SearchingClassLoader(parentLoaders.get(i), loader);\n}\n\nreturn loader;\n}",
            "method_id": 11,
            "loc": 9
        },
        {
            "method_signature": "org.mockito.internal.util.CreationValidator:validateMockedType(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "public void validateMockedType(Class classToMock, Object spiedInstance) {\nif (classToMock == null || spiedInstance == null) {\nreturn;\n}\nif (!classToMock.equals(spiedInstance.getClass())) {\nnew Reporter().mockedTypeIsInconsistentWithSpiedInstanceType(classToMock, spiedInstance);\n}\n}",
            "method_id": 12,
            "loc": 8
        },
        {
            "method_signature": "org.mockito.internal.util.MockName:<init>(Ljava/lang/String;Ljava/lang/Class;)V",
            "method_body": "public MockName(String mockName, Class classToMock) {\nif (mockName == null) {\nthis.mockName = toInstanceName(classToMock);\nthis.surrogate = true;\n} else {\nthis.mockName = mockName;\n}\n}",
            "method_id": 13,
            "loc": 8
        },
        {
            "method_signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl:validateState()V",
            "method_body": "public void validateState() {\nif (!matcherStack.isEmpty()) {\nLocalizedMatcher lastMatcher = matcherStack.lastElement();\nmatcherStack.clear();\nnew Reporter().misplacedArgumentMatcher(lastMatcher.getLocation());\n}\n}",
            "method_id": 14,
            "loc": 7
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:<init>()V",
            "method_body": "public GlobalConfiguration() {\n//Configuration should be loaded only once but I cannot really test it\nif (globalConfiguration.get() == null) {\nglobalConfiguration.set(createConfig());\n}\n}",
            "method_id": 15,
            "loc": 6
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:prepend(Ljava/lang/Class;[Ljava/lang/Class;)[Ljava/lang/Class;",
            "method_body": "private Class<?>[] prepend(Class<?> first, Class<?>... rest) {\nClass<?>[] all = new Class<?>[rest.length+1];\nall[0] = first;\nSystem.arraycopy(rest, 0, all, 1, rest.length);\nreturn all;\n}",
            "method_id": 16,
            "loc": 6
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:threadSafely()Lorg/mockito/internal/progress/MockingProgress;",
            "method_body": "static MockingProgress threadSafely() {\nif (mockingProgress.get() == null) {\nmockingProgress.set(new MockingProgressImpl());\n}\nreturn mockingProgress.get();\n}",
            "method_id": 17,
            "loc": 6
        },
        {
            "method_signature": "org.mockito.internal.MockHandler:<init>(Lorg/mockito/internal/creation/MockSettingsImpl;)V",
            "method_body": "public MockHandler(MockSettingsImpl mockSettings) {\nthis.mockSettings = mockSettings;\nthis.mockingProgress = new ThreadSafeMockingProgress();\nthis.matchersBinder = new MatchersBinder();\nthis.invocationContainerImpl = new InvocationContainerImpl(mockingProgress);\n}",
            "method_id": 18,
            "loc": 6
        },
        {
            "method_signature": "org.mockito.internal.MockitoCore:mock(Ljava/lang/Class;Lorg/mockito/MockSettings;)Ljava/lang/Object;",
            "method_body": "public <T> T mock(Class<T> classToMock, MockSettings mockSettings) {\nmockingProgress.validateState();\nmockingProgress.resetOngoingStubbing();\nreturn mockUtil.createMock(classToMock, (MockSettingsImpl) mockSettings);\n}",
            "method_id": 19,
            "loc": 5
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:createProxy(Ljava/lang/Class;Lorg/mockito/cglib/proxy/MethodInterceptor;)Ljava/lang/Object;",
            "method_body": "private Object createProxy(Class<?> proxyClass, final MethodInterceptor interceptor) {\nFactory proxy = (Factory) objenesis.newInstance(proxyClass);\nproxy.setCallbacks(new Callback[] {interceptor, SerializableNoOp.SERIALIZABLE_INSTANCE });\nreturn proxy;\n}",
            "method_id": 20,
            "loc": 5
        },
        {
            "method_signature": "org.mockito.internal.util.CreationValidator:validateType(Ljava/lang/Class;)V",
            "method_body": "public void validateType(Class classToMock) {\nif (!ClassImposterizer.INSTANCE.canImposterise(classToMock)) {\nnew Reporter().cannotMockFinalClass(classToMock);\n}\n}",
            "method_id": 21,
            "loc": 5
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:setConstructorsAccessible(Ljava/lang/Class;Z)V",
            "method_body": "private void setConstructorsAccessible(Class<?> mockedType, boolean accessible) {\nfor (Constructor<?> constructor : mockedType.getDeclaredConstructors()) {\nconstructor.setAccessible(accessible);\n}\n}",
            "method_id": 22,
            "loc": 5
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.SearchingClassLoader:addIfNewElement(Ljava/util/List;Ljava/lang/ClassLoader;)V",
            "method_body": "private static void addIfNewElement(List<ClassLoader> loaders, ClassLoader c) {\nif (c != null && !loaders.contains(c)) {\nloaders.add(c);\n}\n}",
            "method_id": 23,
            "loc": 5
        },
        {
            "method_signature": "org.mockito.internal.creation.MethodInterceptorFilter:<init>(Lorg/mockito/internal/MockitoInvocationHandler;Lorg/mockito/internal/creation/MockSettingsImpl;)V",
            "method_body": "public MethodInterceptorFilter(MockitoInvocationHandler handler, MockSettingsImpl mockSettings) {\nthis.handler = handler;\nthis.mockSettings = mockSettings;\n}",
            "method_id": 24,
            "loc": 4
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:defaultAnswer(Lorg/mockito/stubbing/Answer;)Lorg/mockito/MockSettings;",
            "method_body": "public MockSettings defaultAnswer(Answer defaultAnswer) {\nthis.defaultAnswer = defaultAnswer;\nreturn this;\n}",
            "method_id": 25,
            "loc": 4
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:serializable()Lorg/mockito/MockSettings;",
            "method_body": "public MockSettings serializable() {\nreturn this.extraInterfaces(java.io.Serializable.class);\n}",
            "method_id": 26,
            "loc": 3
        },
        {
            "method_signature": "org.mockito.Mockito:withSettings()Lorg/mockito/MockSettings;",
            "method_body": "public static MockSettings withSettings() {\nreturn new MockSettingsImpl().defaultAnswer(RETURNS_DEFAULTS);\n}",
            "method_id": 27,
            "loc": 3
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:validateState()V",
            "method_body": "public void validateState() {\nthreadSafely().validateState();\n}",
            "method_id": 28,
            "loc": 3
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:resetOngoingStubbing()V",
            "method_body": "public void resetOngoingStubbing() {\nthreadSafely().resetOngoingStubbing();\n}",
            "method_id": 29,
            "loc": 3
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:getAnnotationEngine()Lorg/mockito/configuration/AnnotationEngine;",
            "method_body": "public AnnotationEngine getAnnotationEngine() {\nreturn globalConfiguration.get().getAnnotationEngine();\n}",
            "method_id": 30,
            "loc": 3
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:validate()V",
            "method_body": "public static void validate() {\nnew GlobalConfiguration();\n}",
            "method_id": 31,
            "loc": 3
        },
        {
            "method_signature": "org.mockito.Mockito:mock(Ljava/lang/Class;Lorg/mockito/MockSettings;)Ljava/lang/Object;",
            "method_body": "public static <T> T mock(Class<T> classToMock, MockSettings mockSettings) {\nreturn MOCKITO_CORE.mock(classToMock, mockSettings);\n}",
            "method_id": 32,
            "loc": 3
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:initiateMockName(Ljava/lang/Class;)V",
            "method_body": "public void initiateMockName(Class classToMock) {\nmockName = new MockName(name, classToMock);\n}",
            "method_id": 33,
            "loc": 3
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:getSpiedInstance()Ljava/lang/Object;",
            "method_body": "public Object getSpiedInstance() {\nreturn spiedInstance;\n}",
            "method_id": 34,
            "loc": 3
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:getArgumentMatcherStorage()Lorg/mockito/internal/progress/ArgumentMatcherStorage;",
            "method_body": "public ArgumentMatcherStorage getArgumentMatcherStorage() {\nreturn argumentMatcherStorage;\n}",
            "method_id": 35,
            "loc": 3
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:<init>(Lorg/mockito/internal/progress/MockingProgress;)V",
            "method_body": "public InvocationContainerImpl(MockingProgress mockingProgress) {\nthis.mockingProgress = mockingProgress;\n}",
            "method_id": 36,
            "loc": 3
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.SearchingClassLoader:combineLoadersOf([Ljava/lang/Class;)Ljava/lang/ClassLoader;",
            "method_body": "public static ClassLoader combineLoadersOf(Class<?>... classes) {\nreturn combineLoadersOf(classes[0], classes);\n}",
            "method_id": 37,
            "loc": 3
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:resetOngoingStubbing()V",
            "method_body": "public void resetOngoingStubbing() {\niOngoingStubbing = null;\n}",
            "method_id": 38,
            "loc": 3
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:getExtraInterfaces()[Ljava/lang/Class;",
            "method_body": "public Class<?>[] getExtraInterfaces() {\nreturn extraInterfaces;\n}",
            "method_id": 39,
            "loc": 3
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:canImposterise(Ljava/lang/Class;)Z",
            "method_body": "public boolean canImposterise(Class<?> type) {\nreturn !type.isPrimitive() && !Modifier.isFinal(type.getModifiers());\n}",
            "method_id": 40,
            "loc": 3
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:getIt()Lorg/mockito/configuration/IMockitoConfiguration;",
            "method_body": "IMockitoConfiguration getIt() {\nreturn globalConfiguration.get();\n}",
            "method_id": 41,
            "loc": 3
        }
    ]
}
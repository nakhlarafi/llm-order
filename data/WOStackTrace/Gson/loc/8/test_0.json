{
    "bug_id": 8,
    "test_id": 0,
    "test_name": "com.google.gson.internal.UnsafeAllocatorInstantiationTest.testAbstractClassInstantiation",
    "test_body": "public void testAbstractClassInstantiation() {\nUnsafeAllocator unsafeAllocator = UnsafeAllocator.create();\ntry {\nunsafeAllocator.newInstance(AbstractClass.class);\nfail();\n} catch (Exception e) {\nassertEquals(e.getClass(), UnsupportedOperationException.class);\n}\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<class java.lang.reflect.InvocationTargetException> but was:<class java.lang.UnsupportedOperationException>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat com.google.gson.internal.UnsafeAllocatorInstantiationTest.testAbstractClassInstantiation(UnsafeAllocatorInstantiationTest.java:59)",
    "covered_methods": [
        {
            "method_signature": "com.google.gson.internal.UnsafeAllocator:create()Lcom/google/gson/internal/UnsafeAllocator;",
            "method_body": "public abstract <T> T newInstance(Class<T> c) throws Exception;\n\npublic static UnsafeAllocator create() {\n// try JVM\n// public class Unsafe {\n//   public Object allocateInstance(Class<?> type);\n// }\ntry {\nClass<?> unsafeClass = Class.forName(\"sun.misc.Unsafe\");\nField f = unsafeClass.getDeclaredField(\"theUnsafe\");\nf.setAccessible(true);\nfinal Object unsafe = f.get(null);\nfinal Method allocateInstance = unsafeClass.getMethod(\"allocateInstance\", Class.class);\nreturn new UnsafeAllocator() {\n@Override\n@SuppressWarnings(\"unchecked\")\npublic <T> T newInstance(Class<T> c) throws Exception {\nreturn (T) allocateInstance.invoke(unsafe, c);\n}\n};\n} catch (Exception ignored) {\n}\n\n// try dalvikvm, post-gingerbread\n// public class ObjectStreamClass {\n//   private static native int getConstructorId(Class<?> c);\n//   private static native Object newInstance(Class<?> instantiationClass, int methodId);\n// }\ntry {\nMethod getConstructorId = ObjectStreamClass.class\n.getDeclaredMethod(\"getConstructorId\", Class.class);\ngetConstructorId.setAccessible(true);\nfinal int constructorId = (Integer) getConstructorId.invoke(null, Object.class);\nfinal Method newInstance = ObjectStreamClass.class\n.getDeclaredMethod(\"newInstance\", Class.class, int.class);\nnewInstance.setAccessible(true);\nreturn new UnsafeAllocator() {\n@Override\n@SuppressWarnings(\"unchecked\")\npublic <T> T newInstance(Class<T> c) throws Exception {\nreturn (T) newInstance.invoke(null, c, constructorId);\n}\n};\n} catch (Exception ignored) {\n}\n\n// try dalvikvm, pre-gingerbread\n// public class ObjectInputStream {\n//   private static native Object newInstance(\n//     Class<?> instantiationClass, Class<?> constructorClass);\n// }\ntry {\nfinal Method newInstance = ObjectInputStream.class\n.getDeclaredMethod(\"newInstance\", Class.class, Class.class);\nnewInstance.setAccessible(true);\nreturn new UnsafeAllocator() {\n@Override\n@SuppressWarnings(\"unchecked\")\npublic <T> T newInstance(Class<T> c) throws Exception {\nreturn (T) newInstance.invoke(null, c, Object.class);\n}\n};\n} catch (Exception ignored) {\n}\n\n// give up\nreturn new UnsafeAllocator() {\n@Override\npublic <T> T newInstance(Class<T> c) {\nthrow new UnsupportedOperationException(\"Cannot allocate \" + c);\n}\n};\n}",
            "method_id": 0,
            "loc": 73
        },
        {
            "method_signature": "com.google.gson.internal.UnsafeAllocator$1:newInstance(Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "public abstract <T> T newInstance(Class<T> c) throws Exception;\n\npublic static UnsafeAllocator create() {\n// try JVM\n// public class Unsafe {\n//   public Object allocateInstance(Class<?> type);\n// }\ntry {\nClass<?> unsafeClass = Class.forName(\"sun.misc.Unsafe\");\nField f = unsafeClass.getDeclaredField(\"theUnsafe\");\nf.setAccessible(true);\nfinal Object unsafe = f.get(null);\nfinal Method allocateInstance = unsafeClass.getMethod(\"allocateInstance\", Class.class);\nreturn new UnsafeAllocator() {\n@Override\n@SuppressWarnings(\"unchecked\")\npublic <T> T newInstance(Class<T> c) throws Exception {\nreturn (T) allocateInstance.invoke(unsafe, c);\n}\n};\n} catch (Exception ignored) {\n}\n\n// try dalvikvm, post-gingerbread\n// public class ObjectStreamClass {\n//   private static native int getConstructorId(Class<?> c);\n//   private static native Object newInstance(Class<?> instantiationClass, int methodId);\n// }\ntry {\nMethod getConstructorId = ObjectStreamClass.class\n.getDeclaredMethod(\"getConstructorId\", Class.class);\ngetConstructorId.setAccessible(true);\nfinal int constructorId = (Integer) getConstructorId.invoke(null, Object.class);\nfinal Method newInstance = ObjectStreamClass.class\n.getDeclaredMethod(\"newInstance\", Class.class, int.class);\nnewInstance.setAccessible(true);\nreturn new UnsafeAllocator() {\n@Override\n@SuppressWarnings(\"unchecked\")\npublic <T> T newInstance(Class<T> c) throws Exception {\nreturn (T) newInstance.invoke(null, c, constructorId);\n}\n};\n} catch (Exception ignored) {\n}\n\n// try dalvikvm, pre-gingerbread\n// public class ObjectInputStream {\n//   private static native Object newInstance(\n//     Class<?> instantiationClass, Class<?> constructorClass);\n// }\ntry {\nfinal Method newInstance = ObjectInputStream.class\n.getDeclaredMethod(\"newInstance\", Class.class, Class.class);\nnewInstance.setAccessible(true);\nreturn new UnsafeAllocator() {\n@Override\n@SuppressWarnings(\"unchecked\")\npublic <T> T newInstance(Class<T> c) throws Exception {\nreturn (T) newInstance.invoke(null, c, Object.class);\n}\n};\n} catch (Exception ignored) {\n}\n\n// give up\nreturn new UnsafeAllocator() {\n@Override\npublic <T> T newInstance(Class<T> c) {\nthrow new UnsupportedOperationException(\"Cannot allocate \" + c);\n}\n};\n}",
            "method_id": 1,
            "loc": 73
        }
    ]
}
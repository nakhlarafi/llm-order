{
    "bug_id": 22,
    "test_id": 1,
    "test_name": "org.apache.commons.cli.ApplicationTest.testGroovy",
    "test_body": "public void testGroovy() throws Exception {\nOptions options = new Options();\noptions.addOption(\nOptionBuilder.withLongOpt(\"define\").\nwithDescription(\"define a system property\").\nhasArg(true).\nwithArgName(\"name=value\").\ncreate('D'));\noptions.addOption(\nOptionBuilder.hasArg(false)\n.withDescription(\"usage information\")\n.withLongOpt(\"help\")\n.create('h'));\noptions.addOption(\nOptionBuilder.hasArg(false)\n.withDescription(\"debug mode will print out full stack traces\")\n.withLongOpt(\"debug\")\n.create('d'));\noptions.addOption(\nOptionBuilder.hasArg(false)\n.withDescription(\"display the Groovy and JVM versions\")\n.withLongOpt(\"version\")\n.create('v'));\noptions.addOption(\nOptionBuilder.withArgName(\"charset\")\n.hasArg()\n.withDescription(\"specify the encoding of the files\")\n.withLongOpt(\"encoding\")\n.create('c'));\noptions.addOption(\nOptionBuilder.withArgName(\"script\")\n.hasArg()\n.withDescription(\"specify a command line script\")\n.create('e'));\noptions.addOption(\nOptionBuilder.withArgName(\"extension\")\n.hasOptionalArg()\n.withDescription(\"modify files in place; create backup if extension is given (e.g. \\'.bak\\')\")\n.create('i'));\noptions.addOption(\nOptionBuilder.hasArg(false)\n.withDescription(\"process files line by line using implicit 'line' variable\")\n.create('n'));\noptions.addOption(\nOptionBuilder.hasArg(false)\n.withDescription(\"process files line by line and print result (see also -n)\")\n.create('p'));\noptions.addOption(\nOptionBuilder.withArgName(\"port\")\n.hasOptionalArg()\n.withDescription(\"listen on a port and process inbound lines\")\n.create('l'));\noptions.addOption(\nOptionBuilder.withArgName(\"splitPattern\")\n.hasOptionalArg()\n.withDescription(\"split lines using splitPattern (default '\\\\s') using implicit 'split' variable\")\n.withLongOpt(\"autosplit\")\n.create('a'));\nParser parser = new PosixParser();\nCommandLine line = parser.parse(options, new String[] { \"-e\", \"println 'hello'\" }, true);\nassertTrue(line.hasOption('e'));\nassertEquals(\"println 'hello'\", line.getOptionValue('e'));\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<[println 'hello']> but was:<[--]>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.apache.commons.cli.ApplicationTest.testGroovy(ApplicationTest.java:169)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Parser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Ljava/util/Properties;Z)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption)\nthrows ParseException\n{\n// clear out the data in options in case it's been used before (CLI-71)\nfor (Iterator it = options.helpOptions().iterator(); it.hasNext();)\n{\nOption opt = (Option) it.next();\nopt.clearValues();\n}\n\n// initialise members\nsetOptions(options);\n\ncmd = new CommandLine();\n\nboolean eatTheRest = false;\n\nif (arguments == null)\n{\narguments = new String[0];\n}\n\nList tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption));\n\nListIterator iterator = tokenList.listIterator();\n\n// process each flattened token\nwhile (iterator.hasNext())\n{\nString t = (String) iterator.next();\n\n// the value is the double-dash\nif (\"--\".equals(t))\n{\neatTheRest = true;\n}\n\n// the value is a single dash\nelse if (\"-\".equals(t))\n{\nif (stopAtNonOption)\n{\neatTheRest = true;\n}\nelse\n{\ncmd.addArg(t);\n}\n}\n\n// the value is an option\nelse if (t.startsWith(\"-\"))\n{\nif (stopAtNonOption && !getOptions().hasOption(t))\n{\neatTheRest = true;\ncmd.addArg(t);\n}\nelse\n{\nprocessOption(t, iterator);\n}\n}\n\n// the value is an argument\nelse\n{\ncmd.addArg(t);\n\nif (stopAtNonOption)\n{\neatTheRest = true;\n}\n}\n\n// eat the remaining tokens\nif (eatTheRest)\n{\nwhile (iterator.hasNext())\n{\nString str = (String) iterator.next();\n\n// ensure only one double-dash is added\nif (!\"--\".equals(str))\n{\ncmd.addArg(str);\n}\n}\n}\n}\n\nprocessProperties(properties);\ncheckRequiredOptions();\n\nreturn cmd;\n}",
            "method_id": 0,
            "loc": 96
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:flatten(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Z)[Ljava/lang/String;",
            "method_body": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\ninit();\nthis.options = options;\n\n// an iterator for the command line tokens\nIterator iter = Arrays.asList(arguments).iterator();\n\n// process each command line token\nwhile (iter.hasNext())\n{\n// get the next command line token\nString token = (String) iter.next();\n\n// handle long option --foo or --foo=bar\nif (token.startsWith(\"--\"))\n{\nint pos = token.indexOf('=');\nString opt = pos == -1 ? token : token.substring(0, pos); // --foo\n\nif (!options.hasOption(opt))\n{\nprocessNonOptionToken(token);\n}\nelse\n{\n\ntokens.add(opt);\nif (pos != -1)\n{\ntokens.add(token.substring(pos + 1));\n}\n}\n}\n\n// single hyphen\nelse if (\"-\".equals(token))\n{\ntokens.add(token);\n}\nelse if (token.startsWith(\"-\"))\n{\nif (token.length() == 2 || options.hasOption(token))\n{\nprocessOptionToken(token, stopAtNonOption);\n}\n// requires bursting\nelse\n{\nburstToken(token, stopAtNonOption);\n}\n}\nelse if (stopAtNonOption)\n{\nprocessNonOptionToken(token);\n}\nelse\n{\ntokens.add(token);\n}\n\ngobble(iter);\n}\n\nreturn (String[]) tokens.toArray(new String[tokens.size()]);\n}",
            "method_id": 1,
            "loc": 66
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:processProperties(Ljava/util/Properties;)V",
            "method_body": "protected void processProperties(Properties properties)\n{\nif (properties == null)\n{\nreturn;\n}\n\nfor (Enumeration e = properties.propertyNames(); e.hasMoreElements();)\n{\nString option = e.nextElement().toString();\n\nif (!cmd.hasOption(option))\n{\nOption opt = getOptions().getOption(option);\n\n// get the value from the properties instance\nString value = properties.getProperty(option);\n\nif (opt.hasArg())\n{\nif (opt.getValues() == null || opt.getValues().length == 0)\n{\ntry\n{\nopt.addValueForProcessing(value);\n}\ncatch (RuntimeException exp)\n{\n// if we cannot add the value don't worry about it\n}\n}\n}\nelse if (!(\"yes\".equalsIgnoreCase(value)\n|| \"true\".equalsIgnoreCase(value)\n|| \"1\".equalsIgnoreCase(value)))\n{\n// if the value is not yes, true or 1 then don't add the\n// option to the CommandLine\nbreak;\n}\n\ncmd.addOption(opt);\n}\n}\n}",
            "method_id": 2,
            "loc": 45
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:processOption(Ljava/lang/String;Ljava/util/ListIterator;)V",
            "method_body": "protected void processOption(String arg, ListIterator iter) throws ParseException\n{\nboolean hasOption = getOptions().hasOption(arg);\n\n// if there is no option throw an UnrecognisedOptionException\nif (!hasOption)\n{\nthrow new UnrecognizedOptionException(\"Unrecognized option: \" + arg, arg);\n}\n\n// get the option represented by arg\nOption opt = (Option) getOptions().getOption(arg).clone();\n\n// if the option is a required option remove the option from\n// the requiredOptions list\nif (opt.isRequired())\n{\ngetRequiredOptions().remove(opt.getKey());\n}\n\n// if the option is in an OptionGroup make that option the selected\n// option of the group\nif (getOptions().getOptionGroup(opt) != null)\n{\nOptionGroup group = getOptions().getOptionGroup(opt);\n\nif (group.isRequired())\n{\ngetRequiredOptions().remove(group);\n}\n\ngroup.setSelected(opt);\n}\n\n// if the option takes an argument value\nif (opt.hasArg())\n{\nprocessArgs(opt, iter);\n}\n\n// set the option on the command line\ncmd.addOption(opt);\n}",
            "method_id": 3,
            "loc": 43
        },
        {
            "method_signature": "org.apache.commons.cli.Option:processValue(Ljava/lang/String;)V",
            "method_body": "private void processValue(String value)\n{\n// this Option has a separator character\nif (hasValueSeparator())\n{\n// get the separator character\nchar sep = getValueSeparator();\n\n// store the index for the value separator\nint index = value.indexOf(sep);\n\n// while there are more value separators\nwhile (index != -1)\n{\n// next value to be added\nif (values.size() == (numberOfArgs - 1))\n{\nbreak;\n}\n\n// store\nadd(value.substring(0, index));\n\n// parse\nvalue = value.substring(index + 1);\n\n// get new index\nindex = value.indexOf(sep);\n}\n}\n\n// store the actual value or the last value that has been parsed\nadd(value);\n}",
            "method_id": 4,
            "loc": 34
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:validateOption(Ljava/lang/String;)V",
            "method_body": "static void validateOption(String opt) throws IllegalArgumentException\n{\n// check that opt is not NULL\nif (opt == null)\n{\nreturn;\n}\n\n// handle the single character opt\nelse if (opt.length() == 1)\n{\nchar ch = opt.charAt(0);\n\nif (!isValidOpt(ch))\n{\nthrow new IllegalArgumentException(\"illegal option value '\" + ch + \"'\");\n}\n}\n\n// handle the multi character opt\nelse\n{\nchar[] chars = opt.toCharArray();\n\nfor (int i = 0; i < chars.length; i++)\n{\nif (!isValidChar(chars[i]))\n{\nthrow new IllegalArgumentException(\"opt contains illegal character value '\" + chars[i] + \"'\");\n}\n}\n}\n}",
            "method_id": 5,
            "loc": 33
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:<clinit>()V",
            "method_body": "private static String longopt;\n\n/** option description */\nprivate static String description;\n\n/** argument name */\nprivate static String argName;\n\n/** is required? */\nprivate static boolean required;\n\n/** the number of arguments */\nprivate static int numberOfArgs = Option.UNINITIALIZED;\n\n/** option type */\nprivate static Object type;\n\n/** option can have an optional argument value */\nprivate static boolean optionalArg;\n\n/** value separator for argument value */\nprivate static char valuesep;\n\n/** option builder instance */\nprivate static OptionBuilder instance = new OptionBuilder();\n\n/**\n* private constructor to prevent instances being created\n*/\nprivate OptionBuilder()\n{\n// hide the constructor\n}",
            "method_id": 6,
            "loc": 33
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:processArgs(Lorg/apache/commons/cli/Option;Ljava/util/ListIterator;)V",
            "method_body": "public void processArgs(Option opt, ListIterator iter) throws ParseException\n{\n// loop until an option is found\nwhile (iter.hasNext())\n{\nString str = (String) iter.next();\n\n// found an Option, not an argument\nif (getOptions().hasOption(str) && str.startsWith(\"-\"))\n{\niter.previous();\nbreak;\n}\n\n// found a value\ntry\n{\nopt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str));\n}\ncatch (RuntimeException exp)\n{\niter.previous();\nbreak;\n}\n}\n\nif (opt.getValues() == null && !opt.hasOptionalArg())\n{\nthrow new MissingArgumentException(opt);\n}\n}",
            "method_id": 7,
            "loc": 31
        },
        {
            "method_signature": "org.apache.commons.cli.Option:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object o)\n{\nif (this == o)\n{\nreturn true;\n}\nif (o == null || getClass() != o.getClass())\n{\nreturn false;\n}\n\nOption option = (Option) o;\n\n\nif (opt != null ? !opt.equals(option.opt) : option.opt != null)\n{\nreturn false;\n}\nif (longOpt != null ? !longOpt.equals(option.longOpt) : option.longOpt != null)\n{\nreturn false;\n}\n\nreturn true;\n}",
            "method_id": 8,
            "loc": 25
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(Option opt)\n{\nString key = opt.getKey();\n\n// add it to the long option list\nif (opt.hasLongOpt())\n{\nlongOpts.put(opt.getLongOpt(), opt);\n}\n\n// if the option is required add it to the required list\nif (opt.isRequired())\n{\nif (requiredOpts.contains(key))\n{\nrequiredOpts.remove(requiredOpts.indexOf(key));\n}\nrequiredOpts.add(key);\n}\n\nshortOpts.put(key, opt);\n\nreturn this;\n}",
            "method_id": 9,
            "loc": 24
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:create(Ljava/lang/String;)Lorg/apache/commons/cli/Option;",
            "method_body": "public static Option create(String opt) throws IllegalArgumentException\n{\n// create the option\nOption option = new Option(opt, description);\n\n// set the option properties\noption.setLongOpt(longopt);\noption.setRequired(required);\noption.setOptionalArg(optionalArg);\noption.setArgs(numberOfArgs);\noption.setType(type);\noption.setValueSeparator(valuesep);\noption.setArgName(argName);\n\n\n// reset the OptionBuilder properties\nOptionBuilder.reset();\n\n// return the Option instance\nreturn option;\n}",
            "method_id": 10,
            "loc": 21
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:resolveOption(Ljava/lang/String;)Lorg/apache/commons/cli/Option;",
            "method_body": "private Option resolveOption(String opt)\n{\nopt = Util.stripLeadingHyphens(opt);\nfor (Iterator it = options.iterator(); it.hasNext();)\n{\nOption option = (Option) it.next();\nif (opt.equals(option.getOpt()))\n{\nreturn option;\n}\n\nif (opt.equals(option.getLongOpt()))\n{\nreturn option;\n}\n\n}\nreturn null;\n}",
            "method_id": 11,
            "loc": 19
        },
        {
            "method_signature": "org.apache.commons.cli.Util:stripLeadingHyphens(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "static String stripLeadingHyphens(String str)\n{\nif (str == null)\n{\nreturn null;\n}\nif (str.startsWith(\"--\"))\n{\nreturn str.substring(2, str.length());\n}\nelse if (str.startsWith(\"-\"))\n{\nreturn str.substring(1, str.length());\n}\n\nreturn str;\n}",
            "method_id": 12,
            "loc": 17
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)V",
            "method_body": "public Option(String opt, String longOpt, boolean hasArg, String description)\nthrows IllegalArgumentException\n{\n// ensure that the option is valid\nOptionValidator.validateOption(opt);\n\nthis.opt = opt;\nthis.longOpt = longOpt;\n\n// if hasArg is set then the number of arguments is 1\nif (hasArg)\n{\nthis.numberOfArgs = 1;\n}\n\nthis.description = description;\n}",
            "method_id": 13,
            "loc": 17
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:getOptionValues(Ljava/lang/String;)[Ljava/lang/String;",
            "method_body": "public String[] getOptionValues(String opt)\n{\nList values = new ArrayList();\n\nfor (Iterator it = options.iterator(); it.hasNext();)\n{\nOption option = (Option) it.next();\nif (opt.equals(option.getOpt()) || opt.equals(option.getLongOpt()))\n{\nvalues.addAll(option.getValuesList());\n}\n}\n\nreturn values.isEmpty() ? null : (String[]) values.toArray(new String[values.size()]);\n}",
            "method_id": 14,
            "loc": 15
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:reset()V",
            "method_body": "private static void reset()\n{\ndescription = null;\nargName = \"arg\";\nlongopt = null;\ntype = null;\nrequired = false;\nnumberOfArgs = Option.UNINITIALIZED;\n\n\n// PMM 9/6/02 - these were missing\noptionalArg = false;\nvaluesep = (char) 0;\n}",
            "method_id": 15,
            "loc": 14
        },
        {
            "method_signature": "org.apache.commons.cli.Option:clone()Ljava/lang/Object;",
            "method_body": "public Object clone()\n{\ntry\n{\nOption option = (Option) super.clone();\noption.values = new ArrayList(values);\nreturn option;\n}\ncatch (CloneNotSupportedException cnse)\n{\nthrow new RuntimeException(\"A CloneNotSupportedException was thrown: \" + cnse.getMessage());\n}\n}",
            "method_id": 16,
            "loc": 13
        },
        {
            "method_signature": "org.apache.commons.cli.Util:stripLeadingAndTrailingQuotes(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "static String stripLeadingAndTrailingQuotes(String str)\n{\nif (str.startsWith(\"\\\"\"))\n{\nstr = str.substring(1, str.length());\n}\nif (str.endsWith(\"\\\"\"))\n{\nstr = str.substring(0, str.length() - 1);\n}\nreturn str;\n}",
            "method_id": 17,
            "loc": 12
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOption(Ljava/lang/String;)Lorg/apache/commons/cli/Option;",
            "method_body": "public Option getOption(String opt)\n{\nopt = Util.stripLeadingHyphens(opt);\n\nif (shortOpts.containsKey(opt))\n{\nreturn (Option) shortOpts.get(opt);\n}\n\nreturn (Option) longOpts.get(opt);\n}",
            "method_id": 18,
            "loc": 11
        },
        {
            "method_signature": "org.apache.commons.cli.Option:addValueForProcessing(Ljava/lang/String;)V",
            "method_body": "void addValueForProcessing(String value)\n{\nswitch (numberOfArgs)\n{\ncase UNINITIALIZED:\nthrow new RuntimeException(\"NO_ARGS_ALLOWED\");\n\ndefault:\nprocessValue(value);\n}\n}",
            "method_id": 19,
            "loc": 11
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:processOptionToken(Ljava/lang/String;Z)V",
            "method_body": "private void processOptionToken(String token, boolean stopAtNonOption)\n{\nif (stopAtNonOption && !options.hasOption(token))\n{\neatTheRest = true;\n}\n\n\ntokens.add(token);\n}",
            "method_id": 20,
            "loc": 10
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:gobble(Ljava/util/Iterator;)V",
            "method_body": "private void gobble(Iterator iter)\n{\nif (eatTheRest)\n{\nwhile (iter.hasNext())\n{\ntokens.add(iter.next());\n}\n}\n}",
            "method_id": 21,
            "loc": 10
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getKey()Ljava/lang/String;",
            "method_body": "String getKey()\n{\n// if 'opt' is null, then it is a 'long' option\nif (opt == null)\n{\nreturn longOpt;\n}\n\nreturn opt;\n}",
            "method_id": 22,
            "loc": 10
        },
        {
            "method_signature": "org.apache.commons.cli.Option:add(Ljava/lang/String;)V",
            "method_body": "private void add(String value)\n{\nif ((numberOfArgs > 0) && (values.size() > (numberOfArgs - 1)))\n{\nthrow new RuntimeException(\"Cannot add value, list full.\");\n}\n\n// store value\nvalues.add(value);\n}",
            "method_id": 23,
            "loc": 10
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:checkRequiredOptions()V",
            "method_body": "protected void checkRequiredOptions() throws MissingOptionException\n{\n// if there are required options that have not been processsed\nif (!getRequiredOptions().isEmpty())\n{\nthrow new MissingOptionException(getRequiredOptions());\n}\n}",
            "method_id": 24,
            "loc": 8
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:processNonOptionToken(Ljava/lang/String;)V",
            "method_body": "private void processNonOptionToken(String value)\n{\neatTheRest = true;\ntokens.add(\"--\");\n\ntokens.add(value);\n}",
            "method_id": 25,
            "loc": 7
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:hasOptionalArg()Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder hasOptionalArg()\n{\nOptionBuilder.numberOfArgs = 1;\nOptionBuilder.optionalArg = true;\n\nreturn instance;\n}",
            "method_id": 26,
            "loc": 7
        },
        {
            "method_signature": "org.apache.commons.cli.Options:<init>()V",
            "method_body": "private static final long serialVersionUID = 1L;\nprivate Map shortOpts = new HashMap();\nprivate Map longOpts = new HashMap();\nprivate List requiredOpts = new ArrayList();\nprivate Map optionGroups = new HashMap();\n}",
            "method_id": 27,
            "loc": 6
        },
        {
            "method_signature": "org.apache.commons.cli.Options:hasOption(Ljava/lang/String;)Z",
            "method_body": "public boolean hasOption(String opt)\n{\nopt = Util.stripLeadingHyphens(opt);\n\nreturn shortOpts.containsKey(opt) || longOpts.containsKey(opt);\n}",
            "method_id": 28,
            "loc": 6
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:getOptionValue(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String getOptionValue(String opt)\n{\nString[] values = getOptionValues(opt);\n\nreturn (values == null) ? null : values[0];\n}",
            "method_id": 29,
            "loc": 6
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:withLongOpt(Ljava/lang/String;)Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder withLongOpt(String newLongopt)\n{\nOptionBuilder.longopt = newLongopt;\n\nreturn instance;\n}",
            "method_id": 30,
            "loc": 6
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:hasArg()Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder hasArg()\n{\nOptionBuilder.numberOfArgs = 1;\n\nreturn instance;\n}",
            "method_id": 31,
            "loc": 6
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:hasArg(Z)Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder hasArg(boolean hasArg)\n{\nOptionBuilder.numberOfArgs = hasArg ? 1 : Option.UNINITIALIZED;\n\nreturn instance;\n}",
            "method_id": 32,
            "loc": 6
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:withArgName(Ljava/lang/String;)Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder withArgName(String name)\n{\nOptionBuilder.argName = name;\n\nreturn instance;\n}",
            "method_id": 33,
            "loc": 6
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:withDescription(Ljava/lang/String;)Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder withDescription(String newDescription)\n{\nOptionBuilder.description = newDescription;\n\nreturn instance;\n}",
            "method_id": 34,
            "loc": 6
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:setOptions(Lorg/apache/commons/cli/Options;)V",
            "method_body": "protected void setOptions(final Options options)\n{\nthis.options = options;\nthis.requiredOptions = new ArrayList(options.getRequiredOptions());\n}",
            "method_id": 35,
            "loc": 5
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:init()V",
            "method_body": "private void init()\n{\neatTheRest = false;\ntokens.clear();\n}",
            "method_id": 36,
            "loc": 5
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:create(C)Lorg/apache/commons/cli/Option;",
            "method_body": "public static Option create(char opt) throws IllegalArgumentException\n{\nreturn create(String.valueOf(opt));\n}",
            "method_id": 37,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public Option(String opt, String description) throws IllegalArgumentException\n{\nthis(opt, null, false, description);\n}",
            "method_id": 38,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:<init>()V",
            "method_body": "private List tokens = new ArrayList();\neatTheRest = false;\ntokens.clear();\n}",
            "method_id": 39,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Options:helpOptions()Ljava/util/List;",
            "method_body": "List helpOptions()\n{\nreturn new ArrayList(shortOpts.values());\n}",
            "method_id": 40,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option:clearValues()V",
            "method_body": "void clearValues()\n{\nvalues.clear();\n}",
            "method_id": 41,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:<init>()V",
            "method_body": "CommandLine()\n{\n// nothing to do\n}",
            "method_id": 42,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:addArg(Ljava/lang/String;)V",
            "method_body": "void addArg(String arg)\n{\nargs.add(arg);\n}",
            "method_id": 43,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getValues()[Ljava/lang/String;",
            "method_body": "public String[] getValues()\n{\nreturn hasNoValues() ? null : (String[]) values.toArray(new String[values.size()]);\n}",
            "method_id": 44,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:hasOption(Ljava/lang/String;)Z",
            "method_body": "public boolean hasOption(String opt)\n{\nreturn options.contains(resolveOption(opt));\n}",
            "method_id": 45,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasNoValues()Z",
            "method_body": "private boolean hasNoValues()\n{\nreturn values.isEmpty();\n}",
            "method_id": 46,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:hasOption(C)Z",
            "method_body": "public boolean hasOption(char opt)\n{\nreturn hasOption(String.valueOf(opt));\n}",
            "method_id": 47,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:getOptionValue(C)Ljava/lang/String;",
            "method_body": "public String getOptionValue(char opt)\n{\nreturn getOptionValue(String.valueOf(opt));\n}",
            "method_id": 48,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:getOptions()Lorg/apache/commons/cli/Options;",
            "method_body": "protected Options getOptions()\n{\nreturn options;\n}",
            "method_id": 49,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:getRequiredOptions()Ljava/util/List;",
            "method_body": "protected List getRequiredOptions()\n{\nreturn requiredOptions;\n}",
            "method_id": 50,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Z)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException\n{\nreturn parse(options, arguments, null, stopAtNonOption);\n}",
            "method_id": 51,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getRequiredOptions()Ljava/util/List;",
            "method_body": "public List getRequiredOptions()\n{\nreturn requiredOpts;\n}",
            "method_id": 52,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOptionGroup(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/OptionGroup;",
            "method_body": "public OptionGroup getOptionGroup(Option opt)\n{\nreturn (OptionGroup) optionGroups.get(opt.getKey());\n}",
            "method_id": 53,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getOpt()Ljava/lang/String;",
            "method_body": "public String getOpt()\n{\nreturn opt;\n}",
            "method_id": 54,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getLongOpt()Ljava/lang/String;",
            "method_body": "public String getLongOpt()\n{\nreturn longOpt;\n}",
            "method_id": 55,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasLongOpt()Z",
            "method_body": "public boolean hasLongOpt()\n{\nreturn longOpt != null;\n}",
            "method_id": 56,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasArg()Z",
            "method_body": "public boolean hasArg()\n{\nreturn numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES;\n}",
            "method_id": 57,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option:isRequired()Z",
            "method_body": "public boolean isRequired()\n{\nreturn required;\n}",
            "method_id": 58,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasValueSeparator()Z",
            "method_body": "public boolean hasValueSeparator()\n{\nreturn valuesep > 0;\n}",
            "method_id": 59,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getValuesList()Ljava/util/List;",
            "method_body": "public List getValuesList()\n{\nreturn values;\n}",
            "method_id": 60,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidOpt(C)Z",
            "method_body": "private static boolean isValidOpt(char c)\n{\nreturn isValidChar(c) || c == ' ' || c == '?' || c == '@';\n}",
            "method_id": 61,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidChar(C)Z",
            "method_body": "private static boolean isValidChar(char c)\n{\nreturn Character.isJavaIdentifierPart(c);\n}",
            "method_id": 62,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:addOption(Lorg/apache/commons/cli/Option;)V",
            "method_body": "void addOption(Option opt)\n{\noptions.add(opt);\n}",
            "method_id": 63,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setType(Ljava/lang/Object;)V",
            "method_body": "public void setType(Object type)\n{\nthis.type = type;\n}",
            "method_id": 64,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setLongOpt(Ljava/lang/String;)V",
            "method_body": "public void setLongOpt(String longOpt)\n{\nthis.longOpt = longOpt;\n}",
            "method_id": 65,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setOptionalArg(Z)V",
            "method_body": "public void setOptionalArg(boolean optionalArg)\n{\nthis.optionalArg = optionalArg;\n}",
            "method_id": 66,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setRequired(Z)V",
            "method_body": "public void setRequired(boolean required)\n{\nthis.required = required;\n}",
            "method_id": 67,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setArgName(Ljava/lang/String;)V",
            "method_body": "public void setArgName(String argName)\n{\nthis.argName = argName;\n}",
            "method_id": 68,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setArgs(I)V",
            "method_body": "public void setArgs(int num)\n{\nthis.numberOfArgs = num;\n}",
            "method_id": 69,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setValueSeparator(C)V",
            "method_body": "public void setValueSeparator(char sep)\n{\nthis.valuesep = sep;\n}",
            "method_id": 70,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:<init>()V",
            "method_body": "private OptionBuilder()\n{\n// hide the constructor\n}",
            "method_id": 71,
            "loc": 4
        }
    ]
}
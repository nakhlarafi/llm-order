{
    "bug_id": 49,
    "test_id": 0,
    "test_name": "org.apache.commons.lang.math.FractionTest.testReduce",
    "test_body": "public void testReduce() {\nFraction f = null;\nf = Fraction.getFraction(50, 75);\nFraction result = f.reduce();\nassertEquals(2, result.getNumerator());\nassertEquals(3, result.getDenominator());\nf = Fraction.getFraction(-2, -3);\nresult = f.reduce();\nassertEquals(2, result.getNumerator());\nassertEquals(3, result.getDenominator());\nf = Fraction.getFraction(2, -3);\nresult = f.reduce();\nassertEquals(-2, result.getNumerator());\nassertEquals(3, result.getDenominator());\nf = Fraction.getFraction(-2, 3);\nresult = f.reduce();\nassertEquals(-2, result.getNumerator());\nassertEquals(3, result.getDenominator());\nassertSame(f, result);\nf = Fraction.getFraction(2, 3);\nresult = f.reduce();\nassertEquals(2, result.getNumerator());\nassertEquals(3, result.getDenominator());\nassertSame(f, result);\nf = Fraction.getFraction(0, 1);\nresult = f.reduce();\nassertEquals(0, result.getNumerator());\nassertEquals(1, result.getDenominator());\nassertSame(f, result);\nf = Fraction.getFraction(0, 100);\nresult = f.reduce();\nassertEquals(0, result.getNumerator());\nassertEquals(1, result.getDenominator());\nassertSame(result, Fraction.ZERO);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<1> but was:<100>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:234)\nat junit.framework.Assert.assertEquals(Assert.java:241)\nat junit.framework.TestCase.assertEquals(TestCase.java:409)\nat org.apache.commons.lang.math.FractionTest.testReduce(FractionTest.java:655)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.lang.math.Fraction:greatestCommonDivisor(II)I",
            "method_body": "private static int greatestCommonDivisor(int u, int v) {\n//if either op. is abs 0 or 1, return 1:\nif (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\nreturn 1;\n}\n// keep u and v negative, as negative integers range down to\n// -2^31, while positive numbers can only be as large as 2^31-1\n// (i.e. we can't necessarily negate a negative number without\n// overflow)\nif (u>0) { u=-u; } // make u negative\nif (v>0) { v=-v; } // make v negative\n// B1. [Find power of 2]\nint k=0;\nwhile ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...\nu/=2; v/=2; k++; // cast out twos.\n}\nif (k==31) {\nthrow new ArithmeticException(\"overflow: gcd is 2^31\");\n}\n// B2. Initialize: u and v have been divided by 2^k and at least\n//     one is odd.\nint t = ((u&1)==1) ? v : -(u/2)/*B3*/;\n// t negative: u was odd, v may be even (t replaces v)\n// t positive: u was even, v is odd (t replaces u)\ndo {\n/* assert u<0 && v<0; */\n// B4/B3: cast out twos from t.\nwhile ((t&1)==0) { // while t is even..\nt/=2; // cast out twos\n}\n// B5 [reset max(u,v)]\nif (t>0) {\nu = -t;\n} else {\nv = t;\n}\n// B6/B3. at this point both u and v should be odd.\nt = (v - u)/2;\n// |u| larger: t positive (replace u)\n// |v| larger: t negative (replace v)\n} while (t!=0);\nreturn -u*(1<<k); // gcd is u*2^k\n}",
            "method_id": 0,
            "loc": 43
        },
        {
            "method_signature": "org.apache.commons.lang.math.Fraction:getFraction(II)Lorg/apache/commons/lang/math/Fraction;",
            "method_body": "public static Fraction getFraction(int numerator, int denominator) {\nif (denominator == 0) {\nthrow new ArithmeticException(\"The denominator must not be zero\");\n}\nif (denominator < 0) {\nif (numerator==Integer.MIN_VALUE ||\ndenominator==Integer.MIN_VALUE) {\nthrow new ArithmeticException(\"overflow: can't negate\");\n}\nnumerator = -numerator;\ndenominator = -denominator;\n}\nreturn new Fraction(numerator, denominator);\n}",
            "method_id": 1,
            "loc": 14
        },
        {
            "method_signature": "org.apache.commons.lang.math.Fraction:reduce()Lorg/apache/commons/lang/math/Fraction;",
            "method_body": "public Fraction reduce() {\nint gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\nif (gcd == 1) {\nreturn this;\n}\nreturn Fraction.getFraction(numerator / gcd, denominator / gcd);\n}",
            "method_id": 2,
            "loc": 7
        },
        {
            "method_signature": "org.apache.commons.lang.math.Fraction:<init>(II)V",
            "method_body": "private Fraction(int numerator, int denominator) {\nsuper();\nthis.numerator = numerator;\nthis.denominator = denominator;\n}",
            "method_id": 3,
            "loc": 5
        },
        {
            "method_signature": "org.apache.commons.lang.math.Fraction:getNumerator()I",
            "method_body": "public int getNumerator() {\nreturn numerator;\n}",
            "method_id": 4,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.lang.math.Fraction:getDenominator()I",
            "method_body": "public int getDenominator() {\nreturn denominator;\n}",
            "method_id": 5,
            "loc": 3
        }
    ]
}
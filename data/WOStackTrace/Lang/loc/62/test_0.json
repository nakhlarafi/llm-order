{
    "bug_id": 62,
    "test_id": 0,
    "test_name": "org.apache.commons.lang.EntitiesTest.testNumberOverflow",
    "test_body": "public void testNumberOverflow() throws Exception {\ndoTestUnescapeEntity(\"&#12345678;\", \"&#12345678;\");\ndoTestUnescapeEntity(\"x&#12345678;y\", \"x&#12345678;y\");\ndoTestUnescapeEntity(\"&#x12345678;\", \"&#x12345678;\");\ndoTestUnescapeEntity(\"x&#x12345678;y\", \"x&#x12345678;y\");\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<[&#12345678;]> but was:<[\u614e]>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.apache.commons.lang.EntitiesTest.doTestUnescapeEntity(EntitiesTest.java:101)\nat org.apache.commons.lang.EntitiesTest.testNumberOverflow(EntitiesTest.java:201)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.lang.Entities:unescape(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String unescape(String str) {\nint firstAmp = str.indexOf('&');\nif (firstAmp < 0) {\nreturn str;\n}\n\nStringBuffer buf = new StringBuffer(str.length());\nbuf.append(str.substring(0, firstAmp));\nfor (int i = firstAmp; i < str.length(); ++i) {\nchar ch = str.charAt(i);\nif (ch == '&') {\nint semi = str.indexOf(';', i + 1);\nif (semi == -1) {\nbuf.append(ch);\ncontinue;\n}\nint amph = str.indexOf('&', i + 1);\nif( amph != -1 && amph < semi ) {\n// Then the text looks like &...&...;\nbuf.append(ch);\ncontinue;\n}\nString entityName = str.substring(i + 1, semi);\nint entityValue;\nif (entityName.length() == 0) {\nentityValue = -1;\n} else if (entityName.charAt(0) == '#') {\nif (entityName.length() == 1) {\nentityValue = -1;\n} else {\nchar charAt1 = entityName.charAt(1);\ntry {\nif (charAt1 == 'x' || charAt1=='X') {\nentityValue = Integer.valueOf(entityName.substring(2), 16).intValue();\n} else {\nentityValue = Integer.parseInt(entityName.substring(1));\n}\n} catch (NumberFormatException ex) {\nentityValue = -1;\n}\n}\n} else {\nentityValue = this.entityValue(entityName);\n}\nif (entityValue == -1) {\nbuf.append('&');\nbuf.append(entityName);\nbuf.append(';');\n} else {\nbuf.append((char) (entityValue));\n}\ni = semi;\n} else {\nbuf.append(ch);\n}\n}\nreturn buf.toString();\n}",
            "method_id": 0,
            "loc": 58
        },
        {
            "method_signature": "org.apache.commons.lang.Entities$PrimitiveEntityMap:<init>()V",
            "method_body": "void add(String name, int value);\n\n/**\n* <p>Returns the name of the entity identified by the specified value.</p>\n*\n* @param value the value to locate\n* @return entity name associated with the specified value\n*/\nString name(int value);\n\n/**\n* <p>Returns the value of the entity identified by the specified name.</p>\n*\n* @param name the name to locate\n* @return entity value associated with the specified name\n*/\nint value(String name);\n}\n\nstatic class PrimitiveEntityMap implements EntityMap {\nprivate Map mapNameToValue = new HashMap();\nprivate IntHashMap mapValueToName = new IntHashMap();\n\n/**\n* {@inheritDoc}\n*/\npublic void add(String name, int value) {\nmapNameToValue.put(name, new Integer(value));\nmapValueToName.put(value, name);\n}\n\n/**\n* {@inheritDoc}\n*/\npublic String name(int value) {\nreturn (String) mapValueToName.get(value);\n}\n\n/**\n* {@inheritDoc}\n*/\npublic int value(String name) {\nObject value = mapNameToValue.get(name);\nif (value == null) {\nreturn -1;\n}\nreturn ((Integer) value).intValue();\n}\n}",
            "method_id": 1,
            "loc": 49
        },
        {
            "method_signature": "org.apache.commons.lang.Entities$PrimitiveEntityMap:add(Ljava/lang/String;I)V",
            "method_body": "void add(String name, int value);\n\n/**\n* <p>Returns the name of the entity identified by the specified value.</p>\n*\n* @param value the value to locate\n* @return entity name associated with the specified value\n*/\nString name(int value);\n\n/**\n* <p>Returns the value of the entity identified by the specified name.</p>\n*\n* @param name the name to locate\n* @return entity value associated with the specified name\n*/\nint value(String name);\n}\n\nstatic class PrimitiveEntityMap implements EntityMap {\nprivate Map mapNameToValue = new HashMap();\nprivate IntHashMap mapValueToName = new IntHashMap();\n\n/**\n* {@inheritDoc}\n*/\npublic void add(String name, int value) {\nmapNameToValue.put(name, new Integer(value));\nmapValueToName.put(value, name);\n}\n\n/**\n* {@inheritDoc}\n*/\npublic String name(int value) {\nreturn (String) mapValueToName.get(value);\n}\n\n/**\n* {@inheritDoc}\n*/\npublic int value(String name) {\nObject value = mapNameToValue.get(name);\nif (value == null) {\nreturn -1;\n}\nreturn ((Integer) value).intValue();\n}\n}",
            "method_id": 2,
            "loc": 49
        },
        {
            "method_signature": "org.apache.commons.lang.IntHashMap:put(ILjava/lang/Object;)Ljava/lang/Object;",
            "method_body": "public Object put(int key, Object value) {\n// Makes sure the key is not already in the hashtable.\nEntry tab[] = table;\nint hash = key;\nint index = (hash & 0x7FFFFFFF) % tab.length;\nfor (Entry e = tab[index]; e != null; e = e.next) {\nif (e.hash == hash) {\nObject old = e.value;\ne.value = value;\nreturn old;\n}\n}\n\nif (count >= threshold) {\n// Rehash the table if the threshold is exceeded\nrehash();\n\ntab = table;\nindex = (hash & 0x7FFFFFFF) % tab.length;\n}\n\n// Creates the new entry.\nEntry e = new Entry(hash, key, value, tab[index]);\ntab[index] = e;\ncount++;\nreturn null;\n}",
            "method_id": 3,
            "loc": 27
        },
        {
            "method_signature": "org.apache.commons.lang.IntHashMap:<init>(IF)V",
            "method_body": "public IntHashMap(int initialCapacity, float loadFactor) {\nsuper();\nif (initialCapacity < 0) {\nthrow new IllegalArgumentException(\"Illegal Capacity: \" + initialCapacity);\n}\nif (loadFactor <= 0) {\nthrow new IllegalArgumentException(\"Illegal Load: \" + loadFactor);\n}\nif (initialCapacity == 0) {\ninitialCapacity = 1;\n}\n\nthis.loadFactor = loadFactor;\ntable = new Entry[initialCapacity];\nthreshold = (int) (initialCapacity * loadFactor);\n}",
            "method_id": 4,
            "loc": 16
        },
        {
            "method_signature": "org.apache.commons.lang.IntHashMap$Entry:<init>(IILjava/lang/Object;Lorg/apache/commons/lang/IntHashMap$Entry;)V",
            "method_body": "protected Entry(int hash, int key, Object value, Entry next) {\nthis.hash = hash;\nthis.key = key;\nthis.value = value;\nthis.next = next;\n}",
            "method_id": 5,
            "loc": 6
        },
        {
            "method_signature": "org.apache.commons.lang.Entities$LookupEntityMap:<init>()V",
            "method_body": "private String[] lookupTable;\nprivate int LOOKUP_TABLE_SIZE = 256;\n* {@inheritDoc}",
            "method_id": 6,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.lang.Entities:addEntity(Ljava/lang/String;I)V",
            "method_body": "public void addEntity(String name, int value) {\nmap.add(name, value);\n}",
            "method_id": 7,
            "loc": 3
        },
        {
            "method_signature": "org.apache.commons.lang.IntHashMap:<init>()V",
            "method_body": "public IntHashMap() {\nthis(20, 0.75f);\n}",
            "method_id": 8,
            "loc": 3
        }
    ]
}
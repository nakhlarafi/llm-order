{
    "bug_id": 44,
    "test_id": 0,
    "test_name": "org.apache.commons.lang.NumberUtilsTest.testLang457",
    "test_body": "public void testLang457() {\nString[] badInputs = new String[] { \"l\", \"L\", \"f\", \"F\", \"junk\", \"bobL\"};\nfor(int i=0; i<badInputs.length; i++) {\ntry {\nNumberUtils.createNumber(badInputs[i]);\nfail(\"NumberFormatException was expected for \" + badInputs[i]);\n} catch (NumberFormatException e) {\nreturn; // expected\n}\n}\n}\n",
    "stack_trace": "java.lang.StringIndexOutOfBoundsException: String index out of range: 0\nat java.lang.String.charAt(String.java:658)\nat org.apache.commons.lang.NumberUtils.createNumber(NumberUtils.java:193)\nat org.apache.commons.lang.NumberUtilsTest.testLang457(NumberUtilsTest.java:528)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.lang.NumberUtils:createNumber(Ljava/lang/String;)Ljava/lang/Number;",
            "method_body": "public static Number createNumber(String val) throws NumberFormatException {\nif (val == null) {\nreturn null;\n}\nif (val.length() == 0) {\nthrow new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n}\nif (val.startsWith(\"--\")) {\n// this is protection for poorness in java.lang.BigDecimal.\n// it accepts this as a legal value, but it does not appear\n// to be in specification of class. OS X Java parses it to\n// a wrong value.\nreturn null;\n}\nif (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\nreturn createInteger(val);\n}\nchar lastChar = val.charAt(val.length() - 1);\nString mant;\nString dec;\nString exp;\nint decPos = val.indexOf('.');\nint expPos = val.indexOf('e') + val.indexOf('E') + 1;\n\nif (decPos > -1) {\n\nif (expPos > -1) {\nif (expPos < decPos) {\nthrow new NumberFormatException(val + \" is not a valid number.\");\n}\ndec = val.substring(decPos + 1, expPos);\n} else {\ndec = val.substring(decPos + 1);\n}\nmant = val.substring(0, decPos);\n} else {\nif (expPos > -1) {\nmant = val.substring(0, expPos);\n} else {\nmant = val;\n}\ndec = null;\n}\nif (!Character.isDigit(lastChar)) {\nif (expPos > -1 && expPos < val.length() - 1) {\nexp = val.substring(expPos + 1, val.length() - 1);\n} else {\nexp = null;\n}\n//Requesting a specific type..\nString numeric = val.substring(0, val.length() - 1);\nboolean allZeros = isAllZeros(mant) && isAllZeros(exp);\nswitch (lastChar) {\ncase 'l' :\ncase 'L' :\nif (dec == null\n&& exp == null\n&& (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\ntry {\nreturn createLong(numeric);\n} catch (NumberFormatException nfe) {\n//Too big for a long\n}\nreturn createBigInteger(numeric);\n\n}\nthrow new NumberFormatException(val + \" is not a valid number.\");\ncase 'f' :\ncase 'F' :\ntry {\nFloat f = NumberUtils.createFloat(numeric);\nif (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n//If it's too big for a float or the float value = 0 and the string\n//has non-zeros in it, then float does not have the precision we want\nreturn f;\n}\n\n} catch (NumberFormatException e) {\n// ignore the bad number\n}\n//Fall through\ncase 'd' :\ncase 'D' :\ntry {\nDouble d = NumberUtils.createDouble(numeric);\nif (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\nreturn d;\n}\n} catch (NumberFormatException nfe) {\n// empty catch\n}\ntry {\nreturn createBigDecimal(numeric);\n} catch (NumberFormatException e) {\n// empty catch\n}\n//Fall through\ndefault :\nthrow new NumberFormatException(val + \" is not a valid number.\");\n\n}\n} else {\n//User doesn't have a preference on the return type, so let's start\n//small and go from there...\nif (expPos > -1 && expPos < val.length() - 1) {\nexp = val.substring(expPos + 1, val.length());\n} else {\nexp = null;\n}\nif (dec == null && exp == null) {\n//Must be an int,long,bigint\ntry {\nreturn createInteger(val);\n} catch (NumberFormatException nfe) {\n// empty catch\n}\ntry {\nreturn createLong(val);\n} catch (NumberFormatException nfe) {\n// empty catch\n}\nreturn createBigInteger(val);\n\n} else {\n//Must be a float,double,BigDec\nboolean allZeros = isAllZeros(mant) && isAllZeros(exp);\ntry {\nFloat f = createFloat(val);\nif (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\nreturn f;\n}\n} catch (NumberFormatException nfe) {\n// empty catch\n}\ntry {\nDouble d = createDouble(val);\nif (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\nreturn d;\n}\n} catch (NumberFormatException nfe) {\n// empty catch\n}\n\nreturn createBigDecimal(val);\n\n}\n\n}\n}",
            "method_id": 0,
            "loc": 149
        },
        {
            "method_signature": "org.apache.commons.lang.NumberUtils:isAllZeros(Ljava/lang/String;)Z",
            "method_body": "private static boolean isAllZeros(String s) {\nif (s == null) {\nreturn true;\n}\nfor (int i = s.length() - 1; i >= 0; i--) {\nif (s.charAt(i) != '0') {\nreturn false;\n}\n}\nreturn s.length() > 0;\n}",
            "method_id": 1,
            "loc": 11
        }
    ]
}
{
    "bug_id": 91,
    "test_id": 0,
    "test_name": "org.apache.commons.math.fraction.FractionTest.testCompareTo",
    "test_body": "public void testCompareTo() {\nFraction first = new Fraction(1, 2);\nFraction second = new Fraction(1, 3);\nFraction third = new Fraction(1, 2);\nassertEquals(0, first.compareTo(first));\nassertEquals(0, first.compareTo(third));\nassertEquals(1, first.compareTo(second));\nassertEquals(-1, second.compareTo(first));\n// these two values are different approximations of PI\n// the first  one is approximately PI - 3.07e-18\n// the second one is approximately PI + 1.936e-17\nFraction pi1 = new Fraction(1068966896, 340262731);\nFraction pi2 = new Fraction( 411557987, 131002976);\nassertEquals(-1, pi1.compareTo(pi2));\nassertEquals( 1, pi2.compareTo(pi1));\nassertEquals(0.0, pi1.doubleValue() - pi2.doubleValue(), 1.0e-20);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<-1> but was:<0>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:234)\nat junit.framework.Assert.assertEquals(Assert.java:241)\nat junit.framework.TestCase.assertEquals(TestCase.java:409)\nat org.apache.commons.math.fraction.FractionTest.testCompareTo(FractionTest.java:178)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.fraction.Fraction:compareTo(Lorg/apache/commons/math/fraction/Fraction;)I",
            "method_body": "public int compareTo(Fraction object) {\ndouble nOd = doubleValue();\ndouble dOn = object.doubleValue();\nreturn (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.fraction.Fraction:doubleValue()D",
            "method_body": "public double doubleValue() {\nreturn (double)numerator / (double)denominator;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.fraction.Fraction:<init>(II)V",
            "method_body": "public Fraction(int num, int den) {\nsuper();\nif (den == 0) {\nthrow MathRuntimeException.createArithmeticException(\"zero denominator in fraction {0}/{1}\",\nnum, den);\n}\nif (den < 0) {\nif (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE) {\nthrow MathRuntimeException.createArithmeticException(\"overflow in fraction {0}/{1}, cannot negate\",\nnum, den);\n}\nnum = -num;\nden = -den;\n}\n// reduce numerator and denominator by greatest common denominator.\nint d = MathUtils.gcd(num, den);\nif (d > 1) {\nnum /= d;\nden /= d;\n}\n\n// move sign to numerator.\nif (den < 0) {\nnum *= -1;\nden *= -1;\n}\nthis.numerator = num;\nthis.denominator = den;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:gcd(II)I",
            "method_body": "public static int gcd(final int p, final int q) {\nint u = p;\nint v = q;\nif ((u == 0) || (v == 0)) {\nif ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {\nthrow MathRuntimeException.createArithmeticException(\n\"overflow: gcd({0}, {1}) is 2^31\",\np, q);\n}\nreturn (Math.abs(u) + Math.abs(v));\n}\n// keep u and v negative, as negative integers range down to\n// -2^31, while positive numbers can only be as large as 2^31-1\n// (i.e. we can't necessarily negate a negative number without\n// overflow)\n/* assert u!=0 && v!=0; */\nif (u > 0) {\nu = -u;\n} // make u negative\nif (v > 0) {\nv = -v;\n} // make v negative\n// B1. [Find power of 2]\nint k = 0;\nwhile ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are\n// both even...\nu /= 2;\nv /= 2;\nk++; // cast out twos.\n}\nif (k == 31) {\nthrow MathRuntimeException.createArithmeticException(\n\"overflow: gcd({0}, {1}) is 2^31\",\np, q);\n}\n// B2. Initialize: u and v have been divided by 2^k and at least\n// one is odd.\nint t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;\n// t negative: u was odd, v may be even (t replaces v)\n// t positive: u was even, v is odd (t replaces u)\ndo {\n/* assert u<0 && v<0; */\n// B4/B3: cast out twos from t.\nwhile ((t & 1) == 0) { // while t is even..\nt /= 2; // cast out twos\n}\n// B5 [reset max(u,v)]\nif (t > 0) {\nu = -t;\n} else {\nv = t;\n}\n// B6/B3. at this point both u and v should be odd.\nt = (v - u) / 2;\n// |u| larger: t positive (replace u)\n// |v| larger: t negative (replace v)\n} while (t != 0);\nreturn -u * (1 << k); // gcd is u*2^k\n}",
            "method_id": 3
        }
    ]
}
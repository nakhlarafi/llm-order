{
    "bug_id": 46,
    "test_id": 0,
    "test_name": "org.apache.commons.math.complex.ComplexTest.testDivideZero",
    "test_body": "public void testDivideZero() {\nComplex x = new Complex(3.0, 4.0);\nComplex z = x.divide(Complex.ZERO);\n// Assert.assertEquals(z, Complex.INF); // See MATH-657\nAssert.assertEquals(z, Complex.NaN);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:118)\nat org.junit.Assert.assertEquals(Assert.java:144)\nat org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.complex.Complex:toString()Ljava/lang/String;",
            "method_body": "public String toString() {\nreturn \"(\" + real + \", \" + imaginary + \")\";\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:<init>(DD)V",
            "method_body": "public Complex(double real, double imaginary) {\nthis.real = real;\nthis.imaginary = imaginary;\n\nisNaN = Double.isNaN(real) || Double.isNaN(imaginary);\nisInfinite = !isNaN &&\n(Double.isInfinite(real) || Double.isInfinite(imaginary));\nisZero = real == 0 && imaginary == 0;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object other) {\nif (this == other) {\nreturn true;\n}\nif (other instanceof Complex){\nComplex c = (Complex)other;\nif (c.isNaN) {\nreturn isNaN;\n} else {\nreturn (real == c.real) && (imaginary == c.imaginary);\n}\n}\nreturn false;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:checkNotNull(Ljava/lang/Object;)V",
            "method_body": "public static void checkNotNull(Object o)\nthrows NullArgumentException {\nif (o == null) {\nthrow new NullArgumentException();\n}\n}",
            "method_id": 3
        }
    ]
}
{
    "bug_id": 102,
    "test_id": 0,
    "test_name": "org.apache.commons.math.stat.inference.ChiSquareFactoryTest.testChiSquareLargeTestStatistic",
    "test_body": null,
    "stack_trace": "junit.framework.AssertionFailedError: chi-square test statistic expected:<114875.90421929007> but was:<3624883.3429077636>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:120)\nat junit.framework.TestCase.assertEquals(TestCase.java:279)\nat org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareLargeTestStatistic(ChiSquareTestTest.java:183)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.distribution.GammaDistributionImpl:getAlpha()D",
            "method_body": "public double getAlpha() {\nreturn alpha;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:<init>(D)V",
            "method_body": "public ChiSquaredDistributionImpl(double df) {\nthis(df, new GammaDistributionImpl(df / 2.0, 2.0));\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.util.ContinuedFraction:<init>()V",
            "method_body": "protected ContinuedFraction() {\nsuper();\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma$1:getA(ID)D",
            "method_body": "public static double regularizedGammaQ(final double a,\ndouble x,\ndouble epsilon,\nint maxIterations)\nthrows MathException\n{\ndouble ret;\n\nif (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\nret = Double.NaN;\n} else if (x == 0.0) {\nret = 1.0;\n} else if (x < a || a < 1.0) {\n// use regularizedGammaP because it should converge faster in this\n// case.\nret = 1.0 - regularizedGammaP(a, x, epsilon, maxIterations);\n} else {\n// create continued fraction\nContinuedFraction cf = new ContinuedFraction() {\n\nprivate static final long serialVersionUID = 5378525034886164398L;\n\nprotected double getA(int n, double x) {\nreturn ((2.0 * n) + 1.0) - a + x;\n}\n\nprotected double getB(int n, double x) {\nreturn n * (a - n);\n}\n};\n\nret = 1.0 / cf.evaluate(x, epsilon, maxIterations);\nret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;\n}\n\nreturn ret;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma:regularizedGammaQ(DDDI)D",
            "method_body": "public static double regularizedGammaQ(final double a,\ndouble x,\ndouble epsilon,\nint maxIterations)\nthrows MathException\n{\ndouble ret;\n\nif (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\nret = Double.NaN;\n} else if (x == 0.0) {\nret = 1.0;\n} else if (x < a || a < 1.0) {\n// use regularizedGammaP because it should converge faster in this\n// case.\nret = 1.0 - regularizedGammaP(a, x, epsilon, maxIterations);\n} else {\n// create continued fraction\nContinuedFraction cf = new ContinuedFraction() {\n\nprivate static final long serialVersionUID = 5378525034886164398L;\n\nprotected double getA(int n, double x) {\nreturn ((2.0 * n) + 1.0) - a + x;\n}\n\nprotected double getB(int n, double x) {\nreturn n * (a - n);\n}\n};\n\nret = 1.0 / cf.evaluate(x, epsilon, maxIterations);\nret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;\n}\n\nreturn ret;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.distribution.GammaDistributionImpl:setAlpha(D)V",
            "method_body": "public void setAlpha(double alpha) {\nif (alpha <= 0.0) {\nthrow new IllegalArgumentException(\"alpha must be positive\");\n}\nthis.alpha = alpha;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma:logGamma(D)D",
            "method_body": "public static double logGamma(double x) {\ndouble ret;\n\nif (Double.isNaN(x) || (x <= 0.0)) {\nret = Double.NaN;\n} else {\ndouble g = 607.0 / 128.0;\n\ndouble sum = 0.0;\nfor (int i = lanczos.length - 1; i > 0; --i) {\nsum = sum + (lanczos[i] / (x + i));\n}\nsum = sum + lanczos[0];\n\ndouble tmp = x + g + .5;\nret = ((x + .5) * Math.log(tmp)) - tmp +\nHALF_LOG_2_PI + Math.log(sum / x);\n}\n\nreturn ret;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma$1:<init>(D)V",
            "method_body": "public static double regularizedGammaQ(final double a,\nif (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\n} else if (x == 0.0) {\n} else if (x < a || a < 1.0) {\nContinuedFraction cf = new ContinuedFraction() {\nreturn ((2.0 * n) + 1.0) - a + x;\nreturn n * (a - n);\nret = 1.0 / cf.evaluate(x, epsilon, maxIterations);\nret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;\nreturn ret;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:setGamma(Lorg/apache/commons/math/distribution/GammaDistribution;)V",
            "method_body": "public void setGamma(GammaDistribution g) {\nthis.gamma = g;\n\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:cumulativeProbability(D)D",
            "method_body": "public double cumulativeProbability(double x) throws MathException {\nreturn getGamma().cumulativeProbability(x);\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math.distribution.AbstractContinuousDistribution:<init>()V",
            "method_body": "protected AbstractContinuousDistribution() {\nsuper();\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:getGamma()Lorg/apache/commons/math/distribution/GammaDistribution;",
            "method_body": "private GammaDistribution getGamma() {\nreturn gamma;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma:regularizedGammaP(DD)D",
            "method_body": "public static double regularizedGammaP(double a, double x)\nthrows MathException\n{\nreturn regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl:<init>()V",
            "method_body": "public ChiSquareTestImpl() {\nthis(new ChiSquaredDistributionImpl(1.0));\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.TestUtils:getUnknownDistributionChiSquareTest()Lorg/apache/commons/math/stat/inference/UnknownDistributionChiSquareTest;",
            "method_body": "public static UnknownDistributionChiSquareTest getUnknownDistributionChiSquareTest() {\nreturn unknownDistributionChiSquareTest;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl:isNonNegative([J)Z",
            "method_body": "private boolean isNonNegative(long[] in) {\nfor (int i = 0; i < in.length; i ++) {\nif (in[i] < 0) {\nreturn false;\n}\n}\nreturn true;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl:isPositive([D)Z",
            "method_body": "private boolean isPositive(double[] in) {\nfor (int i = 0; i < in.length; i ++) {\nif (in[i] <= 0) {\nreturn false;\n}\n}\nreturn true;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.distribution.GammaDistributionImpl:<init>(DD)V",
            "method_body": "public GammaDistributionImpl(double alpha, double beta) {\nsuper();\nsetAlpha(alpha);\nsetBeta(beta);\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl:setDistribution(Lorg/apache/commons/math/distribution/ChiSquaredDistribution;)V",
            "method_body": "public void setDistribution(ChiSquaredDistribution value) {\ndistribution = value;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math.distribution.GammaDistributionImpl:getBeta()D",
            "method_body": "public double getBeta() {\nreturn beta;\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.math.distribution.AbstractDistribution:<init>()V",
            "method_body": "protected AbstractDistribution() {\nsuper();\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.distribution.GammaDistributionImpl:setBeta(D)V",
            "method_body": "public void setBeta(double beta) {\nif (beta <= 0.0) {\nthrow new IllegalArgumentException(\"beta must be positive\");\n}\nthis.beta = beta;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.util.ContinuedFraction:evaluate(DDI)D",
            "method_body": "public double evaluate(double x, double epsilon, int maxIterations)\nthrows MathException\n{\ndouble p0 = 1.0;\ndouble p1 = getA(0, x);\ndouble q0 = 0.0;\ndouble q1 = 1.0;\ndouble c = p1 / q1;\nint n = 0;\ndouble relativeError = Double.MAX_VALUE;\nwhile (n < maxIterations && relativeError > epsilon) {\n++n;\ndouble a = getA(n, x);\ndouble b = getB(n, x);\ndouble p2 = a * p1 + b * p0;\ndouble q2 = a * q1 + b * q0;\nif (Double.isInfinite(p2) || Double.isInfinite(q2)) {\n// need to scale\nif (a != 0.0) {\np2 = p1 + (b / a * p0);\nq2 = q1 + (b / a * q0);\n} else if (b != 0) {\np2 = (a / b * p1) + p0;\nq2 = (a / b * q1) + q0;\n} else {\n// can not scale an convergent is unbounded.\nthrow new ConvergenceException(\n\"Continued fraction convergents diverged to +/- infinity for value {0}\",\nnew Object[] { new Double(x) });\n}\n}\ndouble r = p2 / q2;\nrelativeError = Math.abs(r / c - 1.0);\n\n// prepare for next iteration\nc = p2 / q2;\np0 = p1;\np1 = p2;\nq0 = q1;\nq1 = q2;\n}\n\nif (n >= maxIterations) {\nthrow new MaxIterationsExceededException(maxIterations,\n\"Continued fraction convergents failed to converge for value {0}\",\nnew Object[] { new Double(x) });\n}\n\nreturn c;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:setDegreesOfFreedom(D)V",
            "method_body": "public void setDegreesOfFreedom(double degreesOfFreedom) {\ngetGamma().setAlpha(degreesOfFreedom / 2.0);\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquareTest([D[J)D",
            "method_body": "public double chiSquareTest(double[] expected, long[] observed)\nthrows IllegalArgumentException, MathException {\ndistribution.setDegreesOfFreedom(expected.length - 1.0);\nreturn 1.0 - distribution.cumulativeProbability(\nchiSquare(expected, observed));\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:<init>(DLorg/apache/commons/math/distribution/GammaDistribution;)V",
            "method_body": "public ChiSquaredDistributionImpl(double df, GammaDistribution g) {\nsuper();\nsetGamma(g);\nsetDegreesOfFreedom(df);\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math.distribution.GammaDistributionImpl:cumulativeProbability(D)D",
            "method_body": "public double cumulativeProbability(double x) throws MathException{\ndouble ret;\n\nif (x <= 0.0) {\nret = 0.0;\n} else {\nret = Gamma.regularizedGammaP(getAlpha(), x / getBeta());\n}\n\nreturn ret;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl:<init>(Lorg/apache/commons/math/distribution/ChiSquaredDistribution;)V",
            "method_body": "public ChiSquareTestImpl(ChiSquaredDistribution x) {\nsuper();\nsetDistribution(x);\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma$1:getB(ID)D",
            "method_body": "public static double regularizedGammaQ(final double a,\ndouble x,\ndouble epsilon,\nint maxIterations)\nthrows MathException\n{\ndouble ret;\n\nif (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\nret = Double.NaN;\n} else if (x == 0.0) {\nret = 1.0;\n} else if (x < a || a < 1.0) {\n// use regularizedGammaP because it should converge faster in this\n// case.\nret = 1.0 - regularizedGammaP(a, x, epsilon, maxIterations);\n} else {\n// create continued fraction\nContinuedFraction cf = new ContinuedFraction() {\n\nprivate static final long serialVersionUID = 5378525034886164398L;\n\nprotected double getA(int n, double x) {\nreturn ((2.0 * n) + 1.0) - a + x;\n}\n\nprotected double getB(int n, double x) {\nreturn n * (a - n);\n}\n};\n\nret = 1.0 / cf.evaluate(x, epsilon, maxIterations);\nret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;\n}\n\nreturn ret;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquare([D[J)D",
            "method_body": "public double chiSquare(double[] expected, long[] observed)\nthrows IllegalArgumentException {\nif ((expected.length < 2) || (expected.length != observed.length)) {\nthrow new IllegalArgumentException(\n\"observed, expected array lengths incorrect\");\n}\nif (!isPositive(expected) || !isNonNegative(observed)) {\nthrow new IllegalArgumentException(\n\"observed counts must be non-negative and expected counts must be postive\");\n}\ndouble sumSq = 0.0d;\ndouble dev = 0.0d;\nfor (int i = 0; i < observed.length; i++) {\ndev = ((double) observed[i] - expected[i]);\nsumSq += dev * dev / expected[i];\n}\nreturn sumSq;\n}",
            "method_id": 29
        }
    ]
}
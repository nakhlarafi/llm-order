{
    "bug_id": 5,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.complex.ComplexTest.testReciprocalZero",
    "test_body": "public void testReciprocalZero() {\nAssert.assertEquals(Complex.ZERO.reciprocal(), Complex.INF);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:118)\nat org.junit.Assert.assertEquals(Assert.java:144)\nat org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(ComplexTest.java:334)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.complex.Complex:reciprocal()Lorg/apache/commons/math3/complex/Complex;",
            "method_body": "public Complex reciprocal() {\nif (isNaN) {\nreturn NaN;\n}\n\nif (real == 0.0 && imaginary == 0.0) {\nreturn NaN;\n}\n\nif (isInfinite) {\nreturn ZERO;\n}\n\nif (FastMath.abs(real) < FastMath.abs(imaginary)) {\ndouble q = real / imaginary;\ndouble scale = 1. / (real * q + imaginary);\nreturn createComplex(scale * q, -scale);\n} else {\ndouble q = imaginary / real;\ndouble scale = 1. / (imaginary * q + real);\nreturn createComplex(scale, -scale * q);\n}\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.complex.Complex:<init>(DD)V",
            "method_body": "public Complex(double real, double imaginary) {\nthis.real = real;\nthis.imaginary = imaginary;\n\nisNaN = Double.isNaN(real) || Double.isNaN(imaginary);\nisInfinite = !isNaN &&\n(Double.isInfinite(real) || Double.isInfinite(imaginary));\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.complex.Complex:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object other) {\nif (this == other) {\nreturn true;\n}\nif (other instanceof Complex){\nComplex c = (Complex)other;\nif (c.isNaN) {\nreturn isNaN;\n} else {\nreturn (real == c.real) && (imaginary == c.imaginary);\n}\n}\nreturn false;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.complex.Complex:toString()Ljava/lang/String;",
            "method_body": "public String toString() {\nreturn \"(\" + real + \", \" + imaginary + \")\";\n}",
            "method_id": 3
        }
    ]
}
{
    "bug_id": 54,
    "test_id": 0,
    "test_name": "org.apache.commons.lang.LocaleUtilsTest.testLang328",
    "test_body": "public void testLang328() {\nassertValidToLocale(\"fr__POSIX\", \"fr\", \"\", \"POSIX\");\n}\n",
    "stack_trace": "java.lang.IllegalArgumentException: Invalid locale format: fr__POSIX\nat org.apache.commons.lang.LocaleUtils.toLocale(LocaleUtils.java:116)\nat org.apache.commons.lang.LocaleUtilsTest.assertValidToLocale(LocaleUtilsTest.java:140)\nat org.apache.commons.lang.LocaleUtilsTest.testLang328(LocaleUtilsTest.java:505)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.lang.LocaleUtils:toLocale(Ljava/lang/String;)Ljava/util/Locale;",
            "method_body": "public static Locale toLocale(String str) {\nif (str == null) {\nreturn null;\n}\nint len = str.length();\nif (len != 2 && len != 5 && len < 7) {\nthrow new IllegalArgumentException(\"Invalid locale format: \" + str);\n}\nchar ch0 = str.charAt(0);\nchar ch1 = str.charAt(1);\nif (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\nthrow new IllegalArgumentException(\"Invalid locale format: \" + str);\n}\nif (len == 2) {\nreturn new Locale(str, \"\");\n} else {\nif (str.charAt(2) != '_') {\nthrow new IllegalArgumentException(\"Invalid locale format: \" + str);\n}\nchar ch3 = str.charAt(3);\nchar ch4 = str.charAt(4);\nif (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\nthrow new IllegalArgumentException(\"Invalid locale format: \" + str);\n}\nif (len == 5) {\nreturn new Locale(str.substring(0, 2), str.substring(3, 5));\n} else {\nif (str.charAt(5) != '_') {\nthrow new IllegalArgumentException(\"Invalid locale format: \" + str);\n}\nreturn new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n}\n}\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.lang.LocaleUtils:isAvailableLocale(Ljava/util/Locale;)Z",
            "method_body": "public static boolean isAvailableLocale(Locale locale) {\nreturn availableLocaleList().contains(locale);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.lang.LocaleUtils:availableLocaleList()Ljava/util/List;",
            "method_body": "public static List availableLocaleList() {\nreturn cAvailableLocaleList;\n}",
            "method_id": 2
        }
    ]
}
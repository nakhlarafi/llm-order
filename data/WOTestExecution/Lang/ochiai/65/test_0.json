{
    "bug_id": 65,
    "test_id": 0,
    "test_name": "org.apache.commons.lang.time.DateUtilsTest.testTruncateLang59",
    "test_body": "public void testTruncateLang59() throws Exception {\n// Set TimeZone to Mountain Time\nTimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\nTimeZone.setDefault(MST_MDT);\nDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\nformat.setTimeZone(MST_MDT);\nDate oct31_01MDT = new Date(1099206000000L); \nDate oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\nDate oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\nDate oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\nDate oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\nassertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));\nassertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));\nassertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));\nassertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));\nassertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));\n// ------- Demonstrate Problem -------\nCalendar gval = Calendar.getInstance();\ngval.setTime(new Date(oct31_01MDT.getTime()));\ngval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\nassertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);\n// ---------- Test Truncate ----------\nassertEquals(\"Truncate Calendar.MILLISECOND\",\noct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));\nassertEquals(\"Truncate Calendar.SECOND\",\noct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));\nassertEquals(\"Truncate Calendar.MINUTE\",\noct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));\nassertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\noct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));\nassertEquals(\"Truncate Calendar.HOUR\",\noct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));\nassertEquals(\"Truncate Calendar.DATE\",\noct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));\n// ---------- Test Round (down) ----------\nassertEquals(\"Round Calendar.MILLISECOND\",\noct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));\nassertEquals(\"Round Calendar.SECOND\",\noct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));\nassertEquals(\"Round Calendar.MINUTE\",\noct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));\nassertEquals(\"Round Calendar.HOUR_OF_DAY\",\noct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));\nassertEquals(\"Round Calendar.HOUR\",\noct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));\nassertEquals(\"Round Calendar.DATE\",\noct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));\n// restore default time zone\nTimeZone.setDefault(defaultZone);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: Truncate Calendar.SECOND expected:<Sun Oct 31 01:02:03 MDT 2004> but was:<Sun Oct 31 01:02:03 MST 2004>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.TestCase.assertEquals(TestCase.java:244)\nat org.apache.commons.lang.time.DateUtilsTest.testTruncateLang59(DateUtilsTest.java:927)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.lang.time.DateUtils:modify(Ljava/util/Calendar;IZ)V",
            "method_body": "private static void modify(Calendar val, int field, boolean round) {\nif (val.get(Calendar.YEAR) > 280000000) {\nthrow new ArithmeticException(\"Calendar value too large for accurate calculations\");\n}\n\n\n// ----------------- Fix for LANG-59 ---------------------- START ---------------\n// see http://issues.apache.org/jira/browse/LANG-59\n//\n// Manually truncate milliseconds, seconds and minutes, rather than using\n// Calendar methods.\n\n\n// truncate milliseconds\n\n// truncate seconds\n\n// truncate minutes\n\n// reset time\n// ----------------- Fix for LANG-59 ----------------------- END ----------------\n\nboolean roundUp = false;\nfor (int i = 0; i < fields.length; i++) {\nfor (int j = 0; j < fields[i].length; j++) {\nif (fields[i][j] == field) {\n//This is our field... we stop looping\nif (round && roundUp) {\nif (field == DateUtils.SEMI_MONTH) {\n//This is a special case that's hard to generalize\n//If the date is 1, we round up to 16, otherwise\n//  we subtract 15 days and add 1 month\nif (val.get(Calendar.DATE) == 1) {\nval.add(Calendar.DATE, 15);\n} else {\nval.add(Calendar.DATE, -15);\nval.add(Calendar.MONTH, 1);\n}\n} else {\n//We need at add one to this field since the\n//  last number causes us to round up\nval.add(fields[i][0], 1);\n}\n}\nreturn;\n}\n}\n//We have various fields that are not easy roundings\nint offset = 0;\nboolean offsetSet = false;\n//These are special types of fields that require different rounding rules\nswitch (field) {\ncase DateUtils.SEMI_MONTH:\nif (fields[i][0] == Calendar.DATE) {\n//If we're going to drop the DATE field's value,\n//  we want to do this our own way.\n//We need to subtrace 1 since the date has a minimum of 1\noffset = val.get(Calendar.DATE) - 1;\n//If we're above 15 days adjustment, that means we're in the\n//  bottom half of the month and should stay accordingly.\nif (offset >= 15) {\noffset -= 15;\n}\n//Record whether we're in the top or bottom half of that range\nroundUp = offset > 7;\noffsetSet = true;\n}\nbreak;\ncase Calendar.AM_PM:\nif (fields[i][0] == Calendar.HOUR_OF_DAY) {\n//If we're going to drop the HOUR field's value,\n//  we want to do this our own way.\noffset = val.get(Calendar.HOUR_OF_DAY);\nif (offset >= 12) {\noffset -= 12;\n}\nroundUp = offset > 6;\noffsetSet = true;\n}\nbreak;\n}\nif (!offsetSet) {\nint min = val.getActualMinimum(fields[i][0]);\nint max = val.getActualMaximum(fields[i][0]);\n//Calculate the offset from the minimum allowed value\noffset = val.get(fields[i][0]) - min;\n//Set roundUp if this is more than half way between the minimum and maximum\nroundUp = offset > ((max - min) / 2);\n}\n//We need to remove this field\nval.set(fields[i][0], val.get(fields[i][0]) - offset);\n}\nthrow new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.lang.time.DateUtils:truncate(Ljava/util/Date;I)Ljava/util/Date;",
            "method_body": "public static Date truncate(Date date, int field) {\nif (date == null) {\nthrow new IllegalArgumentException(\"The date must not be null\");\n}\nCalendar gval = Calendar.getInstance();\ngval.setTime(date);\nmodify(gval, field, false);\nreturn gval.getTime();\n}",
            "method_id": 1
        }
    ]
}
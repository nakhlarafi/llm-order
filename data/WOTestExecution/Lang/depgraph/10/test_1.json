{
    "bug_id": 10,
    "test_id": 1,
    "test_name": "org.apache.commons.lang3.time.FastDateParserTest.testLANG_831",
    "test_body": "public void testLANG_831() throws Exception {\ntestSdfAndFdp(\"M E\",\"3  Tue\", true);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: Expected FDF failure, but got Mon Mar 02 21:00:00 PST 1970 for [M E,3  Tue] using (\\p{IsNd}++)\\s*+(Fri|Friday|Mon|Monday|Sat|Saturday|Sun|Sunday|Thu|Thursday|Tue|Tuesday|Wed|Wednesday)\nat junit.framework.Assert.fail(Assert.java:57)\nat org.apache.commons.lang3.time.FastDateParserTest.testSdfAndFdp(FastDateParserTest.java:377)\nat org.apache.commons.lang3.time.FastDateParserTest.testLANG_831(FastDateParserTest.java:348)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser:init()V",
            "method_body": "private void init() {\nthisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n\nnameValues= new ConcurrentHashMap<Integer, KeyValue[]>();\n\nStringBuilder regex= new StringBuilder();\nList<Strategy> collector = new ArrayList<Strategy>();\n\nMatcher patternMatcher= formatPattern.matcher(pattern);\nif(!patternMatcher.lookingAt()) {\nthrow new IllegalArgumentException(\"Invalid pattern\");\n}\n\ncurrentFormatField= patternMatcher.group();\nStrategy currentStrategy= getStrategy(currentFormatField);\nfor(;;) {\npatternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\nif(!patternMatcher.lookingAt()) {\nnextStrategy = null;\nbreak;\n}\nString nextFormatField= patternMatcher.group();\nnextStrategy = getStrategy(nextFormatField);\nif(currentStrategy.addRegex(this, regex)) {\ncollector.add(currentStrategy);\n}\ncurrentFormatField= nextFormatField;\ncurrentStrategy= nextStrategy;\n}\nif(currentStrategy.addRegex(this, regex)) {\ncollector.add(currentStrategy);\n}\ncurrentFormatField= null;\nstrategies= collector.toArray(new Strategy[collector.size()]);\nparsePattern= Pattern.compile(regex.toString());\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser:parse(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/util/Date;",
            "method_body": "public Date parse(String source, ParsePosition pos) {\nint offset= pos.getIndex();\nMatcher matcher= parsePattern.matcher(source.substring(offset));\nif(!matcher.lookingAt()) {\nreturn null;\n}\n// timing tests indicate getting new instance is 19% faster than cloning\nCalendar cal= Calendar.getInstance(timeZone, locale);\ncal.clear();\n\nfor(int i=0; i<strategies.length;) {\nStrategy strategy= strategies[i++];\nstrategy.setCalendar(this, cal, matcher.group(i));\n}\npos.setIndex(offset+matcher.end());\nreturn cal.getTime();\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser:getDisplayNames(I)[Lorg/apache/commons/lang3/time/FastDateParser$KeyValue;",
            "method_body": "KeyValue[] getDisplayNames(int field) {\nInteger fieldInt = Integer.valueOf(field);\nKeyValue[] fieldKeyValues= nameValues.get(fieldInt);\nif(fieldKeyValues==null) {\nDateFormatSymbols symbols= DateFormatSymbols.getInstance(locale);\nswitch(field) {\ncase Calendar.ERA:\n// DateFormatSymbols#getEras() only returns AD/BC or translations\n// It does not work for the Thai Buddhist or Japanese Imperial calendars.\n// see: https://issues.apache.org/jira/browse/TRINIDAD-2126\nCalendar c = Calendar.getInstance(locale);\n// N.B. Some calendars have different short and long symbols, e.g. ja_JP_JP\nString[] shortEras = toArray(c.getDisplayNames(Calendar.ERA, Calendar.SHORT, locale));\nString[] longEras = toArray(c.getDisplayNames(Calendar.ERA, Calendar.LONG, locale));\nfieldKeyValues= createKeyValues(longEras, shortEras);\nbreak;\ncase Calendar.DAY_OF_WEEK:\nfieldKeyValues= createKeyValues(symbols.getWeekdays(), symbols.getShortWeekdays());\nbreak;\ncase Calendar.AM_PM:\nfieldKeyValues= createKeyValues(symbols.getAmPmStrings(), null);\nbreak;\ncase Calendar.MONTH:\nfieldKeyValues= createKeyValues(symbols.getMonths(), symbols.getShortMonths());\nbreak;\ndefault:\nthrow new IllegalArgumentException(\"Invalid field value \"+field);\n}\nKeyValue[] prior = nameValues.putIfAbsent(fieldInt, fieldKeyValues);\nif(prior!=null) {\nfieldKeyValues= prior;\n}\n}\nreturn fieldKeyValues;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser:escapeRegex(Ljava/lang/StringBuilder;Ljava/lang/String;Z)Ljava/lang/StringBuilder;",
            "method_body": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\nboolean wasWhite= false;\nfor(int i= 0; i<value.length(); ++i) {\nchar c= value.charAt(i);\nif(Character.isWhitespace(c)) {\nif(!wasWhite) {\nwasWhite= true;\nregex.append(\"\\\\s*+\");\n}\ncontinue;\n}\nwasWhite= false;\nswitch(c) {\ncase '\\'':\nif(unquote) {\nif(++i==value.length()) {\nreturn regex;\n}\nc= value.charAt(i);\n}\nbreak;\ncase '?':\ncase '[':\ncase ']':\ncase '(':\ncase ')':\ncase '{':\ncase '}':\ncase '\\\\':\ncase '|':\ncase '*':\ncase '+':\ncase '^':\ncase '$':\ncase '.':\nregex.append('\\\\');\n}\nregex.append(c);\n}\nreturn regex;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser:copy([Lorg/apache/commons/lang3/time/FastDateParser$KeyValue;I[Ljava/lang/String;)I",
            "method_body": "private static int copy(KeyValue[] fieldKeyValues, int offset, String[] values) {\nif(values!=null) {\nfor(int i= 0; i<values.length; ++i) {\nString value= values[i];\nif(value.length()>0) {\nfieldKeyValues[offset++]= new KeyValue(value, i);\n}\n}\n}\nreturn offset;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser:count([Ljava/lang/String;)I",
            "method_body": "private static int count(String[] values) {\nint count= 0;\nif(values!=null) {\nfor(String value : values) {\nif(value.length()>0) {\n++count;\n}\n}\n}\nreturn count;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser:parse(Ljava/lang/String;)Ljava/util/Date;",
            "method_body": "public Date parse(String source) throws ParseException {\nDate date= parse(source, new ParsePosition(0));\nif(date==null) {\n// Add a note re supported date range\nif (locale.equals(JAPANESE_IMPERIAL)) {\nthrow new ParseException(\n\"(The \" +locale + \" locale does not support dates before 1868 AD)\\n\" +\n\"Unparseable date: \\\"\"+source+\"\\\" does not match \"+parsePattern.pattern(), 0);\n}\nthrow new ParseException(\"Unparseable date: \\\"\"+source+\"\\\" does not match \"+parsePattern.pattern(), 0);\n}\nreturn date;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser:createKeyValues([Ljava/lang/String;[Ljava/lang/String;)[Lorg/apache/commons/lang3/time/FastDateParser$KeyValue;",
            "method_body": "private static KeyValue[] createKeyValues(String[] longValues, String[] shortValues) {\nKeyValue[] fieldKeyValues= new KeyValue[count(longValues)+count(shortValues)];\ncopy(fieldKeyValues, copy(fieldKeyValues, 0, longValues), shortValues);\nArrays.sort(fieldKeyValues, IGNORE_CASE_COMPARATOR);\nreturn fieldKeyValues;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser:getParsePattern()Ljava/util/regex/Pattern;",
            "method_body": "Pattern getParsePattern() {\nreturn parsePattern;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser:<init>(Ljava/lang/String;Ljava/util/TimeZone;Ljava/util/Locale;)V",
            "method_body": "protected FastDateParser(String pattern, TimeZone timeZone, Locale locale) {\nthis.pattern = pattern;\nthis.timeZone = timeZone;\nthis.locale = locale;\ninit();\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser:isNextNumber()Z",
            "method_body": "boolean isNextNumber() {\nreturn nextStrategy!=null && nextStrategy.isNumber();\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser:getStrategy(Ljava/lang/String;)Lorg/apache/commons/lang3/time/FastDateParser$Strategy;",
            "method_body": "boolean isNumber();\n/**\n* Set the Calendar with the parsed field\n* @param parser The parser calling this strategy\n* @param cal The <code>Calendar</code> to set\n* @param value The parsed field to translate and set in cal\n*/\nvoid setCalendar(FastDateParser parser, Calendar cal, String value);\n/**\n* Generate a <code>Pattern</code> regular expression to the <code>StringBuilder</code>\n* which will accept this field\n* @param parser The parser calling this strategy\n* @param regex The <code>StringBuilder</code> to append to\n* @return true, if this field will set the calendar;\n* false, if this field is a constant value\n*/\nboolean addRegex(FastDateParser parser, StringBuilder regex);\n}\n\n/**\n* A <code>Pattern</code> to parse the user supplied SimpleDateFormat pattern\n*/\nprivate static final Pattern formatPattern= Pattern.compile(\n\"D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++\");\n\n/**\n* Obtain a Strategy given a field from a SimpleDateFormat pattern\n* @param formatField A sub-sequence of the SimpleDateFormat pattern\n* @return The Strategy that will handle parsing for the field\n*/\nprivate Strategy getStrategy(String formatField) {\nswitch(formatField.charAt(0)) {\ncase '\\'':\nif(formatField.length()>2) {\nformatField= formatField.substring(1, formatField.length()-1);\n}\n//$FALL-THROUGH$\ndefault:\nreturn new CopyQuotedStrategy(formatField);\ncase 'D':\nreturn DAY_OF_YEAR_STRATEGY;\ncase 'E':\nreturn DAY_OF_WEEK_STRATEGY;\ncase 'F':\nreturn DAY_OF_WEEK_IN_MONTH_STRATEGY;\ncase 'G':\nreturn ERA_STRATEGY;\ncase 'H':\nreturn MODULO_HOUR_OF_DAY_STRATEGY;\ncase 'K':\nreturn HOUR_STRATEGY;\ncase 'M':\nreturn formatField.length()>=3 ?TEXT_MONTH_STRATEGY :NUMBER_MONTH_STRATEGY;\ncase 'S':\nreturn MILLISECOND_STRATEGY;\ncase 'W':\nreturn WEEK_OF_MONTH_STRATEGY;\ncase 'Z':\nbreak;\ncase 'a':\nreturn AM_PM_STRATEGY;\ncase 'd':\nreturn DAY_OF_MONTH_STRATEGY;\ncase 'h':\nreturn MODULO_HOUR_STRATEGY;\ncase 'k':\nreturn HOUR_OF_DAY_STRATEGY;\ncase 'm':\nreturn MINUTE_STRATEGY;\ncase 's':\nreturn SECOND_STRATEGY;\ncase 'w':\nreturn WEEK_OF_YEAR_STRATEGY;\ncase 'y':\nreturn formatField.length()>2 ?LITERAL_YEAR_STRATEGY :ABBREVIATED_YEAR_STRATEGY;\ncase 'z':\nbreak;\n}\nTimeZoneStrategy tzs= tzsCache.get(locale);\nif(tzs==null) {\ntzs= new TimeZoneStrategy(locale);\nTimeZoneStrategy inCache= tzsCache.putIfAbsent(locale, tzs);\nif(inCache!=null) {\nreturn inCache;\n}\n}\nreturn tzs;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser$TextStrategy:setCalendar(Lorg/apache/commons/lang3/time/FastDateParser;Ljava/util/Calendar;Ljava/lang/String;)V",
            "method_body": "public void setCalendar(FastDateParser parser, Calendar cal, String value) {\nKeyValue[] textKeyValues= parser.getDisplayNames(field);\nint idx= Arrays.binarySearch(textKeyValues, new KeyValue(value, -1), IGNORE_CASE_COMPARATOR);\nif(idx<0) {\nStringBuilder sb= new StringBuilder(value);\nsb.append(\" not in (\");\nfor(KeyValue textKeyValue : textKeyValues) {\nsb.append(textKeyValue.key).append(' ');\n}\nsb.setCharAt(sb.length()-1, ')');\nthrow new IllegalArgumentException(sb.toString());\n}\ncal.set(field, textKeyValues[idx].value);\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser$3:modify(I)I",
            "method_body": "public int modify(int iValue) {\nreturn iValue-1;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser$NumberStrategy:setCalendar(Lorg/apache/commons/lang3/time/FastDateParser;Ljava/util/Calendar;Ljava/lang/String;)V",
            "method_body": "public void setCalendar(FastDateParser parser, Calendar cal, String value) {\ncal.set(field, modify(Integer.parseInt(value)));\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser$1:compare(Lorg/apache/commons/lang3/time/FastDateParser$KeyValue;Lorg/apache/commons/lang3/time/FastDateParser$KeyValue;)I",
            "method_body": "public int compare(KeyValue left, KeyValue right) {\nreturn left.key.compareToIgnoreCase(right.key);\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser$TextStrategy:addRegex(Lorg/apache/commons/lang3/time/FastDateParser;Ljava/lang/StringBuilder;)Z",
            "method_body": "public boolean addRegex(FastDateParser parser, StringBuilder regex) {\nregex.append('(');\nfor(KeyValue textKeyValue : parser.getDisplayNames(field)) {\nescapeRegex(regex, textKeyValue.key, false).append('|');\n}\nregex.setCharAt(regex.length()-1, ')');\nreturn true;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser$KeyValue:<init>(Ljava/lang/String;I)V",
            "method_body": "public KeyValue(String key, int value) {\nthis.key= key;\nthis.value= value;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser$CopyQuotedStrategy:isNumber()Z",
            "method_body": "public boolean isNumber() {\nchar c= formatField.charAt(0);\nif(c=='\\'') {\nc= formatField.charAt(1);\n}\nreturn Character.isDigit(c);\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser$CopyQuotedStrategy:<init>(Ljava/lang/String;)V",
            "method_body": "CopyQuotedStrategy(String formatField) {\nthis.formatField= formatField;\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser$CopyQuotedStrategy:addRegex(Lorg/apache/commons/lang3/time/FastDateParser;Ljava/lang/StringBuilder;)Z",
            "method_body": "public boolean addRegex(FastDateParser parser, StringBuilder regex) {\nescapeRegex(regex, formatField, true);\nreturn false;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.lang3.time.FastDateParser$NumberStrategy:addRegex(Lorg/apache/commons/lang3/time/FastDateParser;Ljava/lang/StringBuilder;)Z",
            "method_body": "public boolean addRegex(FastDateParser parser, StringBuilder regex) {\nif(parser.isNextNumber()) {\nregex.append(\"(\\\\p{IsNd}{\").append(parser.getFieldWidth()).append(\"}+)\");\n}\nelse {\nregex.append(\"(\\\\p{IsNd}++)\");\n}\nreturn true;\n}",
            "method_id": 21
        }
    ]
}
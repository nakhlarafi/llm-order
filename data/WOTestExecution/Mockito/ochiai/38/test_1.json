{
    "bug_id": 38,
    "test_id": 1,
    "test_name": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest.shouldWorkFineWhenGivenArgIsNull",
    "test_body": "public void shouldWorkFineWhenGivenArgIsNull() {\n//when\nInteger[] suspicious = tool.getSuspiciouslyNotMatchingArgsIndexes((List) Arrays.asList(new Equals(20)), new Object[] {null});\n//then\nassertEquals(0, suspicious.length);\n}\n",
    "stack_trace": "java.lang.NullPointerException\nat org.mockito.internal.verification.argumentmatching.ArgumentMatchingTool.toStringEquals(ArgumentMatchingTool.java:48)\nat org.mockito.internal.verification.argumentmatching.ArgumentMatchingTool.getSuspiciouslyNotMatchingArgsIndexes(ArgumentMatchingTool.java:30)\nat org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest.shouldWorkFineWhenGivenArgIsNull(ArgumentMatchingToolTest.java:82)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingTool:toStringEquals(Lorg/hamcrest/Matcher;Ljava/lang/Object;)Z",
            "method_body": "private boolean toStringEquals(Matcher m, Object arg) {\nreturn StringDescription.toString(m).equals(arg.toString());\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingTool:safelyMatches(Lorg/hamcrest/Matcher;Ljava/lang/Object;)Z",
            "method_body": "private boolean safelyMatches(Matcher m, Object arg) {\ntry {\nreturn m.matches(arg);\n} catch (Throwable t) {\nreturn false;\n}\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingTool:getSuspiciouslyNotMatchingArgsIndexes(Ljava/util/List;[Ljava/lang/Object;)[Ljava/lang/Integer;",
            "method_body": "public Integer[] getSuspiciouslyNotMatchingArgsIndexes(List<Matcher> matchers, Object[] arguments) {\nif (matchers.size() != arguments.length) {\nreturn new Integer[0];\n}\n\nList<Integer> suspicious = new LinkedList<Integer>();\nint i = 0;\nfor (Matcher m : matchers) {\nif (m instanceof ContainsExtraTypeInformation\n&& !safelyMatches(m, arguments[i])\n&& toStringEquals(m, arguments[i])\n&& !((ContainsExtraTypeInformation) m).typeMatches(arguments[i])) {\nsuspicious.add(i);\n}\ni++;\n}\nreturn suspicious.toArray(new Integer[0]);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.mockito.internal.matchers.Equals:describeTo(Lorg/hamcrest/Description;)V",
            "method_body": "public void describeTo(Description description) {\ndescription.appendText(describe(wanted));\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.mockito.internal.matchers.Equals:describe(Ljava/lang/Object;)Ljava/lang/String;",
            "method_body": "public String describe(Object object) {\nString text = quoting();\nif (object == null) {\ntext+=\"null\";\n} else {\ntext+=object.toString();\n}\ntext+= quoting();\nreturn text;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.mockito.internal.matchers.Equals:matches(Ljava/lang/Object;)Z",
            "method_body": "public boolean matches(Object actual) {\nif (this.wanted == null) {\nreturn actual == null;\n}\nreturn wanted.equals(actual);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.mockito.internal.matchers.Equals:<init>(Ljava/lang/Object;)V",
            "method_body": "public Equals(Object wanted) {\nthis.wanted = wanted;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:threadSafely()Lorg/mockito/internal/progress/MockingProgress;",
            "method_body": "static MockingProgress threadSafely() {\nif (mockingProgress.get() == null) {\nmockingProgress.set(new MockingProgressImpl());\n}\nreturn mockingProgress.get();\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:validateState()V",
            "method_body": "public void validateState() {\nthreadSafely().validateState();\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:validateState()V",
            "method_body": "public void validateState() {\n//State is cool when GlobalConfiguration is already loaded\n//this cannot really be tested functionally because I cannot dynamically mess up org.mockito.configuration.MockitoConfiguration class\nGlobalConfiguration.validate();\n\nif (verificationMode != null) {\nLocation location = verificationMode.getLocation();\nverificationMode = null;\nreporter.unfinishedVerificationException(location);\n}\n\nif (stubbingInProgress != null) {\nLocation temp = stubbingInProgress;\nstubbingInProgress = null;\nreporter.unfinishedStubbing(temp);\n}\n\ngetArgumentMatcherStorage().validateState();\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:getArgumentMatcherStorage()Lorg/mockito/internal/progress/ArgumentMatcherStorage;",
            "method_body": "public ArgumentMatcherStorage getArgumentMatcherStorage() {\nreturn argumentMatcherStorage;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl:validateState()V",
            "method_body": "public void validateState() {\nif (!matcherStack.isEmpty()) {\nLocalizedMatcher lastMatcher = matcherStack.lastElement();\nmatcherStack.clear();\nnew Reporter().misplacedArgumentMatcher(lastMatcher.getLocation());\n}\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:<init>()V",
            "method_body": "public GlobalConfiguration() {\n//Configuration should be loaded only once but I cannot really test it\nif (globalConfiguration.get() == null) {\nglobalConfiguration.set(createConfig());\n}\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:getIt()Lorg/mockito/configuration/IMockitoConfiguration;",
            "method_body": "IMockitoConfiguration getIt() {\nreturn globalConfiguration.get();\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:validate()V",
            "method_body": "public static void validate() {\nnew GlobalConfiguration();\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:getAnnotationEngine()Lorg/mockito/configuration/AnnotationEngine;",
            "method_body": "public AnnotationEngine getAnnotationEngine() {\nreturn globalConfiguration.get().getAnnotationEngine();\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.mockito.MockitoAnnotations:initMocks(Ljava/lang/Object;)V",
            "method_body": "public static void initMocks(Object testClass) {\nif (testClass == null) {\nthrow new MockitoException(\"testClass cannot be null. For info how to use @Mock annotations see examples in javadoc for MockitoAnnotations class\");\n}\n\nClass<?> clazz = testClass.getClass();\nwhile (clazz != Object.class) {\nscan(testClass, clazz);\nclazz = clazz.getSuperclass();\n}\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.mockito.MockitoAnnotations:scan(Ljava/lang/Object;Ljava/lang/Class;)V",
            "method_body": "private static void scan(Object testClass, Class<?> clazz) {\nAnnotationEngine annotationEngine = new GlobalConfiguration().getAnnotationEngine();\nField[] fields = clazz.getDeclaredFields();\nfor (Field field : fields) {\nfor(Annotation annotation : field.getAnnotations()) {\nObject mock = annotationEngine.createMockFor(annotation, field);\nif (mock != null) {\nboolean wasAccessible = field.isAccessible();\nfield.setAccessible(true);\ntry {\nfield.set(testClass, mock);\n} catch (IllegalAccessException e) {\nthrow new MockitoException(\"Problems initiating mocks annotated with \" + annotation, e);\n} finally {\nfield.setAccessible(wasAccessible);\n}\n}\n}\n}\n}",
            "method_id": 17
        }
    ]
}
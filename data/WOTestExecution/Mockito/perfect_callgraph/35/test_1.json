{
    "bug_id": 35,
    "test_id": 1,
    "test_name": "org.mockitousage.bugs.NPEWithCertainMatchersTest.shouldNotThrowNPEWhenIntPassed",
    "test_body": "public void shouldNotThrowNPEWhenIntPassed() {\nmock.intArgumentMethod(100);\nverify(mock).intArgumentMethod(isA(Integer.class));\n}\n",
    "stack_trace": "java.lang.NullPointerException\nat org.mockitousage.bugs.NPEWithCertainMatchersTest.shouldNotThrowNPEWhenIntPassed(NPEWithCertainMatchersTest.java:38)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.Matchers:isA(Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "public static <T> T isA(Class<T> clazz) {\nreturn reportMatcher(new InstanceOf(clazz)).<T>returnNull();\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.mockito.Mockito:verify(Ljava/lang/Object;)Ljava/lang/Object;",
            "method_body": "public static <T> T verify(T mock) {\nreturn MOCKITO_CORE.verify(mock, times(1));\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.mockito.Mockito:times(I)Lorg/mockito/internal/verification/api/VerificationMode;",
            "method_body": "public static VerificationMode times(int wantedNumberOfInvocations) {\nreturn VerificationModeFactory.times(wantedNumberOfInvocations);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.mockito.internal.verification.VerificationModeFactory:times(I)Lorg/mockito/internal/verification/Times;",
            "method_body": "public static Times times(int wantedNumberOfInvocations) {\nreturn new Times(wantedNumberOfInvocations);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.mockito.internal.verification.Times:<init>(I)V",
            "method_body": "public Times(int wantedNumberOfInvocations) {\nif (wantedNumberOfInvocations < 0) {\nthrow new MockitoException(\"Negative value is not allowed here\");\n}\nthis.wantedCount = wantedNumberOfInvocations;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.mockito.internal.util.MockUtil:isMock(Ljava/lang/Object;)Z",
            "method_body": "public boolean isMock(Object mock) {\nreturn mock != null && isMockitoMock(mock);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.mockito.internal.util.MockUtil:isMockitoMock(Ljava/lang/Object;)Z",
            "method_body": "private <T> boolean isMockitoMock(T mock) {\nreturn Enhancer.isEnhanced(mock.getClass()) && getInterceptor(mock) != null;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.mockito.internal.util.MockUtil:getInterceptor(Ljava/lang/Object;)Lorg/mockito/internal/creation/MethodInterceptorFilter;",
            "method_body": "private <T> MethodInterceptorFilter getInterceptor(T mock) {\nFactory factory = (Factory) mock;\nCallback callback = factory.getCallback(0);\nif (callback instanceof MethodInterceptorFilter) {\nreturn (MethodInterceptorFilter) callback;\n}\nreturn null;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.mockito.internal.invocation.realmethod.CGLIBProxyRealMethod:<init>(Lorg/mockito/internal/creation/MockitoMethodProxy;)V",
            "method_body": "public CGLIBProxyRealMethod(MockitoMethodProxy methodProxy) {\nthis.methodProxy = methodProxy;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.mockito.internal.invocation.Invocation:isVoid()Z",
            "method_body": "public boolean isVoid() {\nreturn this.method.getReturnType() == Void.TYPE;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.mockito.internal.invocation.Invocation:getMethod()Ljava/lang/reflect/Method;",
            "method_body": "public Method getMethod() {\nreturn method.getJavaMethod();\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.mockito.internal.MockitoCore:mock(Ljava/lang/Class;Lorg/mockito/MockSettings;)Ljava/lang/Object;",
            "method_body": "public <T> T mock(Class<T> classToMock, MockSettings mockSettings) {\nmockingProgress.validateState();\nmockingProgress.resetOngoingStubbing();\nreturn mockUtil.createMock(classToMock, mockingProgress, (MockSettingsImpl) mockSettings);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.mockito.internal.util.MockUtil:createMock(Ljava/lang/Class;Lorg/mockito/internal/progress/MockingProgress;Lorg/mockito/internal/creation/MockSettingsImpl;)Ljava/lang/Object;",
            "method_body": "public <T> T createMock(Class<T> classToMock, MockingProgress progress, MockSettingsImpl settings) {\ncreationValidator.validateType(classToMock);\ncreationValidator.validateExtraInterfaces(classToMock, settings.getExtraInterfaces());\ncreationValidator.validateMockedType(classToMock, settings.getSpiedInstance());\n\nMockName mockName = new MockName(settings.getMockName(), classToMock);\nMockHandler<T> mockHandler = new MockHandler<T>(mockName, progress, new MatchersBinder(), settings);\nMethodInterceptorFilter filter = new MethodInterceptorFilter(mockHandler, settings);\nClass<?>[] interfaces = settings.getExtraInterfaces();\nClass<?>[] ancillaryTypes = interfaces == null ? new Class<?>[0] : interfaces;\nObject spiedInstance = settings.getSpiedInstance();\n\nT mock = ClassImposterizer.INSTANCE.imposterise(filter, classToMock, ancillaryTypes);\n\nif (spiedInstance != null) {\nnew LenientCopyTool().copyToMock(spiedInstance, mock);\n}\n\nreturn mock;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.mockito.internal.util.CreationValidator:validateMockedType(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "public void validateMockedType(Class classToMock, Object spiedInstance) {\nif (classToMock == null || spiedInstance == null) {\nreturn;\n}\nif (!classToMock.equals(spiedInstance.getClass())) {\nnew Reporter().mockedTypeIsInconsistentWithSpiedInstanceType(classToMock, spiedInstance);\n}\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues:returnValueFor(Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "Object returnValueFor(Class<?> type) {\nif (type.isPrimitive()) {\nreturn primitiveOf(type);\n} else if (Primitives.isPrimitiveWrapper(type)) {\nreturn Primitives.primitiveWrapperOf(type);\n//new instances are used instead of Collections.emptyList(), etc.\n//to avoid UnsupportedOperationException if code under test modifies returned collection\n} else if (type == Collection.class) {\nreturn new LinkedList<Object>();\n} else if (type == Set.class) {\nreturn new HashSet<Object>();\n} else if (type == HashSet.class) {\nreturn new HashSet<Object>();\n} else if (type == SortedSet.class) {\nreturn new TreeSet<Object>();\n} else if (type == TreeSet.class) {\nreturn new TreeSet<Object>();\n} else if (type == LinkedHashSet.class) {\nreturn new LinkedHashSet<Object>();\n} else if (type == List.class) {\nreturn new LinkedList<Object>();\n} else if (type == LinkedList.class) {\nreturn new LinkedList<Object>();\n} else if (type == ArrayList.class) {\nreturn new ArrayList<Object>();\n} else if (type == Map.class) {\nreturn new HashMap<Object, Object>();\n} else if (type == HashMap.class) {\nreturn new HashMap<Object, Object>();\n} else if (type == SortedMap.class) {\nreturn new TreeMap<Object, Object>();\n} else if (type == TreeMap.class) {\nreturn new TreeMap<Object, Object>();\n} else if (type == LinkedHashMap.class) {\nreturn new LinkedHashMap<Object, Object>();\n}\n//Let's not care about the rest of collections.\nreturn null;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:resetOngoingStubbing()V",
            "method_body": "public void resetOngoingStubbing() {\nthreadSafely().resetOngoingStubbing();\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.mockito.Mockito:mock(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Object;",
            "method_body": "public static <T> T mock(Class<T> classToMock, String name) {\nreturn mock(classToMock, withSettings()\n.name(name)\n.defaultAnswer(RETURNS_DEFAULTS));\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.SearchingClassLoader:combineLoadersOf(Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/ClassLoader;",
            "method_body": "private static ClassLoader combineLoadersOf(Class<?> first, Class<?>... others) {\nList<ClassLoader> loaders = new ArrayList<ClassLoader>();\n\naddIfNewElement(loaders, first.getClassLoader());\nfor (Class<?> c : others) {\naddIfNewElement(loaders, c.getClassLoader());\n}\n\n// To support Eclipse Plug-in tests.\n// In an Eclipse plug-in, jMock itself will not be on the system class loader\n// but in the class loader of the plug-in.\n//\n// Note: I've been unable to reproduce the error in jMock's test suite.\naddIfNewElement(loaders, SearchingClassLoader.class.getClassLoader());\n\n// To support the Maven Surefire plugin.\n// Note: I've been unable to reproduce the error in jMock's test suite.\naddIfNewElement(loaders, currentThread().getContextClassLoader());\n\n//Had to comment that out because it didn't work with in-container Spring tests\n//addIfNewElement(loaders, ClassLoader.getSystemClassLoader());\n\nreturn combine(loaders);\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:validateState()V",
            "method_body": "public void validateState() {\nthreadSafely().validateState();\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.mockito.internal.invocation.MatchersBinder:validateMatchers(Lorg/mockito/internal/invocation/Invocation;Ljava/util/List;)V",
            "method_body": "private void validateMatchers(Invocation invocation, List<Matcher> matchers) {\nif (!matchers.isEmpty()) {\nint recordedMatchersSize = matchers.size();\nint expectedMatchersSize = invocation.getArgumentsCount();\nif (expectedMatchersSize != recordedMatchersSize) {\nnew Reporter().invalidUseOfMatchers(expectedMatchersSize, recordedMatchersSize);\n}\n}\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues:primitiveOf(Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "private Object primitiveOf(Class<?> type) {\nif (type == Boolean.TYPE) {\nreturn false;\n} else if (type == Character.TYPE) {\nreturn (char) 0;\n} else {\nreturn 0;\n}\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.mockito.internal.invocation.InvocationMatcher:getInvocation()Lorg/mockito/internal/invocation/Invocation;",
            "method_body": "public Invocation getInvocation() {\nreturn this.invocation;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.mockito.internal.debugging.Localized:<init>(Ljava/lang/Object;)V",
            "method_body": "public Localized(T object) {\nthis.object = object;\nlocation = new Location();\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.mockito.internal.debugging.Location:<init>()V",
            "method_body": "public Location() {\nthis(new StackTraceFilter());\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMethod:getJavaMethod()Ljava/lang/reflect/Method;",
            "method_body": "public Method getJavaMethod() {\nreturn method;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:pullVerificationMode()Lorg/mockito/internal/verification/api/VerificationMode;",
            "method_body": "public VerificationMode pullVerificationMode() {\nreturn threadSafely().pullVerificationMode();\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:imposterise(Lorg/mockito/cglib/proxy/MethodInterceptor;Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "public <T> T imposterise(final MethodInterceptor interceptor, Class<T> mockedType, Class<?>... ancillaryTypes) {\ntry {\nsetConstructorsAccessible(mockedType, true);\nClass<?> proxyClass = createProxyClass(mockedType, ancillaryTypes);\nreturn mockedType.cast(createProxy(proxyClass, interceptor));\n} finally {\nsetConstructorsAccessible(mockedType, false);\n}\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.mockito.internal.exceptions.base.StackTraceFilter:isBad(Ljava/lang/StackTraceElement;)Z",
            "method_body": "public boolean isBad(StackTraceElement e) {\nboolean fromMockObject = e.getClassName().contains(\"$$EnhancerByMockitoWithCGLIB$$\");\nboolean fromOrgMockito = e.getClassName().startsWith(\"org.mockito.\");\nboolean isRunner = e.getClassName().startsWith(\"org.mockito.runners.\");\nboolean isInternalRunner = e.getClassName().startsWith(\"org.mockito.internal.runners.\");\nreturn (fromMockObject || fromOrgMockito) && !isRunner && !isInternalRunner;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.mockito.internal.util.CreationValidator:validateExtraInterfaces(Ljava/lang/Class;[Ljava/lang/Class;)V",
            "method_body": "public void validateExtraInterfaces(Class classToMock, Class ... extraInterfaces) {\nif (extraInterfaces == null) {\nreturn;\n}\n\nfor (Class i : extraInterfaces) {\nif (classToMock == i) {\nnew Reporter().extraInterfacesCannotContainMockedType(classToMock);\n}\n}\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:getMockName()Ljava/lang/String;",
            "method_body": "public String getMockName() {\nreturn name;\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:isSerializable()Z",
            "method_body": "public boolean isSerializable() {\nreturn isSerializable;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.mockito.internal.exceptions.base.StackTraceFilter:filter([Ljava/lang/StackTraceElement;Z)[Ljava/lang/StackTraceElement;",
            "method_body": "public StackTraceElement[] filter(StackTraceElement[] target, boolean keepTop) {\n//TODO: after 1.8 profile\nList<StackTraceElement> unfilteredStackTrace = Arrays.asList(target);\n\nint lastBad = -1;\nint firstBad = -1;\nfor (int i = 0; i < unfilteredStackTrace.size(); i++) {\nif (!this.isBad(unfilteredStackTrace.get(i))) {\ncontinue;\n}\nlastBad = i;\nif (firstBad == -1) {\nfirstBad = i;\n}\n}\n\nList<StackTraceElement> top;\nif (keepTop && firstBad != -1) {\ntop = unfilteredStackTrace.subList(0, firstBad);\n} else {\ntop = new LinkedList<StackTraceElement>();\n}\n\nList<StackTraceElement> bottom = unfilteredStackTrace.subList(lastBad + 1, unfilteredStackTrace.size());\nList<StackTraceElement> filtered = new ArrayList<StackTraceElement>(top);\nfiltered.addAll(bottom);\nreturn filtered.toArray(new StackTraceElement[]{});\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.mockito.internal.progress.HandyReturnValues:returnNull()Ljava/lang/Object;",
            "method_body": "public <T> T returnNull() {\nreturn null;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.mockito.internal.matchers.InstanceOf:<init>(Ljava/lang/Class;)V",
            "method_body": "public InstanceOf(Class<?> clazz) {\nthis.clazz = clazz;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.SearchingClassLoader:combineLoadersOf([Ljava/lang/Class;)Ljava/lang/ClassLoader;",
            "method_body": "public static ClassLoader combineLoadersOf(Class<?>... classes) {\nreturn combineLoadersOf(classes[0], classes);\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.mockito.internal.progress.SequenceNumber:next()I",
            "method_body": "public static synchronized int next() {\nreturn sequenceNumber++;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.mockito.internal.util.ObjectMethodsGuru:isEqualsMethod(Ljava/lang/reflect/Method;)Z",
            "method_body": "public boolean isEqualsMethod(Method method) {\nreturn method.getName().equals(\"equals\") && method.getParameterTypes().length == 1 && method.getParameterTypes()[0] == Object.class;\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:pullVerificationMode()Lorg/mockito/internal/verification/api/VerificationMode;",
            "method_body": "public VerificationMode pullVerificationMode() {\nif (verificationMode == null) {\nreturn null;\n}\n\nVerificationMode temp = verificationMode.getObject();\nverificationMode = null;\nreturn temp;\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:defaultAnswer(Lorg/mockito/stubbing/Answer;)Lorg/mockito/MockSettings;",
            "method_body": "public MockSettings defaultAnswer(Answer defaultAnswer) {\nthis.defaultAnswer = defaultAnswer;\nreturn this;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.mockito.internal.invocation.realmethod.FilteredCGLIBProxyRealMethod:<init>(Lorg/mockito/internal/invocation/realmethod/RealMethod;)V",
            "method_body": "public FilteredCGLIBProxyRealMethod(RealMethod realMethod) {\nthis.realMethod = realMethod;\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.mockito.internal.configuration.DefaultAnnotationEngine:createMockFor(Ljava/lang/annotation/Annotation;Ljava/lang/reflect/Field;)Ljava/lang/Object;",
            "method_body": "public Object createMockFor(Annotation annotation, Field field) {\nif (annotation instanceof Mock || annotation instanceof org.mockito.MockitoAnnotations.Mock) {\nreturn Mockito.mock(field.getType(), field.getName());\n} else {\nreturn null;\n}\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:reset()V",
            "method_body": "public void reset() {\nthreadSafely().reset();\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.mockito.internal.creation.AbstractMockitoMethodProxy:reflectOnCreateInfo(Lorg/mockito/cglib/proxy/MethodProxy;)Ljava/lang/reflect/Field;",
            "method_body": "private Field reflectOnCreateInfo(MethodProxy methodProxy) throws SecurityException, NoSuchFieldException {\n\nClass cglibMethodProxyClass = methodProxy.getClass();\n// in case methodProxy was extended by user, let's traverse the object\n// graph to find the cglib methodProxy\n// with all the fields we would like to change\nwhile (cglibMethodProxyClass != MethodProxy.class) {\ncglibMethodProxyClass = methodProxy.getClass().getSuperclass();\n}\nreturn cglibMethodProxyClass.getDeclaredField(\"createInfo\");\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.mockito.internal.matchers.Equals:<init>(Ljava/lang/Object;)V",
            "method_body": "public Equals(Object wanted) {\nthis.wanted = wanted;\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl:reset()V",
            "method_body": "public void reset() {\nmatcherStack.clear();\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.mockito.internal.invocation.realmethod.FilteredCGLIBProxyRealMethod:<init>(Lorg/mockito/internal/creation/MockitoMethodProxy;)V",
            "method_body": "public FilteredCGLIBProxyRealMethod(MockitoMethodProxy methodProxy) {\nthis(new CGLIBProxyRealMethod(methodProxy));\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.mockito.internal.util.ObjectMethodsGuru:isToString(Ljava/lang/reflect/Method;)Z",
            "method_body": "public boolean isToString(Method method) {\nreturn isToString(new DelegatingMethod(method));\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.mockito.internal.stubbing.MockitoStubber:findAnswerFor(Lorg/mockito/internal/invocation/Invocation;)Lorg/mockito/internal/stubbing/StubbedInvocationMatcher;",
            "method_body": "public StubbedInvocationMatcher findAnswerFor(Invocation invocation) {\nfor (StubbedInvocationMatcher s : stubbed) {\nif (s.matches(invocation)) {\nreturn s;\n}\n}\n\nreturn null;\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.mockito.configuration.DefaultMockitoConfiguration:getDefaultAnswer()Lorg/mockito/stubbing/Answer;",
            "method_body": "public Answer<Object> getDefaultAnswer() {\nreturn new ReturnsEmptyValues();\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:name(Ljava/lang/String;)Lorg/mockito/MockSettings;",
            "method_body": "public MockSettings name(String name) {\nthis.name = name;\nreturn this;\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.mockito.internal.util.ObjectMethodsGuru:isHashCodeMethod(Ljava/lang/reflect/Method;)Z",
            "method_body": "public boolean isHashCodeMethod(Method method) {\nreturn method.getName().equals(\"hashCode\") && method.getParameterTypes().length == 0;\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMockitoMethodProxy:<init>(Lorg/mockito/cglib/proxy/MethodProxy;)V",
            "method_body": "public DelegatingMockitoMethodProxy(MethodProxy methodProxy) {\nthis.methodProxy = methodProxy;\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:getIt()Lorg/mockito/configuration/IMockitoConfiguration;",
            "method_body": "IMockitoConfiguration getIt() {\nreturn globalConfiguration.get();\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer$3:<init>(Lorg/mockito/internal/creation/jmock/ClassImposterizer;)V",
            "method_body": "private <T> Class<?> createProxyClass(Class<?> mockedType, Class<?>...interfaces) {\nif (mockedType == Object.class) {\nEnhancer enhancer = new Enhancer() {\nenhancer.setClassLoader(SearchingClassLoader.combineLoadersOf(mockedType));\nenhancer.setUseFactory(true);\nif (mockedType.isInterface()) {\nenhancer.setSuperclass(Object.class);\nenhancer.setInterfaces(prepend(mockedType, interfaces));\nenhancer.setCallbackTypes(new Class[]{MethodInterceptor.class, NoOp.class});\nenhancer.setCallbackFilter(IGNORE_BRIDGE_METHODS);\nif (mockedType.getSigners() != null) {\nenhancer.setNamingPolicy(MockitoNamingPolicy.INSTANCE);\nreturn enhancer.createClass();\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.mockito.internal.util.ObjectMethodsGuru:isToString(Lorg/mockito/internal/invocation/MockitoMethod;)Z",
            "method_body": "public boolean isToString(MockitoMethod method) {\nreturn method.getReturnType() == String.class && method.getParameterTypes().length == 0\n&& method.getName().equals(\"toString\");\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl:validateState()V",
            "method_body": "public void validateState() {\nif (!matcherStack.isEmpty()) {\nLocalizedMatcher lastMatcher = matcherStack.lastElement();\nmatcherStack.clear();\nnew Reporter().misplacedArgumentMatcher(lastMatcher.getLocation());\n}\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.mockito.internal.stubbing.MockitoStubber:setInvocationForPotentialStubbing(Lorg/mockito/internal/invocation/InvocationMatcher;)V",
            "method_body": "public void setInvocationForPotentialStubbing(InvocationMatcher invocation) {\nthis.invocationForStubbing = invocation;\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.mockito.internal.debugging.Location:<init>(Lorg/mockito/internal/exceptions/base/StackTraceFilter;)V",
            "method_body": "public Location(StackTraceFilter filter) {\nStackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();\nStackTraceElement[] filtered = filter.filter(stackTrace, false);\nif (filtered.length == 0) {\nwhere = \"-> at <<unknown line>>\";\n} else {\nwhere = \"-> at \" + filtered[0].toString();\n}\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.mockito.internal.creation.MethodInterceptorFilter:intercept(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;Lorg/mockito/cglib/proxy/MethodProxy;)Ljava/lang/Object;",
            "method_body": "public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy)\nthrows Throwable {\nif (objectMethodsGuru.isEqualsMethod(method)) {\nreturn proxy == args[0];\n} else if (objectMethodsGuru.isHashCodeMethod(method)) {\nreturn hashCodeForMock(proxy);\n}\n\nMockitoMethodProxy mockitoMethodProxy = createMockitoMethodProxy(methodProxy);\ncglibHacker.setMockitoNamingPolicy(mockitoMethodProxy);\n\nMockitoMethod mockitoMethod = createMockitoMethod(method);\n\nFilteredCGLIBProxyRealMethod realMethod = new FilteredCGLIBProxyRealMethod(mockitoMethodProxy);\nInvocation invocation = new Invocation(proxy, mockitoMethod, args, SequenceNumber.next(), realMethod);\nreturn mockHandler.handle(invocation);\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.mockito.Matchers:reportMatcher(Lorg/hamcrest/Matcher;)Lorg/mockito/internal/progress/HandyReturnValues;",
            "method_body": "private static HandyReturnValues reportMatcher(Matcher<?> matcher) {\nreturn mockingProgress.getArgumentMatcherStorage().reportMatcher(matcher);\n}",
            "method_id": 59
        },
        {
            "method_signature": "org.mockito.internal.invocation.Invocation:expandVarArgs(Z[Ljava/lang/Object;)[Ljava/lang/Object;",
            "method_body": "private static Object[] expandVarArgs(final boolean isVarArgs, final Object[] args) {\nif (!isVarArgs || args[args.length - 1] != null && !args[args.length - 1].getClass().isArray()) {\nreturn args == null ? new Object[0] : args;\n}\n\nfinal int nonVarArgsCount = args.length - 1;\nObject[] varArgs;\nif (args[nonVarArgsCount] == null) {\n// in case someone deliberately passed null varArg array\nvarArgs = new Object[] { null };\n} else {\nvarArgs = ArrayEquals.createObjectArray(args[nonVarArgsCount]);\n}\nfinal int varArgsCount = varArgs.length;\nObject[] newArgs = new Object[nonVarArgsCount + varArgsCount];\nSystem.arraycopy(args, 0, newArgs, 0, nonVarArgsCount);\nSystem.arraycopy(varArgs, 0, newArgs, nonVarArgsCount, varArgsCount);\nreturn newArgs;\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.mockito.internal.stubbing.MockitoStubber:hasAnswersForStubbing()Z",
            "method_body": "public boolean hasAnswersForStubbing() {\nreturn !answersForStubbing.isEmpty();\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:reportOngoingStubbing(Lorg/mockito/internal/progress/IOngoingStubbing;)V",
            "method_body": "public void reportOngoingStubbing(IOngoingStubbing iOngoingStubbing) {\nthis.iOngoingStubbing = iOngoingStubbing;\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.mockito.MockitoAnnotations:initMocks(Ljava/lang/Object;)V",
            "method_body": "public static void initMocks(Object testClass) {\nif (testClass == null) {\nthrow new MockitoException(\"testClass cannot be null. For info how to use @Mock annotations see examples in javadoc for MockitoAnnotations class\");\n}\n\nClass<?> clazz = testClass.getClass();\nwhile (clazz != Object.class) {\nscan(testClass, clazz);\nclazz = clazz.getSuperclass();\n}\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMethod:getReturnType()Ljava/lang/Class;",
            "method_body": "public Class<?> getReturnType() {\nreturn method.getReturnType();\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.mockito.internal.invocation.Invocation:argumentsToMatchers()Ljava/util/List;",
            "method_body": "protected List<Matcher> argumentsToMatchers() {\nList<Matcher> matchers = new ArrayList<Matcher>(arguments.length);\nfor (Object arg : arguments) {\nif (arg != null && arg.getClass().isArray()) {\nmatchers.add(new ArrayEquals(arg));\n} else {\nmatchers.add(new Equals(arg));\n}\n}\nreturn matchers;\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:reset()V",
            "method_body": "public void reset() {\nstubbingInProgress = null;\nverificationMode = null;\ngetArgumentMatcherStorage().reset();\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:resetOngoingStubbing()V",
            "method_body": "public void resetOngoingStubbing() {\niOngoingStubbing = null;\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.mockito.internal.creation.AbstractMockitoMethodProxy:setNamingPolicyField(Lorg/mockito/internal/creation/cglib/MockitoNamingPolicy;)V",
            "method_body": "public void setNamingPolicyField(MockitoNamingPolicy namingPolicy) {\ntry {\nMethodProxy methodProxy = getMethodProxy();\nField createInfoField = reflectOnCreateInfo(methodProxy);\ncreateInfoField.setAccessible(true);\nObject createInfo = createInfoField.get(methodProxy);\nField namingPolicyField = createInfo.getClass().getDeclaredField(\"namingPolicy\");\nnamingPolicyField.setAccessible(true);\nif (namingPolicyField.get(createInfo) == null) {\nnamingPolicyField.set(createInfo, MockitoNamingPolicy.INSTANCE);\n}\n} catch (Exception e) {\nthrow new RuntimeException(\n\"Unable to set MockitoNamingPolicy on cglib generator which creates FastClasses\", e);\n}\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.mockito.internal.stubbing.defaultanswers.GloballyConfiguredAnswer:answer(Lorg/mockito/invocation/InvocationOnMock;)Ljava/lang/Object;",
            "method_body": "public Object answer(InvocationOnMock invocation) throws Throwable {\nreturn new GlobalConfiguration().getDefaultAnswer().answer(invocation);\n}",
            "method_id": 69
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMockitoMethodProxy:getMethodProxy()Lorg/mockito/cglib/proxy/MethodProxy;",
            "method_body": "protected MethodProxy getMethodProxy() {\nreturn methodProxy;\n}",
            "method_id": 70
        },
        {
            "method_signature": "org.mockito.internal.invocation.MatchersBinder:bindMatchers(Lorg/mockito/internal/progress/ArgumentMatcherStorage;Lorg/mockito/internal/invocation/Invocation;)Lorg/mockito/internal/invocation/InvocationMatcher;",
            "method_body": "public InvocationMatcher bindMatchers(ArgumentMatcherStorage argumentMatcherStorage, Invocation invocation) {\nList<Matcher> lastMatchers = argumentMatcherStorage.pullMatchers();\nvalidateMatchers(invocation, lastMatchers);\n\nInvocationMatcher invocationWithMatchers = new InvocationMatcher(invocation, lastMatchers);\nreturn invocationWithMatchers;\n}",
            "method_id": 71
        },
        {
            "method_signature": "org.mockito.Mockito:mock(Ljava/lang/Class;Lorg/mockito/MockSettings;)Ljava/lang/Object;",
            "method_body": "public static <T> T mock(Class<T> classToMock, MockSettings mockSettings) {\nreturn MOCKITO_CORE.mock(classToMock, mockSettings);\n}",
            "method_id": 72
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:getArgumentMatcherStorage()Lorg/mockito/internal/progress/ArgumentMatcherStorage;",
            "method_body": "public ArgumentMatcherStorage getArgumentMatcherStorage() {\nreturn threadSafely().getArgumentMatcherStorage();\n}",
            "method_id": 73
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:prepend(Ljava/lang/Class;[Ljava/lang/Class;)[Ljava/lang/Class;",
            "method_body": "private Class<?>[] prepend(Class<?> first, Class<?>... rest) {\nClass<?>[] all = new Class<?>[rest.length+1];\nall[0] = first;\nSystem.arraycopy(rest, 0, all, 1, rest.length);\nreturn all;\n}",
            "method_id": 74
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:setConstructorsAccessible(Ljava/lang/Class;Z)V",
            "method_body": "private void setConstructorsAccessible(Class<?> mockedType, boolean accessible) {\nfor (Constructor<?> constructor : mockedType.getDeclaredConstructors()) {\nconstructor.setAccessible(accessible);\n}\n}",
            "method_id": 75
        },
        {
            "method_signature": "org.mockito.MockitoAnnotations:scan(Ljava/lang/Object;Ljava/lang/Class;)V",
            "method_body": "private static void scan(Object testClass, Class<?> clazz) {\nAnnotationEngine annotationEngine = new GlobalConfiguration().getAnnotationEngine();\nField[] fields = clazz.getDeclaredFields();\nfor (Field field : fields) {\nfor(Annotation annotation : field.getAnnotations()) {\nObject mock = annotationEngine.createMockFor(annotation, field);\nif (mock != null) {\nboolean wasAccessible = field.isAccessible();\nfield.setAccessible(true);\ntry {\nfield.set(testClass, mock);\n} catch (IllegalAccessException e) {\nthrow new MockitoException(\"Problems initiating mocks annotated with \" + annotation, e);\n} finally {\nfield.setAccessible(wasAccessible);\n}\n}\n}\n}\n}",
            "method_id": 76
        },
        {
            "method_signature": "org.mockito.internal.verification.RegisteredInvocations:add(Lorg/mockito/internal/invocation/Invocation;)V",
            "method_body": "public void add(Invocation invocation) {\ninvocations.add(invocation);\n}",
            "method_id": 77
        },
        {
            "method_signature": "org.mockito.internal.util.MockName:<init>(Ljava/lang/String;Ljava/lang/Class;)V",
            "method_body": "public MockName(String mockName, Class classToMock) {\nif (mockName == null) {\nthis.mockName = toInstanceName(classToMock);\nthis.surrogate = true;\n} else {\nthis.mockName = mockName;\n}\n}",
            "method_id": 78
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:reportOngoingStubbing(Lorg/mockito/internal/progress/IOngoingStubbing;)V",
            "method_body": "public void reportOngoingStubbing(IOngoingStubbing iOngoingStubbing) {\nthreadSafely().reportOngoingStubbing(iOngoingStubbing);\n}",
            "method_id": 79
        },
        {
            "method_signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl:reportMatcher(Lorg/hamcrest/Matcher;)Lorg/mockito/internal/progress/HandyReturnValues;",
            "method_body": "public HandyReturnValues reportMatcher(Matcher matcher) {\nmatcherStack.push(new LocalizedMatcher(matcher));\nreturn new HandyReturnValues();\n}",
            "method_id": 80
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:createProxy(Ljava/lang/Class;Lorg/mockito/cglib/proxy/MethodInterceptor;)Ljava/lang/Object;",
            "method_body": "private Object createProxy(Class<?> proxyClass, final MethodInterceptor interceptor) {\nFactory proxy = (Factory) objenesis.newInstance(proxyClass);\nproxy.setCallbacks(new Callback[] {interceptor, SerializableNoOp.SERIALIZABLE_INSTANCE });\nreturn proxy;\n}",
            "method_id": 81
        },
        {
            "method_signature": "org.mockito.internal.invocation.Invocation:isToString(Lorg/mockito/invocation/InvocationOnMock;)Z",
            "method_body": "public static boolean isToString(InvocationOnMock invocation) {\nreturn new ObjectMethodsGuru().isToString(invocation.getMethod());\n}",
            "method_id": 82
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMethod:<init>(Ljava/lang/reflect/Method;)V",
            "method_body": "public DelegatingMethod(Method method) {\nassert method != null : \"Method cannot be null\";\nthis.method = method;\n}",
            "method_id": 83
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:verificationStarted(Lorg/mockito/internal/verification/api/VerificationMode;)V",
            "method_body": "public void verificationStarted(VerificationMode verify) {\nvalidateState();\nresetOngoingStubbing();\nverificationMode = new Localized(verify);\n}",
            "method_id": 84
        },
        {
            "method_signature": "org.mockito.internal.invocation.InvocationMatcher:<init>(Lorg/mockito/internal/invocation/Invocation;Ljava/util/List;)V",
            "method_body": "public InvocationMatcher(Invocation invocation, List<Matcher> matchers) {\nthis.invocation = invocation;\nif (matchers.isEmpty()) {\nthis.matchers = invocation.argumentsToMatchers();\n} else {\nthis.matchers = matchers;\n}\n}",
            "method_id": 85
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:createProxyClass(Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/Class;",
            "method_body": "private <T> Class<?> createProxyClass(Class<?> mockedType, Class<?>...interfaces) {\nif (mockedType == Object.class) {\nmockedType = ClassWithSuperclassToWorkAroundCglibBug.class;\n}\n\nEnhancer enhancer = new Enhancer() {\n@Override\n@SuppressWarnings(\"unchecked\")\nprotected void filterConstructors(Class sc, List constructors) {\n// Don't filter\n}\n};\nenhancer.setClassLoader(SearchingClassLoader.combineLoadersOf(mockedType));\nenhancer.setUseFactory(true);\nif (mockedType.isInterface()) {\nenhancer.setSuperclass(Object.class);\nenhancer.setInterfaces(prepend(mockedType, interfaces));\n} else {\nenhancer.setSuperclass(mockedType);\nenhancer.setInterfaces(interfaces);\n}\nenhancer.setCallbackTypes(new Class[]{MethodInterceptor.class, NoOp.class});\nenhancer.setCallbackFilter(IGNORE_BRIDGE_METHODS);\nif (mockedType.getSigners() != null) {\nenhancer.setNamingPolicy(NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES);\n} else {\nenhancer.setNamingPolicy(MockitoNamingPolicy.INSTANCE);\n}\n\ntry {\nreturn enhancer.createClass();\n} catch (CodeGenerationException e) {\nif (Modifier.isPrivate(mockedType.getModifiers())) {\nthrow new MockitoException(\"\\n\"\n+ \"Mockito cannot mock this class: \" + mockedType\n+ \".\\n\"\n+ \"Most likely it is a private class that is not visible by Mockito\");\n}\nthrow new MockitoException(\"\\n\"\n+ \"Mockito cannot mock this class: \" + mockedType\n+ \"\\n\"\n+ \"Mockito can only mock visible & non-final classes.\"\n+ \"\\n\"\n+ \"If you're not sure why you're getting this error, please report to the mailing list.\", e);\n}\n}",
            "method_id": 86
        },
        {
            "method_signature": "org.mockito.internal.util.CreationValidator:validateType(Ljava/lang/Class;)V",
            "method_body": "public void validateType(Class classToMock) {\nif (!ClassImposterizer.INSTANCE.canImposterise(classToMock)) {\nnew Reporter().cannotMockFinalClass(classToMock);\n}\n}",
            "method_id": 87
        },
        {
            "method_signature": "org.mockito.Mockito:withSettings()Lorg/mockito/MockSettings;",
            "method_body": "public static MockSettings withSettings() {\nreturn new MockSettingsImpl().defaultAnswer(RETURNS_DEFAULTS);\n}",
            "method_id": 88
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:getSpiedInstance()Ljava/lang/Object;",
            "method_body": "public Object getSpiedInstance() {\nreturn spiedInstance;\n}",
            "method_id": 89
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:validate()V",
            "method_body": "public static void validate() {\nnew GlobalConfiguration();\n}",
            "method_id": 90
        },
        {
            "method_signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl:pullMatchers()Ljava/util/List;",
            "method_body": "public List<Matcher> pullMatchers() {\nif (matcherStack.isEmpty()) {\nreturn Collections.emptyList();\n}\n\nList<LocalizedMatcher> matchers = new ArrayList<LocalizedMatcher>(matcherStack);\nmatcherStack.clear();\nreturn (List) matchers;\n}",
            "method_id": 91
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.SearchingClassLoader:combine(Ljava/util/List;)Ljava/lang/ClassLoader;",
            "method_body": "private static ClassLoader combine(List<ClassLoader> parentLoaders) {\nClassLoader loader = parentLoaders.get(parentLoaders.size()-1);\n\nfor (int i = parentLoaders.size()-2; i >= 0; i--) {\nloader = new SearchingClassLoader(parentLoaders.get(i), loader);\n}\n\nreturn loader;\n}",
            "method_id": 92
        },
        {
            "method_signature": "org.mockito.internal.stubbing.MockitoStubber:<init>(Lorg/mockito/internal/progress/MockingProgress;)V",
            "method_body": "public MockitoStubber(MockingProgress mockingProgress) {\nthis.mockingProgress = mockingProgress;\n}",
            "method_id": 93
        },
        {
            "method_signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues:answer(Lorg/mockito/invocation/InvocationOnMock;)Ljava/lang/Object;",
            "method_body": "public Object answer(InvocationOnMock invocation) {\nif (Invocation.isToString(invocation)) {\nObject mock = invocation.getMock();\nMockName name = new MockUtil().getMockName(mock);\nif (name.isSurrogate()) {\nreturn \"Mock for \" + ClassNameFinder.classNameForMock(mock) + \", hashCode: \" + mock.hashCode();\n} else {\nreturn name.toString();\n}\n}\n\nClass<?> returnType = invocation.getMethod().getReturnType();\nreturn returnValueFor(returnType);\n}",
            "method_id": 94
        },
        {
            "method_signature": "org.mockito.internal.MockHandler:handle(Lorg/mockito/internal/invocation/Invocation;)Ljava/lang/Object;",
            "method_body": "public Object handle(Invocation invocation) throws Throwable {\nif (mockitoStubber.hasAnswersForStubbing()) {\n// stubbing voids with stubVoid() or doAnswer() style\nInvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress\n.getArgumentMatcherStorage(), invocation);\nmockitoStubber.setMethodForStubbing(invocationMatcher);\nreturn null;\n}\nVerificationMode verificationMode = mockingProgress.pullVerificationMode();\n\nInvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),\ninvocation);\n\nmockingProgress.validateState();\n\nif (verificationMode != null) {\nVerificationDataImpl data = new VerificationDataImpl(registeredInvocations.getAll(), invocationMatcher);\nverificationMode.verify(data);\nreturn null;\n}\n\nregisteredInvocations.add(invocationMatcher.getInvocation());\nmockitoStubber.setInvocationForPotentialStubbing(invocationMatcher);\nOngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(mockitoStubber, registeredInvocations);\nmockingProgress.reportOngoingStubbing(ongoingStubbing);\n\nStubbedInvocationMatcher stubbedInvocation = mockitoStubber.findAnswerFor(invocation);\nif (!invocation.isVoid() && stubbedInvocation == null) {\n// it is a return-value interaction but not stubbed. This *might* be\n// a problem\nmockingProgress.getDebuggingInfo().addPotentiallyUnstubbed(invocationMatcher);\n}\n\nif (stubbedInvocation != null) {\nmockingProgress.getDebuggingInfo().reportUsedStub(invocationMatcher);\nstubbedInvocation.captureArgumentsFrom(invocation);\nreturn stubbedInvocation.answer(invocation);\n} else {\nObject ret = mockSettings.getDefaultAnswer().answer(invocation);\n\n// redo setting invocation for potential stubbing in case of partial\n// mocks / spies.\n// Without it, the real method inside 'when' might have delegated\n// to other self method and overwrite the intended stubbed method\n// with a different one.\nmockitoStubber.setInvocationForPotentialStubbing(invocationMatcher);\nreturn ret;\n}\n}",
            "method_id": 95
        },
        {
            "method_signature": "org.mockito.internal.creation.MethodInterceptorFilter:createMockitoMethod(Ljava/lang/reflect/Method;)Lorg/mockito/internal/invocation/MockitoMethod;",
            "method_body": "public MockitoMethod createMockitoMethod(Method method) {\nif (mockSettings.isSerializable()) {\nreturn new SerializableMethod(method);\n} else {\nreturn new DelegatingMethod(method);\n}\n}",
            "method_id": 96
        },
        {
            "method_signature": "org.mockito.internal.creation.MethodInterceptorFilter:<init>(Lorg/mockito/internal/IMockHandler;Lorg/mockito/internal/creation/MockSettingsImpl;)V",
            "method_body": "public MethodInterceptorFilter(IMockHandler mockHandler, MockSettingsImpl mockSettings) {\nthis.mockHandler = mockHandler;\nthis.mockSettings = mockSettings;\n}",
            "method_id": 97
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:getDefaultAnswer()Lorg/mockito/stubbing/Answer;",
            "method_body": "public Answer<Object> getDefaultAnswer() {\nreturn defaultAnswer;\n}",
            "method_id": 98
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMethod:isVarArgs()Z",
            "method_body": "public boolean isVarArgs() {\nreturn method.isVarArgs();\n}",
            "method_id": 99
        },
        {
            "method_signature": "org.mockito.internal.creation.cglib.CGLIBHacker:setMockitoNamingPolicy(Lorg/mockito/internal/creation/MockitoMethodProxy;)V",
            "method_body": "public void setMockitoNamingPolicy(MockitoMethodProxy methodProxy) {\nmethodProxy.setNamingPolicyField(MockitoNamingPolicy.INSTANCE);\n}",
            "method_id": 100
        },
        {
            "method_signature": "org.mockito.internal.MockHandler:<init>(Lorg/mockito/internal/util/MockName;Lorg/mockito/internal/progress/MockingProgress;Lorg/mockito/internal/invocation/MatchersBinder;Lorg/mockito/internal/creation/MockSettingsImpl;)V",
            "method_body": "public MockHandler(MockName mockName, MockingProgress mockingProgress, MatchersBinder matchersBinder,\nMockSettingsImpl mockSettings) {\nthis.mockName = mockName;\nthis.mockingProgress = mockingProgress;\nthis.matchersBinder = matchersBinder;\nthis.mockSettings = mockSettings;\nthis.mockitoStubber = new MockitoStubber(mockingProgress);\nthis.registeredInvocations = new RegisteredInvocations();\n}",
            "method_id": 101
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:getAnnotationEngine()Lorg/mockito/configuration/AnnotationEngine;",
            "method_body": "public AnnotationEngine getAnnotationEngine() {\nreturn globalConfiguration.get().getAnnotationEngine();\n}",
            "method_id": 102
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:getDefaultAnswer()Lorg/mockito/stubbing/Answer;",
            "method_body": "public Answer<Object> getDefaultAnswer() {\nreturn globalConfiguration.get().getDefaultAnswer();\n}",
            "method_id": 103
        },
        {
            "method_signature": "org.mockito.internal.invocation.Invocation:<init>(Ljava/lang/Object;Lorg/mockito/internal/invocation/MockitoMethod;[Ljava/lang/Object;ILorg/mockito/internal/invocation/realmethod/RealMethod;)V",
            "method_body": "public Invocation(Object mock, MockitoMethod mockitoMethod, Object[] args, int sequenceNumber, RealMethod realMethod) {\nthis.method = mockitoMethod;\nthis.mock = mock;\nthis.realMethod = realMethod;\nthis.arguments = expandVarArgs(mockitoMethod.isVarArgs(), args);\nthis.rawArguments = args;\nthis.sequenceNumber = sequenceNumber;\nthis.location = new Location();\n}",
            "method_id": 104
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:getArgumentMatcherStorage()Lorg/mockito/internal/progress/ArgumentMatcherStorage;",
            "method_body": "public ArgumentMatcherStorage getArgumentMatcherStorage() {\nreturn argumentMatcherStorage;\n}",
            "method_id": 105
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:threadSafely()Lorg/mockito/internal/progress/MockingProgress;",
            "method_body": "static MockingProgress threadSafely() {\nif (mockingProgress.get() == null) {\nmockingProgress.set(new MockingProgressImpl());\n}\nreturn mockingProgress.get();\n}",
            "method_id": 106
        },
        {
            "method_signature": "org.mockito.internal.stubbing.OngoingStubbingImpl:<init>(Lorg/mockito/internal/stubbing/MockitoStubber;Lorg/mockito/internal/verification/RegisteredInvocations;)V",
            "method_body": "public OngoingStubbingImpl(MockitoStubber mockitoStubber,\nRegisteredInvocations registeredInvocations) {\nthis.mockitoStubber = mockitoStubber;\nthis.registeredInvocations = registeredInvocations;\n}",
            "method_id": 107
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:validateState()V",
            "method_body": "public void validateState() {\n//State is cool when GlobalConfiguration is already loaded\n//this cannot really be tested functionally because I cannot dynamically mess up org.mockito.configuration.MockitoConfiguration class\nGlobalConfiguration.validate();\n\nif (verificationMode != null) {\nLocation location = verificationMode.getLocation();\nverificationMode = null;\nreporter.unfinishedVerificationException(location);\n}\n\nif (stubbingInProgress != null) {\nLocation temp = stubbingInProgress;\nstubbingInProgress = null;\nreporter.unfinishedStubbing(temp);\n}\n\ngetArgumentMatcherStorage().validateState();\n}",
            "method_id": 108
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:verificationStarted(Lorg/mockito/internal/verification/api/VerificationMode;)V",
            "method_body": "public void verificationStarted(VerificationMode verify) {\nthreadSafely().verificationStarted(verify);\n}",
            "method_id": 109
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:<init>()V",
            "method_body": "public GlobalConfiguration() {\n//Configuration should be loaded only once but I cannot really test it\nif (globalConfiguration.get() == null) {\nglobalConfiguration.set(createConfig());\n}\n}",
            "method_id": 110
        },
        {
            "method_signature": "org.mockito.internal.MockitoCore:verify(Ljava/lang/Object;Lorg/mockito/internal/verification/api/VerificationMode;)Ljava/lang/Object;",
            "method_body": "public <T> T verify(T mock, VerificationMode mode) {\nif (mock == null) {\nreporter.nullPassedToVerify();\n} else if (!mockUtil.isMock(mock)) {\nreporter.notAMockPassedToVerify();\n}\nmockingProgress.verificationStarted(mode);\nreturn mock;\n}",
            "method_id": 111
        },
        {
            "method_signature": "org.mockito.internal.matchers.LocalizedMatcher:<init>(Lorg/hamcrest/Matcher;)V",
            "method_body": "public LocalizedMatcher(Matcher actualMatcher) {\nthis.actualMatcher = actualMatcher;\nthis.location = new Location();\n}",
            "method_id": 112
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.SearchingClassLoader:addIfNewElement(Ljava/util/List;Ljava/lang/ClassLoader;)V",
            "method_body": "private static void addIfNewElement(List<ClassLoader> loaders, ClassLoader c) {\nif (c != null && !loaders.contains(c)) {\nloaders.add(c);\n}\n}",
            "method_id": 113
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:getExtraInterfaces()[Ljava/lang/Class;",
            "method_body": "public Class<?>[] getExtraInterfaces() {\nreturn extraInterfaces;\n}",
            "method_id": 114
        },
        {
            "method_signature": "org.mockito.internal.creation.MethodInterceptorFilter:createMockitoMethodProxy(Lorg/mockito/cglib/proxy/MethodProxy;)Lorg/mockito/internal/creation/MockitoMethodProxy;",
            "method_body": "public MockitoMethodProxy createMockitoMethodProxy(MethodProxy methodProxy) {\nif (mockSettings.isSerializable())\nreturn new SerializableMockitoMethodProxy(methodProxy);\nreturn new DelegatingMockitoMethodProxy(methodProxy);\n}",
            "method_id": 115
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:canImposterise(Ljava/lang/Class;)Z",
            "method_body": "public boolean canImposterise(Class<?> type) {\nreturn !type.isPrimitive() && !Modifier.isFinal(type.getModifiers()) && !type.isAnonymousClass();\n}",
            "method_id": 116
        }
    ]
}
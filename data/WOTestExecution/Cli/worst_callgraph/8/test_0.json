{
    "bug_id": 8,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.HelpFormatterTest.testPrintWrapped",
    "test_body": "public void testPrintWrapped()\nthrows Exception\n{\nStringBuffer sb = new StringBuffer();\nHelpFormatter hf = new HelpFormatter();\nString text = \"This is a test.\";\nString expected;\nexpected = \"This is a\" + hf.getNewLine() + \"test.\";\nhf.renderWrappedText(sb, 12, 0, text);\nassertEquals(\"single line text\", expected, sb.toString());\nsb.setLength(0);\nexpected = \"This is a\" + hf.getNewLine() + \"    test.\";\nhf.renderWrappedText(sb, 12, 4, text);\nassertEquals(\"single line padded text\", expected, sb.toString());\ntext = \"  -p,--period <PERIOD>  PERIOD is time duration of form \" +\n\"DATE[-DATE] where DATE has form YYYY[MM[DD]]\";\nsb.setLength(0);\nexpected = \"  -p,--period <PERIOD>  PERIOD is time duration of\" +\nhf.getNewLine() +\n\"                        form DATE[-DATE] where DATE\" +\nhf.getNewLine() +\n\"                        has form YYYY[MM[DD]]\";\nhf.renderWrappedText(sb, 53, 24, text);\nassertEquals(\"single line padded text 2\", expected, sb.toString());\ntext =\n\"aaaa aaaa aaaa\" + hf.getNewLine() +\n\"aaaaaa\" + hf.getNewLine() +\n\"aaaaa\";\nexpected = text;\nsb.setLength(0);\nhf.renderWrappedText(sb, 16, 0, text);\nassertEquals(\"multi line text\", expected, sb.toString());\nexpected =\n\"aaaa aaaa aaaa\" + hf.getNewLine() +\n\"    aaaaaa\" + hf.getNewLine() +\n\"    aaaaa\";\nsb.setLength(0);\nhf.renderWrappedText(sb, 16, 4, text);\nassertEquals(\"multi-line padded text\", expected, sb.toString());\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: single line padded text 2 expected:<...TE[-DATE] where DATE[\n] has form YYYY[MM[DD...> but was:<...TE[-DATE] where DATE[] has form YYYY[MM[DD...>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.TestCase.assertEquals(TestCase.java:261)\nat org.apache.commons.cli.HelpFormatterTest.testPrintWrapped(HelpFormatterTest.java:96)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:getNewLine()Ljava/lang/String;",
            "method_body": "public String getNewLine()\n{\nreturn this.defaultNewLine;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:createPadding(I)Ljava/lang/String;",
            "method_body": "protected String createPadding(int len)\n{\nStringBuffer sb = new StringBuffer(len);\n\nfor (int i = 0; i < len; ++i)\n{\nsb.append(' ');\n}\n\nreturn sb.toString();\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:rtrim(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "protected String rtrim(String s)\n{\nif ((s == null) || (s.length() == 0))\n{\nreturn s;\n}\n\nint pos = s.length();\n\nwhile ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))\n{\n--pos;\n}\n\nreturn s.substring(0, pos);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:findWrapPos(Ljava/lang/String;II)I",
            "method_body": "protected int findWrapPos(String text, int width, int startPos)\n{\nint pos = -1;\n\n// the line ends before the max wrap pos or a new line char found\nif (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= width)\n|| ((pos = text.indexOf('\\t', startPos)) != -1 && pos <= width))\n{\nreturn pos+1;\n}\nelse if ((startPos + width) >= text.length())\n{\nreturn -1;\n}\n\n\n// look for the last whitespace character before startPos+width\npos = startPos + width;\n\nchar c;\n\nwhile ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')\n&& (c != '\\n') && (c != '\\r'))\n{\n--pos;\n}\n\n// if we found it - just return\nif (pos > startPos)\n{\nreturn pos;\n}\n\n// must look for the first whitespace chearacter after startPos\n// + width\npos = startPos + width;\n\nwhile ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')\n&& (c != '\\n') && (c != '\\r'))\n{\n++pos;\n}\n\nreturn (pos == text.length())        ? (-1) : pos;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:<init>()V",
            "method_body": "public static final int DEFAULT_WIDTH = 74;\npublic int defaultWidth = DEFAULT_WIDTH;\npublic int defaultLeftPad = DEFAULT_LEFT_PAD;\npublic int defaultDescPad = DEFAULT_DESC_PAD;\npublic String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX;\npublic String defaultNewLine = System.getProperty(\"line.separator\");\npublic String defaultOptPrefix = DEFAULT_OPT_PREFIX;\npublic String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;\npublic String defaultArgName = DEFAULT_ARG_NAME;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:renderWrappedText(Ljava/lang/StringBuffer;IILjava/lang/String;)Ljava/lang/StringBuffer;",
            "method_body": "protected StringBuffer renderWrappedText(StringBuffer sb, int width,\nint nextLineTabStop, String text)\n{\nint pos = findWrapPos(text, width, 0);\n\nif (pos == -1)\n{\nsb.append(rtrim(text));\n\nreturn sb;\n}\nsb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n// all following lines must be padded with nextLineTabStop space\n// characters\nfinal String padding = createPadding(nextLineTabStop);\n\nwhile (true)\n{\ntext = padding + text.substring(pos).trim();\npos = findWrapPos(text, width, nextLineTabStop);\n\nif (pos == -1)\n{\nsb.append(text);\n\nreturn sb;\n}\n\nsb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n}\n}",
            "method_id": 5
        }
    ]
}
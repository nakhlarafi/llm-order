{
    "bug_id": 30,
    "test_id": 4,
    "test_name": "org.apache.commons.cli.OptionGroupTest.testTwoOptionsFromGroupWithProperties",
    "test_body": "public void testTwoOptionsFromGroupWithProperties() throws Exception\n{\nString[] args = new String[] { \"-f\" };\nProperties properties = new Properties();\nproperties.put(\"d\", \"true\");\nCommandLine cl = parser.parse( _options, args, properties);\nassertTrue(cl.hasOption(\"f\"));\nassertTrue(!cl.hasOption(\"d\"));\n}\n",
    "stack_trace": "org.apache.commons.cli.AlreadySelectedException: The option 'd' was specified but an option from this group has already been selected: 'f'\nat org.apache.commons.cli.OptionGroup.setSelected(OptionGroup.java:105)\nat org.apache.commons.cli.Parser.updateRequiredOptions(Parser.java:421)\nat org.apache.commons.cli.Parser.processProperties(Parser.java:296)\nat org.apache.commons.cli.Parser.parse(Parser.java:241)\nat org.apache.commons.cli.Parser.parse(Parser.java:103)\nat org.apache.commons.cli.OptionGroupTest.testTwoOptionsFromGroupWithProperties(OptionGroupTest.java:198)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Parser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Ljava/util/Properties;Z)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption)\nthrows ParseException\n{\n// clear out the data in options in case it's been used before (CLI-71)\nfor (Iterator it = options.helpOptions().iterator(); it.hasNext();)\n{\nOption opt = (Option) it.next();\nopt.clearValues();\n}\n\n// clear the data from the groups\nfor (Iterator it = options.getOptionGroups().iterator(); it.hasNext();)\n{\nOptionGroup group = (OptionGroup) it.next();\ngroup.setSelected(null);\n}\n\n// initialise members\nsetOptions(options);\n\ncmd = new CommandLine();\n\nboolean eatTheRest = false;\n\nif (arguments == null)\n{\narguments = new String[0];\n}\n\nList tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption));\n\nListIterator iterator = tokenList.listIterator();\n\n// process each flattened token\nwhile (iterator.hasNext())\n{\nString t = (String) iterator.next();\n\n// the value is the double-dash\nif (\"--\".equals(t))\n{\neatTheRest = true;\n}\n\n// the value is a single dash\nelse if (\"-\".equals(t))\n{\nif (stopAtNonOption)\n{\neatTheRest = true;\n}\nelse\n{\ncmd.addArg(t);\n}\n}\n\n// the value is an option\nelse if (t.startsWith(\"-\"))\n{\nif (stopAtNonOption && !getOptions().hasOption(t))\n{\neatTheRest = true;\ncmd.addArg(t);\n}\nelse\n{\nprocessOption(t, iterator);\n}\n}\n\n// the value is an argument\nelse\n{\ncmd.addArg(t);\n\nif (stopAtNonOption)\n{\neatTheRest = true;\n}\n}\n\n// eat the remaining tokens\nif (eatTheRest)\n{\nwhile (iterator.hasNext())\n{\nString str = (String) iterator.next();\n\n// ensure only one double-dash is added\nif (!\"--\".equals(str))\n{\ncmd.addArg(str);\n}\n}\n}\n}\n\nprocessProperties(properties);\ncheckRequiredOptions();\n\nreturn cmd;\n}",
            "method_id": 0,
            "loc": 103
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:flatten(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Z)[Ljava/lang/String;",
            "method_body": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException\n{\ninit();\nthis.options = options;\n\n// an iterator for the command line tokens\nIterator iter = Arrays.asList(arguments).iterator();\n\n// process each command line token\nwhile (iter.hasNext())\n{\n// get the next command line token\nString token = (String) iter.next();\n\n// single or double hyphen\nif (\"-\".equals(token) || \"--\".equals(token))\n{\ntokens.add(token);\n}\n\n// handle long option --foo or --foo=bar\nelse if (token.startsWith(\"--\"))\n{\nint pos = token.indexOf('=');\nString opt = pos == -1 ? token : token.substring(0, pos); // --foo\n\nList matchingOpts = options.getMatchingOptions(opt);\n\nif (matchingOpts.isEmpty())\n{\nprocessNonOptionToken(token, stopAtNonOption);\n}\nelse if (matchingOpts.size() > 1)\n{\nthrow new AmbiguousOptionException(opt, matchingOpts);\n}\nelse\n{\ncurrentOption = options.getOption((String) matchingOpts.get(0));\n\ntokens.add(\"--\" + currentOption.getLongOpt());\nif (pos != -1)\n{\ntokens.add(token.substring(pos + 1));\n}\n}\n}\n\nelse if (token.startsWith(\"-\"))\n{\nif (token.length() == 2 || options.hasOption(token))\n{\nprocessOptionToken(token, stopAtNonOption);\n}\nelse if (!options.getMatchingOptions(token).isEmpty())\n{\nList matchingOpts = options.getMatchingOptions(token);\nif (matchingOpts.size() > 1)\n{\nthrow new AmbiguousOptionException(token, matchingOpts);\n}\nelse\n{\nOption opt = options.getOption((String) matchingOpts.get(0));\nprocessOptionToken(\"-\" + opt.getLongOpt(), stopAtNonOption);\n}\n}\n// requires bursting\nelse\n{\nburstToken(token, stopAtNonOption);\n}\n}\nelse\n{\nprocessNonOptionToken(token, stopAtNonOption);\n}\n\ngobble(iter);\n}\n\nreturn (String[]) tokens.toArray(new String[tokens.size()]);\n}",
            "method_id": 1,
            "loc": 83
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:processProperties(Ljava/util/Properties;)V",
            "method_body": "protected void processProperties(Properties properties) throws ParseException\n{\nif (properties == null)\n{\nreturn;\n}\n\nfor (Enumeration e = properties.propertyNames(); e.hasMoreElements();)\n{\nString option = e.nextElement().toString();\n\nif (!cmd.hasOption(option))\n{\nOption opt = getOptions().getOption(option);\n\n// if the option is part of a group, check if another option of the group has been selected\n\n// get the value from the properties instance\nString value = properties.getProperty(option);\n\nif (opt.hasArg())\n{\nif (opt.getValues() == null || opt.getValues().length == 0)\n{\ntry\n{\nopt.addValueForProcessing(value);\n}\ncatch (RuntimeException exp)\n{\n// if we cannot add the value don't worry about it\n}\n}\n}\nelse if (!(\"yes\".equalsIgnoreCase(value)\n|| \"true\".equalsIgnoreCase(value)\n|| \"1\".equalsIgnoreCase(value)))\n{\n// if the value is not yes, true or 1 then don't add the\n// option to the CommandLine\ncontinue;\n}\n\ncmd.addOption(opt);\nupdateRequiredOptions(opt);\n}\n}\n}",
            "method_id": 2,
            "loc": 48
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:validateOption(Ljava/lang/String;)V",
            "method_body": "static void validateOption(String opt) throws IllegalArgumentException\n{\n// check that opt is not NULL\nif (opt == null)\n{\nreturn;\n}\n\n// handle the single character opt\nif (opt.length() == 1)\n{\nchar ch = opt.charAt(0);\n\nif (!isValidOpt(ch))\n{\nthrow new IllegalArgumentException(\"Illegal option name '\" + ch + \"'\");\n}\n}\n\n// handle the multi character opt\nelse\n{\nchar[] chars = opt.toCharArray();\n\nfor (int i = 0; i < chars.length; i++)\n{\nif (!isValidChar(chars[i]))\n{\nthrow new IllegalArgumentException(\"The option '\" + opt + \"' contains an illegal character : '\" + chars[i] + \"'\");\n}\n}\n}\n}",
            "method_id": 3,
            "loc": 33
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:processOption(Ljava/lang/String;Ljava/util/ListIterator;)V",
            "method_body": "protected void processOption(String arg, ListIterator iter) throws ParseException\n{\nboolean hasOption = getOptions().hasOption(arg);\n\n// if there is no option throw an UnrecognisedOptionException\nif (!hasOption)\n{\nthrow new UnrecognizedOptionException(\"Unrecognized option: \" + arg, arg);\n}\n\n// get the option represented by arg\nOption opt = (Option) getOptions().getOption(arg).clone();\n\n// update the required options and groups\nupdateRequiredOptions(opt);\n\n// if the option takes an argument value\nif (opt.hasArg())\n{\nprocessArgs(opt, iter);\n}\n\n// set the option on the command line\ncmd.addOption(opt);\n}",
            "method_id": 4,
            "loc": 25
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(Option opt)\n{\nString key = opt.getKey();\n\n// add it to the long option list\nif (opt.hasLongOpt())\n{\nlongOpts.put(opt.getLongOpt(), opt);\n}\n\n// if the option is required add it to the required list\nif (opt.isRequired())\n{\nif (requiredOpts.contains(key))\n{\nrequiredOpts.remove(requiredOpts.indexOf(key));\n}\nrequiredOpts.add(key);\n}\n\nshortOpts.put(key, opt);\n\nreturn this;\n}",
            "method_id": 5,
            "loc": 24
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOptionGroup(Lorg/apache/commons/cli/OptionGroup;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOptionGroup(OptionGroup group)\n{\nIterator options = group.getOptions().iterator();\n\nif (group.isRequired())\n{\nrequiredOpts.add(group);\n}\n\nwhile (options.hasNext())\n{\nOption option = (Option) options.next();\n\n// an Option cannot be required if it is in an\n// OptionGroup, either the group is required or\n// nothing is required\noption.setRequired(false);\naddOption(option);\n\noptionGroups.put(option.getKey(), group);\n}\n\nreturn this;\n}",
            "method_id": 6,
            "loc": 24
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:updateRequiredOptions(Lorg/apache/commons/cli/Option;)V",
            "method_body": "private void updateRequiredOptions(Option opt) throws ParseException\n{\n// if the option is a required option remove the option from\n// the requiredOptions list\nif (opt.isRequired())\n{\ngetRequiredOptions().remove(opt.getKey());\n}\n\n// if the option is in an OptionGroup make that option the selected\n// option of the group\nif (getOptions().getOptionGroup(opt) != null)\n{\nOptionGroup group = getOptions().getOptionGroup(opt);\n\nif (group.isRequired())\n{\ngetRequiredOptions().remove(group);\n}\n\ngroup.setSelected(opt);\n}\n}",
            "method_id": 7,
            "loc": 23
        },
        {
            "method_signature": "org.apache.commons.cli.OptionGroup:setSelected(Lorg/apache/commons/cli/Option;)V",
            "method_body": "public void setSelected(Option option) throws AlreadySelectedException\n{\nif (option == null)\n{\n// reset the option previously selected\nselected = null;\nreturn;\n}\n\n// if no option has already been selected or the\n// same option is being reselected then set the\n// selected member variable\nif (selected == null || selected.equals(option.getKey()))\n{\nselected = option.getKey();\n}\nelse\n{\nthrow new AlreadySelectedException(this, option);\n}\n}",
            "method_id": 8,
            "loc": 21
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:resolveOption(Ljava/lang/String;)Lorg/apache/commons/cli/Option;",
            "method_body": "private Option resolveOption(String opt)\n{\nopt = Util.stripLeadingHyphens(opt);\nfor (Iterator it = options.iterator(); it.hasNext();)\n{\nOption option = (Option) it.next();\nif (opt.equals(option.getOpt()))\n{\nreturn option;\n}\n\nif (opt.equals(option.getLongOpt()))\n{\nreturn option;\n}\n\n}\nreturn null;\n}",
            "method_id": 9,
            "loc": 19
        },
        {
            "method_signature": "org.apache.commons.cli.Util:stripLeadingHyphens(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "static String stripLeadingHyphens(String str)\n{\nif (str == null)\n{\nreturn null;\n}\nif (str.startsWith(\"--\"))\n{\nreturn str.substring(2, str.length());\n}\nelse if (str.startsWith(\"-\"))\n{\nreturn str.substring(1, str.length());\n}\n\nreturn str;\n}",
            "method_id": 10,
            "loc": 17
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)V",
            "method_body": "public Option(String opt, String longOpt, boolean hasArg, String description)\nthrows IllegalArgumentException\n{\n// ensure that the option is valid\nOptionValidator.validateOption(opt);\n\nthis.opt = opt;\nthis.longOpt = longOpt;\n\n// if hasArg is set then the number of arguments is 1\nif (hasArg)\n{\nthis.numberOfArgs = 1;\n}\n\nthis.description = description;\n}",
            "method_id": 11,
            "loc": 17
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:processOptionToken(Ljava/lang/String;Z)V",
            "method_body": "private void processOptionToken(String token, boolean stopAtNonOption)\n{\nif (stopAtNonOption && !options.hasOption(token))\n{\neatTheRest = true;\n}\n\nif (options.hasOption(token))\n{\ncurrentOption = options.getOption(token);\n}\n\ntokens.add(token);\n}",
            "method_id": 12,
            "loc": 14
        },
        {
            "method_signature": "org.apache.commons.cli.Option:clone()Ljava/lang/Object;",
            "method_body": "public Object clone()\n{\ntry\n{\nOption option = (Option) super.clone();\noption.values = new ArrayList(values);\nreturn option;\n}\ncatch (CloneNotSupportedException cnse)\n{\nthrow new RuntimeException(\"A CloneNotSupportedException was thrown: \" + cnse.getMessage());\n}\n}",
            "method_id": 13,
            "loc": 13
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getKey()Ljava/lang/String;",
            "method_body": "String getKey()\n{\n// if 'opt' is null, then it is a 'long' option\nif (opt == null)\n{\nreturn longOpt;\n}\n\nreturn opt;\n}",
            "method_id": 14,
            "loc": 10
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:gobble(Ljava/util/Iterator;)V",
            "method_body": "private void gobble(Iterator iter)\n{\nif (eatTheRest)\n{\nwhile (iter.hasNext())\n{\ntokens.add(iter.next());\n}\n}\n}",
            "method_id": 15,
            "loc": 10
        },
        {
            "method_signature": "org.apache.commons.cli.OptionGroup:addOption(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/OptionGroup;",
            "method_body": "public OptionGroup addOption(Option option)\n{\n// key   - option name\n// value - the option\noptionMap.put(option.getKey(), option);\n\nreturn this;\n}",
            "method_id": 16,
            "loc": 8
        },
        {
            "method_signature": "org.apache.commons.cli.AlreadySelectedException:<init>(Lorg/apache/commons/cli/OptionGroup;Lorg/apache/commons/cli/Option;)V",
            "method_body": "public AlreadySelectedException(OptionGroup group, Option option)\n{\nthis(\"The option '\" + option.getKey() + \"' was specified but an option from this group \"\n+ \"has already been selected: '\" + group.getSelected() + \"'\");\nthis.group = group;\nthis.option = option;\n}",
            "method_id": 17,
            "loc": 7
        },
        {
            "method_signature": "org.apache.commons.cli.Options:hasOption(Ljava/lang/String;)Z",
            "method_body": "public boolean hasOption(String opt)\n{\nopt = Util.stripLeadingHyphens(opt);\n\nreturn shortOpts.containsKey(opt) || longOpts.containsKey(opt);\n}",
            "method_id": 18,
            "loc": 6
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(String opt, String longOpt, boolean hasArg, String description)\n{\naddOption(new Option(opt, longOpt, hasArg, description));\n\nreturn this;\n}",
            "method_id": 19,
            "loc": 6
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:setOptions(Lorg/apache/commons/cli/Options;)V",
            "method_body": "protected void setOptions(final Options options)\n{\nthis.options = options;\nthis.requiredOptions = new ArrayList(options.getRequiredOptions());\n}",
            "method_id": 20,
            "loc": 5
        },
        {
            "method_signature": "org.apache.commons.cli.OptionGroup:<init>()V",
            "method_body": "private static final long serialVersionUID = 1L;\nprivate Map optionMap = new HashMap();\noptionMap.put(option.getKey(), option);\nreturn this;\n}",
            "method_id": 21,
            "loc": 5
        },
        {
            "method_signature": "org.apache.commons.cli.OptionGroup:getOptions()Ljava/util/Collection;",
            "method_body": "public Collection getOptions()\n{\n// the values are the collection of options\nreturn optionMap.values();\n}",
            "method_id": 22,
            "loc": 5
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:init()V",
            "method_body": "private void init()\n{\neatTheRest = false;\ntokens.clear();\n}",
            "method_id": 23,
            "loc": 5
        },
        {
            "method_signature": "org.apache.commons.cli.Options:helpOptions()Ljava/util/List;",
            "method_body": "List helpOptions()\n{\nreturn new ArrayList(shortOpts.values());\n}",
            "method_id": 24,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option:clearValues()V",
            "method_body": "void clearValues()\n{\nvalues.clear();\n}",
            "method_id": 25,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOptionGroups()Ljava/util/Collection;",
            "method_body": "Collection getOptionGroups()\n{\nreturn new HashSet(optionGroups.values());\n}",
            "method_id": 26,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.AlreadySelectedException:<init>(Ljava/lang/String;)V",
            "method_body": "public AlreadySelectedException(String message)\n{\nsuper(message);\n}",
            "method_id": 27,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:<init>()V",
            "method_body": "CommandLine()\n{\n// nothing to do\n}",
            "method_id": 28,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:hasOption(Ljava/lang/String;)Z",
            "method_body": "public boolean hasOption(String opt)\n{\nreturn options.contains(resolveOption(opt));\n}",
            "method_id": 29,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getRequiredOptions()Ljava/util/List;",
            "method_body": "public List getRequiredOptions()\n{\nreturn requiredOpts;\n}",
            "method_id": 30,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getLongOpt()Ljava/lang/String;",
            "method_body": "public String getLongOpt()\n{\nreturn longOpt;\n}",
            "method_id": 31,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasLongOpt()Z",
            "method_body": "public boolean hasLongOpt()\n{\nreturn longOpt != null;\n}",
            "method_id": 32,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option:isRequired()Z",
            "method_body": "public boolean isRequired()\n{\nreturn required;\n}",
            "method_id": 33,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidOpt(C)Z",
            "method_body": "private static boolean isValidOpt(char c)\n{\nreturn isValidChar(c) || c == '?' || c == '@';\n}",
            "method_id": 34,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidChar(C)Z",
            "method_body": "private static boolean isValidChar(char c)\n{\nreturn Character.isJavaIdentifierPart(c);\n}",
            "method_id": 35,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:getOptions()Lorg/apache/commons/cli/Options;",
            "method_body": "protected Options getOptions()\n{\nreturn options;\n}",
            "method_id": 36,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Ljava/util/Properties;)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException\n{\nreturn parse(options, arguments, properties, false);\n}",
            "method_id": 37,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOptionGroup(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/OptionGroup;",
            "method_body": "public OptionGroup getOptionGroup(Option opt)\n{\nreturn (OptionGroup) optionGroups.get(opt.getKey());\n}",
            "method_id": 38,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getOpt()Ljava/lang/String;",
            "method_body": "public String getOpt()\n{\nreturn opt;\n}",
            "method_id": 39,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasArg()Z",
            "method_body": "public boolean hasArg()\n{\nreturn numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES;\n}",
            "method_id": 40,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setRequired(Z)V",
            "method_body": "public void setRequired(boolean required)\n{\nthis.required = required;\n}",
            "method_id": 41,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:addOption(Lorg/apache/commons/cli/Option;)V",
            "method_body": "void addOption(Option opt)\n{\noptions.add(opt);\n}",
            "method_id": 42,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.ParseException:<init>(Ljava/lang/String;)V",
            "method_body": "public ParseException(String message)\n{\nsuper(message);\n}",
            "method_id": 43,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.OptionGroup:getSelected()Ljava/lang/String;",
            "method_body": "public String getSelected()\n{\nreturn selected;\n}",
            "method_id": 44,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.OptionGroup:isRequired()Z",
            "method_body": "public boolean isRequired()\n{\nreturn required;\n}",
            "method_id": 45,
            "loc": 4
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:<init>()V",
            "method_body": "private List tokens = new ArrayList();\neatTheRest = false;\ntokens.clear();\n}",
            "method_id": 46,
            "loc": 4
        }
    ]
}
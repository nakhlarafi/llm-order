{
    "bug_id": 34,
    "test_id": 1,
    "test_name": "org.apache.commons.cli.OptionBuilderTest.testTwoCompleteOptions",
    "test_body": "public void testTwoCompleteOptions( ) {\nOption simple = OptionBuilder.withLongOpt( \"simple option\")\n.hasArg( )\n.isRequired( )\n.hasArgs( )\n.withType( Float.class )\n.withDescription( \"this is a simple option\" )\n.create( 's' );\nassertEquals( \"s\", simple.getOpt() );\nassertEquals( \"simple option\", simple.getLongOpt() );\nassertEquals( \"this is a simple option\", simple.getDescription() );\nassertEquals( simple.getType(), Float.class );\nassertTrue( simple.hasArg() );\nassertTrue( simple.isRequired() );\nassertTrue( simple.hasArgs() );\nsimple = OptionBuilder.withLongOpt( \"dimple option\")\n.hasArg( )\n.withDescription( \"this is a dimple option\" )\n.create( 'd' );\nassertEquals( \"d\", simple.getOpt() );\nassertEquals( \"dimple option\", simple.getLongOpt() );\nassertEquals( \"this is a dimple option\", simple.getDescription() );\nassertEquals( String.class, simple.getType() );\nassertTrue( simple.hasArg() );\nassertTrue( !simple.isRequired() );\nassertTrue( !simple.hasArgs() );\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<class java.lang.String> but was:<null>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.apache.commons.cli.OptionBuilderTest.testTwoCompleteOptions(OptionBuilderTest.java:67)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Option:getType()Ljava/lang/Object;",
            "method_body": "public Object getType()\n{\nreturn type;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:withType(Ljava/lang/Class;)Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder withType(Class newType)\n{\nOptionBuilder.type = newType;\n\nreturn instance;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasArgs()Z",
            "method_body": "public boolean hasArgs()\n{\nreturn numberOfArgs > 1 || numberOfArgs == UNLIMITED_VALUES;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:hasArg()Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder hasArg()\n{\nOptionBuilder.numberOfArgs = 1;\n\nreturn instance;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:hasArgs()Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder hasArgs()\n{\nOptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES;\n\nreturn instance;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getDescription()Ljava/lang/String;",
            "method_body": "public String getDescription()\n{\nreturn description;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:withDescription(Ljava/lang/String;)Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder withDescription(String newDescription)\n{\nOptionBuilder.description = newDescription;\n\nreturn instance;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:isRequired()Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder isRequired()\n{\nOptionBuilder.required = true;\n\nreturn instance;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:<init>()V",
            "method_body": "private OptionBuilder()\n{\n// hide the constructor\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:<clinit>()V",
            "method_body": "private static String longopt;\n\n/** option description */\nprivate static String description;\n\n/** argument name */\nprivate static String argName;\n\n/** is required? */\nprivate static boolean required;\n\n/** the number of arguments */\nprivate static int numberOfArgs = Option.UNINITIALIZED;\n\n/** option type */\nprivate static Class type;\n\n/** option can have an optional argument value */\nprivate static boolean optionalArg;\n\n/** value separator for argument value */\nprivate static char valuesep;\n\n/** option builder instance */\nprivate static OptionBuilder instance = new OptionBuilder();\n\nstatic\n{\n// ensure the consistency of the initial values\nreset();\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:reset()V",
            "method_body": "private static void reset()\n{\ndescription = null;\nargName = null;\nlongopt = null;\ntype = null;\nrequired = false;\nnumberOfArgs = Option.UNINITIALIZED;\noptionalArg = false;\nvaluesep = (char) 0;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:create(Ljava/lang/String;)Lorg/apache/commons/cli/Option;",
            "method_body": "public static Option create(String opt) throws IllegalArgumentException\n{\nOption option = null;\ntry\n{\n// create the option\noption = new Option(opt, description);\n\n// set the option properties\noption.setLongOpt(longopt);\noption.setRequired(required);\noption.setOptionalArg(optionalArg);\noption.setArgs(numberOfArgs);\noption.setType(type);\noption.setValueSeparator(valuesep);\noption.setArgName(argName);\n}\nfinally\n{\n// reset the OptionBuilder properties\nOptionBuilder.reset();\n}\n\n// return the Option instance\nreturn option;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setType(Ljava/lang/Class;)V",
            "method_body": "public void setType(Class type)\n{\nthis.type = type;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setLongOpt(Ljava/lang/String;)V",
            "method_body": "public void setLongOpt(String longOpt)\n{\nthis.longOpt = longOpt;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setValueSeparator(C)V",
            "method_body": "public void setValueSeparator(char sep)\n{\nthis.valuesep = sep;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setOptionalArg(Z)V",
            "method_body": "public void setOptionalArg(boolean optionalArg)\n{\nthis.optionalArg = optionalArg;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setArgs(I)V",
            "method_body": "public void setArgs(int num)\n{\nthis.numberOfArgs = num;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setArgName(Ljava/lang/String;)V",
            "method_body": "public void setArgName(String argName)\n{\nthis.argName = argName;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public Option(String opt, String description) throws IllegalArgumentException\n{\nthis(opt, null, false, description);\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setRequired(Z)V",
            "method_body": "public void setRequired(boolean required)\n{\nthis.required = required;\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getOpt()Ljava/lang/String;",
            "method_body": "public String getOpt()\n{\nreturn opt;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasArg()Z",
            "method_body": "public boolean hasArg()\n{\nreturn numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getLongOpt()Ljava/lang/String;",
            "method_body": "public String getLongOpt()\n{\nreturn longOpt;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.cli.Option:isRequired()Z",
            "method_body": "public boolean isRequired()\n{\nreturn required;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidOpt(C)Z",
            "method_body": "private static boolean isValidOpt(char c)\n{\nreturn isValidChar(c) || c == '?' || c == '@';\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidChar(C)Z",
            "method_body": "private static boolean isValidChar(char c)\n{\nreturn Character.isJavaIdentifierPart(c);\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)V",
            "method_body": "public Option(String opt, String longOpt, boolean hasArg, String description)\nthrows IllegalArgumentException\n{\n// ensure that the option is valid\nOptionValidator.validateOption(opt);\n\nthis.opt = opt;\nthis.longOpt = longOpt;\n\n// if hasArg is set then the number of arguments is 1\nif (hasArg)\n{\nthis.numberOfArgs = 1;\n}\n\nthis.description = description;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:validateOption(Ljava/lang/String;)V",
            "method_body": "static void validateOption(String opt) throws IllegalArgumentException\n{\n// check that opt is not NULL\nif (opt == null)\n{\nreturn;\n}\n\n// handle the single character opt\nif (opt.length() == 1)\n{\nchar ch = opt.charAt(0);\n\nif (!isValidOpt(ch))\n{\nthrow new IllegalArgumentException(\"Illegal option name '\" + ch + \"'\");\n}\n}\n\n// handle the multi character opt\nelse\n{\nchar[] chars = opt.toCharArray();\n\nfor (int i = 0; i < chars.length; i++)\n{\nif (!isValidChar(chars[i]))\n{\nthrow new IllegalArgumentException(\"The option '\" + opt + \"' contains an illegal character : '\" + chars[i] + \"'\");\n}\n}\n}\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:withLongOpt(Ljava/lang/String;)Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder withLongOpt(String newLongopt)\n{\nOptionBuilder.longopt = newLongopt;\n\nreturn instance;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:create(C)Lorg/apache/commons/cli/Option;",
            "method_body": "public static Option create(char opt) throws IllegalArgumentException\n{\nreturn create(String.valueOf(opt));\n}",
            "method_id": 29
        }
    ]
}
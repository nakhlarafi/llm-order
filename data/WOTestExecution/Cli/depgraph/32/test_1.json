{
    "bug_id": 32,
    "test_id": 1,
    "test_name": "org.apache.commons.cli.HelpFormatterTest.testRenderWrappedTextWordCut",
    "test_body": "public void testRenderWrappedTextWordCut()\n{\nint width = 7;\nint padding = 0;\nString text = \"Thisisatest.\";\nString expected = \"Thisisa\" + EOL + \n\"test.\";\nStringBuffer sb = new StringBuffer();\nnew HelpFormatter().renderWrappedText(sb, width, padding, text);\nassertEquals(\"cut and wrap\", expected, sb.toString());\n}\n",
    "stack_trace": "java.lang.StringIndexOutOfBoundsException: String index out of range: 12\nat java.lang.String.charAt(String.java:658)\nat org.apache.commons.cli.HelpFormatter.findWrapPos(HelpFormatter.java:938)\nat org.apache.commons.cli.HelpFormatter.renderWrappedText(HelpFormatter.java:848)\nat org.apache.commons.cli.HelpFormatterTest.testRenderWrappedTextWordCut(HelpFormatterTest.java:68)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:findWrapPos(Ljava/lang/String;II)I",
            "method_body": "protected int findWrapPos(String text, int width, int startPos)\n{\nint pos;\n\n// the line ends before the max wrap pos or a new line char found\nif (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= width)\n|| ((pos = text.indexOf('\\t', startPos)) != -1 && pos <= width))\n{\nreturn pos + 1;\n}\nelse if (startPos + width >= text.length())\n{\nreturn -1;\n}\n\n\n// look for the last whitespace character before startPos+width\npos = startPos + width;\n\nchar c;\n\nwhile ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')\n&& (c != '\\n') && (c != '\\r'))\n{\n--pos;\n}\n\n// if we found it - just return\nif (pos > startPos)\n{\nreturn pos;\n}\n\n// if we didn't find one, simply chop at startPos+width\npos = startPos + width;\nwhile ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')\n&& (c != '\\n') && (c != '\\r'))\n{\n++pos;\n}\nreturn pos == text.length() ? -1 : pos;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:renderWrappedText(Ljava/lang/StringBuffer;IILjava/lang/String;)Ljava/lang/StringBuffer;",
            "method_body": "protected StringBuffer renderWrappedText(StringBuffer sb, int width,\nint nextLineTabStop, String text)\n{\nint pos = findWrapPos(text, width, 0);\n\nif (pos == -1)\n{\nsb.append(rtrim(text));\n\nreturn sb;\n}\nsb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\nif (nextLineTabStop >= width)\n{\n// stops infinite loop happening\nnextLineTabStop = 1;\n}\n\n// all following lines must be padded with nextLineTabStop space characters\nfinal String padding = createPadding(nextLineTabStop);\n\nwhile (true)\n{\ntext = padding + text.substring(pos).trim();\npos = findWrapPos(text, width, 0);\n\nif (pos == -1)\n{\nsb.append(text);\n\nreturn sb;\n}\n\nif ((text.length() > width) && (pos == nextLineTabStop - 1))\n{\npos = width;\n}\n\nsb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n}\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:<init>()V",
            "method_body": "public static final int DEFAULT_WIDTH = 74;\npublic int defaultWidth = DEFAULT_WIDTH;\npublic int defaultLeftPad = DEFAULT_LEFT_PAD;\npublic int defaultDescPad = DEFAULT_DESC_PAD;\npublic String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX;\npublic String defaultNewLine = System.getProperty(\"line.separator\");\npublic String defaultOptPrefix = DEFAULT_OPT_PREFIX;\npublic String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;\nprivate String longOptSeparator = DEFAULT_LONG_OPT_SEPARATOR;\npublic String defaultArgName = DEFAULT_ARG_NAME;\nprotected Comparator optionComparator = new OptionComparator();\n}",
            "method_id": 2
        }
    ]
}
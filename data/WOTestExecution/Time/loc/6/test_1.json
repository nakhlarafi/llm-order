{
    "bug_id": 6,
    "test_id": 1,
    "test_name": "org.joda.time.chrono.TestGJDate.test_plusYears_positiveToZero_crossCutover",
    "test_body": "public void test_plusYears_positiveToZero_crossCutover() {\nLocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY);\nLocalDate expected = new LocalDate(-1, 6, 30, GJ_CHRONOLOGY);\nassertEquals(expected, date.plusYears(-2003));\n}\n",
    "stack_trace": "org.joda.time.IllegalFieldValueException: Value 0 for year is not supported\nat org.joda.time.chrono.JulianChronology.adjustYearForSet(JulianChronology.java:81)\nat org.joda.time.chrono.JulianChronology.getDateMidnightMillis(JulianChronology.java:207)\nat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:159)\nat org.joda.time.chrono.JulianChronology.getDateTimeMillis(JulianChronology.java:50)\nat org.joda.time.chrono.GJChronology.convertByYear(GJChronology.java:85)\nat org.joda.time.chrono.GJChronology.gregorianToJulianByYear(GJChronology.java:588)\nat org.joda.time.chrono.GJChronology$CutoverField.gregorianToJulian(GJChronology.java:924)\nat org.joda.time.chrono.GJChronology$ImpreciseCutoverField.add(GJChronology.java:979)\nat org.joda.time.chrono.GJChronology$LinkedDurationField.add(GJChronology.java:1099)\nat org.joda.time.LocalDate.plusYears(LocalDate.java:1205)\nat org.joda.time.chrono.TestGJDate.test_plusYears_positiveToZero_crossCutover(TestGJDate.java:99)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
            "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n\n/**\n* Is the specified year a leap year?\n*\n* @param year  the year to test\n* @return true if leap\n*/\nabstract boolean isLeapYear(int year);\n\n/**\n* Gets the number of days in the specified month and year.\n*\n* @param year  the year\n* @param month  the month\n* @return the number of days\n*/\nabstract int getDaysInYearMonth(int year, int month);\n\n/**\n* Gets the maximum days in the specified month.\n*\n* @param month  the month\n* @return the max days\n*/\nabstract int getDaysInMonthMax(int month);\n\n/**\n* Gets the total number of millis elapsed in this year at the start\n* of the specified month, such as zero for month 1.\n*\n* @param year  the year\n* @param month  the month\n* @return the elapsed millis at the start of the month\n*/\nabstract long getTotalMillisByYearMonth(int year, int month);\n\n/**\n* Gets the millisecond value of the first day of the year.\n*\n* @return the milliseconds for the first of the year\n*/\nabstract long calculateFirstDayOfYearMillis(int year);\n\n/**\n* Gets the minimum supported year.\n*\n* @return the year\n*/\nabstract int getMinYear();\n\n/**\n* Gets the maximum supported year.\n*\n* @return the year\n*/\nabstract int getMaxYear();\n\n/**\n* Gets the maximum month for the specified year.\n* This implementation calls getMaxMonth().\n*\n* @param year  the year\n* @return the maximum month value\n*/\nint getMaxMonth(int year) {\nreturn getMaxMonth();\n}",
            "method_id": 0,
            "loc": 68
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
            "method_body": "abstract long getAverageMillisPerYear();\n\n/**\n* Gets an average value for the milliseconds per year, divided by two.\n*\n* @return the millis per year divided by two\n*/\nabstract long getAverageMillisPerYearDividedByTwo();\n\n/**\n* Gets an average value for the milliseconds per month.\n*\n* @return the millis per month\n*/\nabstract long getAverageMillisPerMonth();\n\n/**\n* Returns a constant representing the approximate number of milliseconds\n* elapsed from year 0 of this chronology, divided by two. This constant\n* <em>must</em> be defined as:\n* <pre>\n*    (yearAtEpoch * averageMillisPerYear + millisOfYearAtEpoch) / 2\n* </pre>\n* where epoch is 1970-01-01 (Gregorian).\n*/\nabstract long getApproxMillisAtEpochDividedByTwo();\n\n/**\n* Sets the year from an instant and year.\n*\n* @param instant  millis from 1970-01-01T00:00:00Z\n* @param year  the year to set\n* @return the updated millis\n*/\nabstract long setYear(long instant, int year);\n\n//-----------------------------------------------------------------------\n// Although accessed by multiple threads, this method doesn't need to be synchronized.\nprivate YearInfo getYearInfo(int year) {\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\ninfo = new YearInfo(year, calculateFirstDayOfYearMillis(year));\niYearInfoCache[year & CACHE_MASK] = info;\n}\nreturn info;\n}",
            "method_id": 1,
            "loc": 46
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
            "method_body": "int getYear(long instant) {\n// Get an initial estimate of the year, and the millis value that\n// represents the start of that year. Then verify estimate and fix if\n// necessary.\n\n// Initial estimate uses values divided by two to avoid overflow.\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\ni2 = i2 - unitMillis + 1;\n}\nint year = (int) (i2 / unitMillis);\n\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\n\nif (diff < 0) {\nyear--;\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n// One year may need to be added to fix estimate.\nlong oneYear;\nif (isLeapYear(year)) {\noneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;\n} else {\noneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;\n}\n\nyearStart += oneYear;\n\nif (yearStart <= instant) {\n// Didn't go too far, so actually add one year.\nyear++;\n}\n}\n\nreturn year;\n}",
            "method_id": 2,
            "loc": 37
        },
        {
            "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
            "method_body": "int getMonthOfYear(long millis, int year) {\n// Perform a binary search to get the month. To make it go even faster,\n// compare using ints instead of longs. The number of milliseconds per\n// year exceeds the limit of a 32-bit int's capacity, so divide by\n// 1024. No precision is lost (except time of day) since the number of\n// milliseconds per day contains 1024 as a factor. After the division,\n// the instant isn't measured in milliseconds, but in units of\n// (128/125)seconds.\n\nint i = (int)((millis - getYearMillis(year)) >> 10);\n\n// There are 86400000 milliseconds per day, but divided by 1024 is\n// 84375. There are 84375 (128/125)seconds per day.\n\nreturn\n(isLeapYear(year))\n? ((i < 182 * 84375)\n? ((i < 91 * 84375)\n? ((i < 31 * 84375) ? 1 : (i < 60 * 84375) ? 2 : 3)\n: ((i < 121 * 84375) ? 4 : (i < 152 * 84375) ? 5 : 6))\n: ((i < 274 * 84375)\n? ((i < 213 * 84375) ? 7 : (i < 244 * 84375) ? 8 : 9)\n: ((i < 305 * 84375) ? 10 : (i < 335 * 84375) ? 11 : 12)))\n: ((i < 181 * 84375)\n? ((i < 90 * 84375)\n? ((i < 31 * 84375) ? 1 : (i < 59 * 84375) ? 2 : 3)\n: ((i < 120 * 84375) ? 4 : (i < 151 * 84375) ? 5 : 6))\n: ((i < 273 * 84375)\n? ((i < 212 * 84375) ? 7 : (i < 243 * 84375) ? 8 : 9)\n: ((i < 304 * 84375) ? 10 : (i < 334 * 84375) ? 11 : 12)));\n}",
            "method_id": 3,
            "loc": 31
        },
        {
            "method_signature": "org.joda.time.IllegalFieldValueException:createMessage(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "private static String createMessage(String fieldName, Number value,\nNumber lowerBound, Number upperBound, String explain) {\nStringBuilder buf = new StringBuilder()\n.append(\"Value \").append(value).append(\" for \").append(fieldName).append(' ');\n\nif (lowerBound == null) {\nif (upperBound == null) {\nbuf.append(\"is not supported\");\n} else {\nbuf.append(\"must not be larger than \").append(upperBound);\n}\n} else if (upperBound == null) {\nbuf.append(\"must not be smaller than \").append(lowerBound);\n} else {\nbuf.append(\"must be in the range [\")\n.append(lowerBound)\n.append(',')\n.append(upperBound)\n.append(']');\n}\nif (explain != null) {\nbuf.append(\": \").append(explain);\n}\n\nreturn buf.toString();\n}",
            "method_id": 4,
            "loc": 26
        },
        {
            "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
            "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\nint dayOfYear = getDayOfYear(instant, thisYear);\nint millisOfDay = getMillisOfDay(instant);\n\nif (dayOfYear > (31 + 28)) { // after Feb 28\nif (isLeapYear(thisYear)) {\n// Current date is Feb 29 or later.\nif (!isLeapYear(year)) {\n// Moving to a non-leap year, Feb 29 does not exist.\ndayOfYear--;\n}\n} else {\n// Current date is Mar 01 or later.\nif (isLeapYear(year)) {\n// Moving to a leap year, account for Feb 29.\ndayOfYear++;\n}\n}\n}\n\ninstant = getYearMonthDayMillis(year, 1, dayOfYear);\ninstant += millisOfDay;\n\nreturn instant;\n}",
            "method_id": 5,
            "loc": 26
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology:getDateTimeMillis(IIII)J",
            "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nint millisOfDay)\nthrows IllegalArgumentException\n{\nChronology base;\nif ((base = getBase()) != null) {\nreturn base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);\n}\n\n// Assume date is Gregorian.\nlong instant = iGregorianChronology.getDateTimeMillis\n(year, monthOfYear, dayOfMonth, millisOfDay);\nif (instant < iCutoverMillis) {\n// Maybe it's Julian.\ninstant = iJulianChronology.getDateTimeMillis\n(year, monthOfYear, dayOfMonth, millisOfDay);\nif (instant >= iCutoverMillis) {\n// Okay, it's in the illegal cutover gap.\nthrow new IllegalArgumentException(\"Specified date does not exist\");\n}\n}\nreturn instant;\n}",
            "method_id": 6,
            "loc": 23
        },
        {
            "method_signature": "org.joda.time.IllegalFieldValueException:<init>(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V",
            "method_body": "public IllegalFieldValueException(DateTimeFieldType fieldType,\nNumber value, Number lowerBound, Number upperBound) {\nsuper(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));\niDateTimeFieldType = fieldType;\niDurationFieldType = null;\niFieldName = fieldType.getName();\niNumberValue = value;\niStringValue = null;\niLowerBound = lowerBound;\niUpperBound = upperBound;\niMessage = super.getMessage();\n}",
            "method_id": 7,
            "loc": 12
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIII)J",
            "method_body": "public long getDateTimeMillis(\nint year, int monthOfYear, int dayOfMonth, int millisOfDay)\nthrows IllegalArgumentException {\nChronology base;\nif ((base = getBase()) != null) {\nreturn base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);\n}\n\nFieldUtils.verifyValueBounds\n(DateTimeFieldType.millisOfDay(), millisOfDay, 0, DateTimeConstants.MILLIS_PER_DAY - 1);\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;\n}",
            "method_id": 8,
            "loc": 12
        },
        {
            "method_signature": "org.joda.time.LocalDate:<init>(IIILorg/joda/time/Chronology;)V",
            "method_body": "public LocalDate(\nint year,\nint monthOfYear,\nint dayOfMonth,\nChronology chronology) {\nsuper();\nchronology = DateTimeUtils.getChronology(chronology).withUTC();\nlong instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);\niChronology = chronology;\niLocalMillis = instant;\n}",
            "method_id": 9,
            "loc": 11
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
            "method_body": "abstract int getMonthOfYear(long millis, int year);\n\n/**\n* @param millis from 1970-01-01T00:00:00Z\n*/\nint getDayOfMonth(long millis) {\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
            "method_id": 10,
            "loc": 10
        },
        {
            "method_signature": "org.joda.time.chrono.JulianChronology:adjustYearForSet(I)I",
            "method_body": "static int adjustYearForSet(int year) {\nif (year <= 0) {\nif (year == 0) {\nthrow new IllegalFieldValueException\n(DateTimeFieldType.year(), Integer.valueOf(year), null, null);\n}\nyear++;\n}\nreturn year;\n}",
            "method_id": 11,
            "loc": 10
        },
        {
            "method_signature": "org.joda.time.field.FieldUtils:safeAdd(II)I",
            "method_body": "public static int safeAdd(int val1, int val2) {\nint sum = val1 + val2;\n// If there is a sign change, but the two values have the same sign...\nif ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\nthrow new ArithmeticException\n(\"The calculation caused an overflow: \" + val1 + \" + \" + val2);\n}\nreturn sum;\n}",
            "method_id": 12,
            "loc": 9
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
            "method_body": "public Chronology withZone(DateTimeZone zone) {\nif (zone == null) {\nzone = DateTimeZone.getDefault();\n}\nif (zone == getZone()) {\nreturn this;\n}\nreturn getInstance(zone, iCutoverInstant, getMinimumDaysInFirstWeek());\n}",
            "method_id": 13,
            "loc": 9
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
            "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n} else {\nreturn (DateTimeConstants.MILLIS_PER_DAY - 1)\n+ (int) ((instant + 1) % DateTimeConstants.MILLIS_PER_DAY);\n}\n}",
            "method_id": 14,
            "loc": 8
        },
        {
            "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
            "method_body": "public static void verifyValueBounds(DateTimeField field,\nint value, int lowerBound, int upperBound) {\nif ((value < lowerBound) || (value > upperBound)) {\nthrow new IllegalFieldValueException\n(field.getType(), Integer.valueOf(value),\nInteger.valueOf(lowerBound), Integer.valueOf(upperBound));\n}\n}",
            "method_id": 15,
            "loc": 8
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
            "method_body": "protected abstract void assemble(Fields fields);\n\n/**\n* Returns the same base chronology as passed into the constructor.\n*/\nprotected final Chronology getBase() {\nreturn iBase;\n}",
            "method_id": 16,
            "loc": 8
        },
        {
            "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
            "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nint value, int lowerBound, int upperBound) {\nif ((value < lowerBound) || (value > upperBound)) {\nthrow new IllegalFieldValueException\n(fieldType, Integer.valueOf(value),\nInteger.valueOf(lowerBound), Integer.valueOf(upperBound));\n}\n}",
            "method_id": 17,
            "loc": 8
        },
        {
            "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:add(JI)J",
            "method_body": "public long add(long instant, int years) {\nif (years == 0) {\nreturn instant;\n}\nint thisYear = get(instant);\nint newYear = FieldUtils.safeAdd(thisYear, years);\nreturn set(instant, newYear);\n}",
            "method_id": 18,
            "loc": 8
        },
        {
            "method_signature": "org.joda.time.LocalDate:plusYears(I)Lorg/joda/time/LocalDate;",
            "method_body": "public LocalDate plusYears(int years) {\nif (years == 0) {\nreturn this;\n}\nlong instant = getChronology().years().add(getLocalMillis(), years);\nreturn withLocalMillis(instant);\n}",
            "method_id": 19,
            "loc": 7
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology:convertByYear(JLorg/joda/time/Chronology;Lorg/joda/time/Chronology;)J",
            "method_body": "private static long convertByYear(long instant, Chronology from, Chronology to) {\nreturn to.getDateTimeMillis\n(from.year().get(instant),\nfrom.monthOfYear().get(instant),\nfrom.dayOfMonth().get(instant),\nfrom.millisOfDay().get(instant));\n}",
            "method_id": 20,
            "loc": 7
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology:getZone()Lorg/joda/time/DateTimeZone;",
            "method_body": "public DateTimeZone getZone() {\nChronology base;\nif ((base = getBase()) != null) {\nreturn base.getZone();\n}\nreturn DateTimeZone.UTC;\n}",
            "method_id": 21,
            "loc": 7
        },
        {
            "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
            "method_body": "public int get(long instant) {\nif (instant >= 0) {\nreturn (int) ((instant / getUnitMillis()) % iRange);\n} else {\nreturn iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);\n}\n}",
            "method_id": 22,
            "loc": 7
        },
        {
            "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
            "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n} else {\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}\n}",
            "method_id": 23,
            "loc": 7
        },
        {
            "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
            "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n} else {\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}\n}",
            "method_id": 24,
            "loc": 7
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
            "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn ISOChronology.getInstance();\n}\nreturn chrono;\n}",
            "method_id": 25,
            "loc": 6
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
            "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
            "method_id": 26,
            "loc": 6
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
            "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
            "method_id": 27,
            "loc": 5
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
            "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
            "method_id": 28,
            "loc": 5
        },
        {
            "method_signature": "org.joda.time.chrono.JulianChronology:getDateMidnightMillis(III)J",
            "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth)\nthrows IllegalArgumentException\n{\nreturn super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);\n}",
            "method_id": 29,
            "loc": 5
        },
        {
            "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
            "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds\n(this, year, iChronology.getMinYear(), iChronology.getMaxYear());\nreturn iChronology.setYear(instant, year);\n}",
            "method_id": 30,
            "loc": 5
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
            "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
            "method_id": 31,
            "loc": 4
        },
        {
            "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
            "method_body": "protected BaseLocal() {\nsuper();\n}",
            "method_id": 32,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
            "method_body": "protected AbstractPartial() {\nsuper();\n}",
            "method_id": 33,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology:withUTC()Lorg/joda/time/Chronology;",
            "method_body": "public Chronology withUTC() {\nreturn withZone(DateTimeZone.UTC);\n}",
            "method_id": 34,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.LocalDate:getLocalMillis()J",
            "method_body": "protected long getLocalMillis() {\nreturn iLocalMillis;\n}",
            "method_id": 35,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology$LinkedDurationField:add(JI)J",
            "method_body": "public long add(long instant, int value) {\nreturn iField.add(instant, value);\n}",
            "method_id": 36,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
            "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
            "method_id": 37,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
            "method_body": "int getMaxMonth() {\nreturn 12;\n}",
            "method_id": 38,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.chrono.JulianChronology:getMinYear()I",
            "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
            "method_id": 39,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.chrono.JulianChronology:isLeapYear(I)Z",
            "method_body": "boolean isLeapYear(int year) {\nreturn (year & 3) == 0;\n}",
            "method_id": 40,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
            "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
            "method_id": 41,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:millisOfDay()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType millisOfDay() {\nreturn MILLIS_OF_DAY_TYPE;\n}",
            "method_id": 42,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
            "method_id": 43,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
            "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
            "method_id": 44,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.chrono.JulianChronology:getMaxYear()I",
            "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
            "method_id": 45,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
            "method_id": 46,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
            "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
            "method_id": 47,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
            "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
            "method_id": 48,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
            "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
            "method_id": 49,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
            "method_id": 50,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
            "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
            "method_id": 51,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
            "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
            "method_id": 52,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.chrono.GJChronology:gregorianToJulianByYear(J)J",
            "method_body": "long gregorianToJulianByYear(long instant) {\nreturn convertByYear(instant, iGregorianChronology, iJulianChronology);\n}",
            "method_id": 53,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.LocalDate:getChronology()Lorg/joda/time/Chronology;",
            "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
            "method_id": 54,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:getName()Ljava/lang/String;",
            "method_body": "public String getName() {\nreturn iName;\n}",
            "method_id": 55,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField millisOfDay() {\nreturn iMillisOfDay;\n}",
            "method_id": 56,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
            "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
            "method_id": 57,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
            "method_id": 58,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
            "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
            "method_id": 59,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
            "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
            "method_id": 60,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
            "method_body": "public final DurationField years() {\nreturn iYears;\n}",
            "method_id": 61,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
            "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
            "method_id": 62,
            "loc": 3
        },
        {
            "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
            "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}",
            "method_id": 63,
            "loc": 3
        }
    ]
}
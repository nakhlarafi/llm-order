{
    "bug_id": 9,
    "test_id": 0,
    "test_name": "org.jsoup.nodes.EntitiesTest.unescape",
    "test_body": "@Test public void unescape() {\nString text = \"Hello &amp;&LT&gt; &angst &#960; &#960 &#x65B0; there &! &frac34;\";\nassertEquals(\"Hello &<> \u00c3\u0085 \u00cf\u0080 \u00cf\u0080 \u00e6\u0096\u00b0 there &! \u00c2\u00be\", Entities.unescape(text));\nassertEquals(\"&0987654321; &unknown\", Entities.unescape(\"&0987654321; &unknown\"));\n}\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.nodes.Entities:unescape(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "static String unescape(String string) {\nif (!string.contains(\"&\"))\nreturn string;\n\nMatcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]\\\\d*);?\nStringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs\n// todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required\n\nwhile (m.find()) {\nint charval = -1;\nString num = m.group(3);\nif (num != null) {\ntry {\nint base = m.group(2) != null ? 16 : 10; // 2 is hex indicator\ncharval = Integer.valueOf(num, base);\n} catch (NumberFormatException e) {\n} // skip\n} else {\nString name = m.group(1);\nif (full.containsKey(name))\ncharval = full.get(name);\n}\n\nif (charval != -1 || charval > 0xFFFF) { // out of range\nString c = Character.toString((char) charval);\nm.appendReplacement(accum, Matcher.quoteReplacement(c));\n} else {\nm.appendReplacement(accum, Matcher.quoteReplacement(m.group(0))); // replace with original string\n}\n}\nm.appendTail(accum);\nreturn accum.toString();\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.jsoup.nodes.Entities:<clinit>()V",
            "method_body": "private static final Object[][] baseArray = {\n{\"AElig\", 0x000C6},\n{\"AMP\", 0x00026},\n{\"Aacute\", 0x000C1},\n{\"Acirc\", 0x000C2},\n{\"Agrave\", 0x000C0},\n{\"Aring\", 0x000C5},\n{\"Atilde\", 0x000C3},\n{\"Auml\", 0x000C4},\n{\"COPY\", 0x000A9},\n{\"Ccedil\", 0x000C7},\n{\"ETH\", 0x000D0},\n{\"Eacute\", 0x000C9},\n{\"Ecirc\", 0x000CA},\n{\"Egrave\", 0x000C8},\n{\"Euml\", 0x000CB},\n{\"GT\", 0x0003E},\n{\"Iacute\", 0x000CD},\n{\"Icirc\", 0x000CE},\n{\"Igrave\", 0x000CC},\n{\"Iuml\", 0x000CF},\n{\"LT\", 0x0003C},\n{\"Ntilde\", 0x000D1},\n{\"Oacute\", 0x000D3},\n{\"Ocirc\", 0x000D4},\n{\"Ograve\", 0x000D2},\n{\"Oslash\", 0x000D8},\n{\"Otilde\", 0x000D5},\n{\"Ouml\", 0x000D6},\n{\"QUOT\", 0x00022},\n{\"REG\", 0x000AE},\n{\"THORN\", 0x000DE},\n{\"Uacute\", 0x000DA},\n{\"Ucirc\", 0x000DB},\n{\"Ugrave\", 0x000D9},\n{\"Uuml\", 0x000DC},\n{\"Yacute\", 0x000DD},\n{\"aacute\", 0x000E1},\n{\"acirc\", 0x000E2},\n{\"acute\", 0x000B4},\n{\"aelig\", 0x000E6},\n{\"agrave\", 0x000E0},\n{\"amp\", 0x00026},\n{\"aring\", 0x000E5},\n{\"atilde\", 0x000E3},\n{\"auml\", 0x000E4},\n{\"brvbar\", 0x000A6},\n{\"ccedil\", 0x000E7},\n{\"cedil\", 0x000B8},\n{\"cent\", 0x000A2},\n{\"copy\", 0x000A9},\n{\"curren\", 0x000A4},\n{\"deg\", 0x000B0},\n{\"divide\", 0x000F7},\n{\"eacute\", 0x000E9},\n{\"ecirc\", 0x000EA},\n{\"egrave\", 0x000E8},\n{\"eth\", 0x000F0},\n{\"euml\", 0x000EB},\n{\"frac12\", 0x000BD},\n{\"frac14\", 0x000BC},\n{\"frac34\", 0x000BE},\n{\"gt\", 0x0003E},\n{\"iacute\", 0x000ED},\n{\"icirc\", 0x000EE},\n{\"iexcl\", 0x000A1},\n{\"igrave\", 0x000EC},\n{\"iquest\", 0x000BF},\n{\"iuml\", 0x000EF},\n{\"laquo\", 0x000AB},\n{\"lt\", 0x0003C},\n{\"macr\", 0x000AF},\n{\"micro\", 0x000B5},\n{\"middot\", 0x000B7},\n{\"nbsp\", 0x000A0},\n{\"not\", 0x000AC},\n{\"ntilde\", 0x000F1},\n{\"oacute\", 0x000F3},\n{\"ocirc\", 0x000F4},\n{\"ograve\", 0x000F2},\n{\"ordf\", 0x000AA},\n{\"ordm\", 0x000BA},\n{\"oslash\", 0x000F8},\n{\"otilde\", 0x000F5},\n{\"ouml\", 0x000F6},\n{\"para\", 0x000B6},\n{\"plusmn\", 0x000B1},\n{\"pound\", 0x000A3},\n{\"quot\", 0x00022},\n{\"raquo\", 0x000BB},\n{\"reg\", 0x000AE},\n{\"sect\", 0x000A7},\n{\"shy\", 0x000AD},\n{\"sup1\", 0x000B9},\n{\"sup2\", 0x000B2},\n{\"sup3\", 0x000B3},\n{\"szlig\", 0x000DF},\n{\"thorn\", 0x000FE},\n{\"times\", 0x000D7},\n{\"uacute\", 0x000FA},\n{\"ucirc\", 0x000FB},\n{\"ugrave\", 0x000F9},\n{\"uml\", 0x000A8},\n{\"uuml\", 0x000FC},\n{\"yacute\", 0x000FD},\n{\"yen\", 0x000A5},\n{\"yuml\", 0x000FF}\n};",
            "method_id": 1
        }
    ]
}
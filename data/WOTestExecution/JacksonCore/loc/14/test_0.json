{
    "bug_id": 14,
    "test_id": 0,
    "test_name": "com.fasterxml.jackson.core.io.TestIOContext.testAllocations",
    "test_body": "public void testAllocations() throws Exception\n{\nIOContext ctxt = new IOContext(new BufferRecycler(), \"N/A\", true);\n/* I/O Read buffer */\n// First succeeds:\nassertNotNull(ctxt.allocReadIOBuffer());\n// second fails\ntry {\nctxt.allocReadIOBuffer();\n} catch (IllegalStateException e) {\nverifyException(e, \"second time\");\n}\n// Also: can't succeed with different buffer\ntry {\nctxt.releaseReadIOBuffer(new byte[1]);\n} catch (IllegalArgumentException e) {\nverifyException(e, \"smaller than original\");\n}\n// but call with null is a NOP for convenience\nctxt.releaseReadIOBuffer(null);\n/* I/O Write buffer */\nassertNotNull(ctxt.allocWriteEncodingBuffer());\ntry {\nctxt.allocWriteEncodingBuffer();\n} catch (IllegalStateException e) {\nverifyException(e, \"second time\");\n}\ntry {\nctxt.releaseWriteEncodingBuffer(new byte[1]);\n} catch (IllegalArgumentException e) {\nverifyException(e, \"smaller than original\");\n}\nctxt.releaseWriteEncodingBuffer(null);\n/* Token (read) buffer */\nassertNotNull(ctxt.allocTokenBuffer());\ntry {\nctxt.allocTokenBuffer();\n} catch (IllegalStateException e) {\nverifyException(e, \"second time\");\n}\ntry {\nctxt.releaseTokenBuffer(new char[1]);\n} catch (IllegalArgumentException e) {\nverifyException(e, \"smaller than original\");\n}\nctxt.releaseTokenBuffer(null);\n/* Concat (write?) buffer */\nassertNotNull(ctxt.allocConcatBuffer());\ntry {\nctxt.allocConcatBuffer();\n} catch (IllegalStateException e) {\nverifyException(e, \"second time\");\n}\ntry {\nctxt.releaseConcatBuffer(new char[1]);\n} catch (IllegalArgumentException e) {\nverifyException(e, \"smaller than original\");\n}\nctxt.releaseConcatBuffer(null);\n/* NameCopy (write?) buffer */\nassertNotNull(ctxt.allocNameCopyBuffer(100));\ntry {\nctxt.allocNameCopyBuffer(100);\n} catch (IllegalStateException e) {\nverifyException(e, \"second time\");\n}\ntry {\nctxt.releaseNameCopyBuffer(new char[1]);\n} catch (IllegalArgumentException e) {\nverifyException(e, \"smaller than original\");\n}\nctxt.releaseNameCopyBuffer(null);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: Expected an exception with one of substrings ([smaller than original]): got one with message \"Trying to release buffer not owned by the context\"\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.TestCase.fail(TestCase.java:227)\nat com.fasterxml.jackson.core.BaseTest.verifyException(BaseTest.java:390)\nat com.fasterxml.jackson.core.io.TestIOContext.testAllocations(TestIOContext.java:27)",
    "covered_methods": [
        {
            "method_signature": "com.fasterxml.jackson.core.util.BufferRecycler:<clinit>()V",
            "method_body": "public final static int BYTE_READ_IO_BUFFER = 0;\n\n/**\n* Buffer used for temporarily storing encoded content; used\n* for example by UTF-8 encoding writer\n*/\npublic final static int BYTE_WRITE_ENCODING_BUFFER = 1;\n\n/**\n* Buffer used for temporarily concatenating output; used for\n* example when requesting output as byte array.\n*/\npublic final static int BYTE_WRITE_CONCAT_BUFFER = 2;\n\n/**\n* Buffer used for concatenating binary data that is either being\n* encoded as base64 output, or decoded from base64 input.\n*\n* @since 2.1\n*/\npublic final static int BYTE_BASE64_CODEC_BUFFER = 3;\n\npublic final static int CHAR_TOKEN_BUFFER = 0;  // Tokenizable input\npublic final static int CHAR_CONCAT_BUFFER = 1; // concatenated output\npublic final static int CHAR_TEXT_BUFFER = 2; // Text content from input\npublic final static int CHAR_NAME_COPY_BUFFER = 3; // Temporary buffer for getting name characters\n\n// Buffer lengths, defined in 2.4 (smaller before that)\n\nprivate final static int[] BYTE_BUFFER_LENGTHS = new int[] { 8000, 8000, 2000, 2000 };",
            "method_id": 0,
            "loc": 30
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.BufferRecycler:allocByteBuffer(II)[B",
            "method_body": "public byte[] allocByteBuffer(int ix, int minSize) {\nfinal int DEF_SIZE = byteBufferLength(ix);\nif (minSize < DEF_SIZE) {\nminSize = DEF_SIZE;\n}\nbyte[] buffer = _byteBuffers[ix];\nif (buffer == null || buffer.length < minSize) {\nbuffer = balloc(minSize);\n} else {\n_byteBuffers[ix] = null;\n}\nreturn buffer;\n}",
            "method_id": 1,
            "loc": 13
        },
        {
            "method_signature": "com.fasterxml.jackson.core.io.IOContext:releaseReadIOBuffer([B)V",
            "method_body": "public void releaseReadIOBuffer(byte[] buf) {\nif (buf != null) {\n/* Let's do sanity checks to ensure once-and-only-once release,\n* as well as avoiding trying to release buffers not owned\n*/\n_verifyRelease(buf, _readIOBuffer);\n_readIOBuffer = null;\n_bufferRecycler.releaseByteBuffer(BufferRecycler.BYTE_READ_IO_BUFFER, buf);\n}\n}",
            "method_id": 2,
            "loc": 10
        },
        {
            "method_signature": "com.fasterxml.jackson.core.io.IOContext:<init>(Lcom/fasterxml/jackson/core/util/BufferRecycler;Ljava/lang/Object;Z)V",
            "method_body": "public IOContext(BufferRecycler br, Object sourceRef, boolean managedResource)\n{\n_bufferRecycler = br;\n_sourceRef = sourceRef;\n_managedResource = managedResource;\n}",
            "method_id": 3,
            "loc": 6
        },
        {
            "method_signature": "com.fasterxml.jackson.core.io.IOContext:wrongBuf()Ljava/lang/IllegalArgumentException;",
            "method_body": "private IllegalArgumentException wrongBuf() {\n// sanity check failed; trying to return different, smaller buffer.\nreturn new IllegalArgumentException(\"Trying to release buffer not owned by the context\");\n}",
            "method_id": 4,
            "loc": 4
        },
        {
            "method_signature": "com.fasterxml.jackson.core.io.IOContext:_verifyRelease([B[B)V",
            "method_body": "protected final void _verifyRelease(byte[] toRelease, byte[] src) {\n// 07-Mar-2016, tatu: As per [core#255], only prevent shrinking of buffer\nif ((toRelease != src) && (toRelease.length <= src.length)) { throw wrongBuf(); }\n}",
            "method_id": 5,
            "loc": 4
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.BufferRecycler:<init>(II)V",
            "method_body": "protected BufferRecycler(int bbCount, int cbCount) {\n_byteBuffers = new byte[bbCount][];\n_charBuffers = new char[cbCount][];\n}",
            "method_id": 6,
            "loc": 4
        },
        {
            "method_signature": "com.fasterxml.jackson.core.io.IOContext:allocReadIOBuffer()[B",
            "method_body": "public byte[] allocReadIOBuffer() {\n_verifyAlloc(_readIOBuffer);\nreturn (_readIOBuffer = _bufferRecycler.allocByteBuffer(BufferRecycler.BYTE_READ_IO_BUFFER));\n}",
            "method_id": 7,
            "loc": 4
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.BufferRecycler:<init>()V",
            "method_body": "public BufferRecycler() {\nthis(4, 4);\n}",
            "method_id": 8,
            "loc": 3
        },
        {
            "method_signature": "com.fasterxml.jackson.core.io.IOContext:_verifyAlloc(Ljava/lang/Object;)V",
            "method_body": "protected final void _verifyAlloc(Object buffer) {\nif (buffer != null) { throw new IllegalStateException(\"Trying to call same allocXxx() method second time\"); }\n}",
            "method_id": 9,
            "loc": 3
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.BufferRecycler:allocByteBuffer(I)[B",
            "method_body": "public final byte[] allocByteBuffer(int ix) {\nreturn allocByteBuffer(ix, 0);\n}",
            "method_id": 10,
            "loc": 3
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.BufferRecycler:byteBufferLength(I)I",
            "method_body": "protected int byteBufferLength(int ix) {\nreturn BYTE_BUFFER_LENGTHS[ix];\n}",
            "method_id": 11,
            "loc": 3
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.BufferRecycler:balloc(I)[B",
            "method_body": "protected byte[] balloc(int size) { return new byte[size]; }\nprotected byte[] balloc(int size) { return new byte[size]; }",
            "method_id": 12,
            "loc": 2
        }
    ]
}
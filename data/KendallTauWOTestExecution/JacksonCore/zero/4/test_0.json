{
    "bug_id": 4,
    "test_id": 0,
    "test_name": "com.fasterxml.jackson.core.util.TestTextBuffer.testExpand",
    "test_body": "public void testExpand()\n{\nTextBuffer tb = new TextBuffer(new BufferRecycler());\nchar[] buf = tb.getCurrentSegment();\nwhile (buf.length < 500 * 1000) {\nchar[] old = buf;\nbuf = tb.expandCurrentSegment();\nif (old.length >= buf.length) {\nfail(\"Expected buffer of \"+old.length+\" to expand, did not, length now \"+buf.length);\n}\n}\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: Expected buffer of 262145 to expand, did not, length now 262144\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.TestCase.fail(TestCase.java:227)\nat com.fasterxml.jackson.core.util.TestTextBuffer.testExpand(TestTextBuffer.java:76)",
    "covered_methods": [
        {
            "method_signature": "com.fasterxml.jackson.core.util.BufferRecycler:allocCharBuffer(II)[C",
            "method_body": "public char[] allocCharBuffer(int ix, int minSize) {\nfinal int DEF_SIZE = charBufferLength(ix);\nif (minSize < DEF_SIZE) {\nminSize = DEF_SIZE;\n}\nchar[] buffer = _charBuffers[ix];\nif (buffer == null || buffer.length < minSize) {\nbuffer = calloc(minSize);\n} else {\n_charBuffers[ix] = null;\n}\nreturn buffer;\n}",
            "method_id": 0
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.TextBuffer:unshare(I)V",
            "method_body": "private void unshare(int needExtra)\n{\nint sharedLen = _inputLen;\n_inputLen = 0;\nchar[] inputBuf = _inputBuffer;\n_inputBuffer = null;\nint start = _inputStart;\n_inputStart = -1;\n\n// Is buffer big enough, or do we need to reallocate?\nint needed = sharedLen+needExtra;\nif (_currentSegment == null || needed > _currentSegment.length) {\n_currentSegment = buf(needed);\n}\nif (sharedLen > 0) {\nSystem.arraycopy(inputBuf, start, _currentSegment, 0, sharedLen);\n}\n_segmentSize = 0;\n_currentSize = sharedLen;\n}",
            "method_id": 1
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.TextBuffer:getCurrentSegment()[C",
            "method_body": "public char[] getCurrentSegment()\n{\n/* Since the intention of the caller is to directly add stuff into\n* buffers, we should NOT have anything in shared buffer... ie. may\n* need to unshare contents.\n*/\nif (_inputStart >= 0) {\nunshare(1);\n} else {\nchar[] curr = _currentSegment;\nif (curr == null) {\n_currentSegment = buf(0);\n} else if (_currentSize >= curr.length) {\n// Plus, we better have room for at least one more char\nexpand(1);\n}\n}\nreturn _currentSegment;\n}",
            "method_id": 2
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.TextBuffer:buf(I)[C",
            "method_body": "private char[] buf(int needed)\n{\nif (_allocator != null) {\nreturn _allocator.allocCharBuffer(BufferRecycler.CHAR_TEXT_BUFFER, needed);\n}\nreturn new char[Math.max(needed, MIN_SEGMENT_LEN)];\n}",
            "method_id": 3
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.BufferRecycler:charBufferLength(I)I",
            "method_body": "protected int charBufferLength(int ix) {\nreturn CHAR_BUFFER_LENGTHS[ix];\n}",
            "method_id": 4
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.BufferRecycler:<clinit>()V",
            "method_body": "public final static int BYTE_READ_IO_BUFFER = 0;\n\n/**\n* Buffer used for temporarily storing encoded content; used\n* for example by UTF-8 encoding writer\n*/\npublic final static int BYTE_WRITE_ENCODING_BUFFER = 1;\n\n/**\n* Buffer used for temporarily concatenating output; used for\n* example when requesting output as byte array.\n*/\npublic final static int BYTE_WRITE_CONCAT_BUFFER = 2;\n\n/**\n* Buffer used for concatenating binary data that is either being\n* encoded as base64 output, or decoded from base64 input.\n*\n* @since 2.1\n*/\npublic final static int BYTE_BASE64_CODEC_BUFFER = 3;\n\npublic final static int CHAR_TOKEN_BUFFER = 0;  // Tokenizable input\npublic final static int CHAR_CONCAT_BUFFER = 1; // concatenated output\npublic final static int CHAR_TEXT_BUFFER = 2; // Text content from input\npublic final static int CHAR_NAME_COPY_BUFFER = 3; // Temporary buffer for getting name characters\n\n// Buffer lengths, defined in 2.4 (smaller before that)\n\nprivate final static int[] BYTE_BUFFER_LENGTHS = new int[] { 8000, 8000, 2000, 2000 };",
            "method_id": 5
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.TextBuffer:expandCurrentSegment()[C",
            "method_body": "public char[] expandCurrentSegment()\n{\nfinal char[] curr = _currentSegment;\n// Let's grow by 50% by default\nfinal int len = curr.length;\n// but above intended maximum, slow to increase by 25%\nint newLen = (len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN+1) : Math.min(MAX_SEGMENT_LEN, len + (len >> 1));\nreturn (_currentSegment = Arrays.copyOf(curr, newLen));\n}",
            "method_id": 6
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.BufferRecycler:calloc(I)[C",
            "method_body": "protected char[] calloc(int size) { return new char[size]; }\nprotected char[] calloc(int size) { return new char[size]; }",
            "method_id": 7
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.TextBuffer:<clinit>()V",
            "method_body": "final static char[] NO_CHARS = new char[0];\n\n/**\n* Let's start with sizable but not huge buffer, will grow as necessary\n*/\nfinal static int MIN_SEGMENT_LEN = 1000;\n\n/**\n* Let's limit maximum segment length to something sensible\n* like 256k\n*/\nfinal static int MAX_SEGMENT_LEN = 0x40000;\n\n/*\n/**********************************************************\n/* Configuration:\n/**********************************************************\n*/\n\nprivate final BufferRecycler _allocator;\n\n/*\n/**********************************************************\n/* Shared input buffers\n/**********************************************************\n*/\n\n/**\n* Shared input buffer; stored here in case some input can be returned\n* as is, without being copied to collector's own buffers. Note that\n* this is read-only for this Object.\n*/\nprivate char[] _inputBuffer;\n\n/**\n* Character offset of first char in input buffer; -1 to indicate\n* that input buffer currently does not contain any useful char data\n*/\nprivate int _inputStart;\n\nprivate int _inputLen;\n\n/*\n/**********************************************************\n/* Aggregation segments (when not using input buf)\n/**********************************************************\n*/\n\n/**\n* List of segments prior to currently active segment.\n*/\nprivate ArrayList<char[]> _segments;\n\n/**\n* Flag that indicates whether _seqments is non-empty\n*/\nprivate boolean _hasSegments = false;\n\n// // // Currently used segment; not (yet) contained in _seqments\n\n/**\n* Amount of characters in segments in {@link _segments}",
            "method_id": 8
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.TextBuffer:<init>(Lcom/fasterxml/jackson/core/util/BufferRecycler;)V",
            "method_body": "public TextBuffer(BufferRecycler allocator) {\n_allocator = allocator;\n}",
            "method_id": 9
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.BufferRecycler:<init>()V",
            "method_body": "public BufferRecycler() {\nthis(4, 4);\n}",
            "method_id": 10
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.BufferRecycler:<init>(II)V",
            "method_body": "protected BufferRecycler(int bbCount, int cbCount) {\n_byteBuffers = new byte[bbCount][];\n_charBuffers = new char[cbCount][];\n}",
            "method_id": 11
        }
    ]
}
{
    "bug_id": 19,
    "test_id": 0,
    "test_name": "com.fasterxml.jackson.core.json.TestNumericValues.testLongerFloatingPoint",
    "test_body": "public void testLongerFloatingPoint() throws Exception\n{\nStringBuilder input = new StringBuilder();\nfor (int i = 1; i < 201; i++) {\ninput.append(1);\n}\ninput.append(\".0\");\nfinal String DOC = input.toString();\n// test out with both Reader and ByteArrayInputStream\nJsonParser p;\np = FACTORY.createParser(new StringReader(DOC));\n_testLongerFloat(p, DOC);\np.close();\np = FACTORY.createParser(new ByteArrayInputStream(DOC.getBytes(\"UTF-8\")));\n_testLongerFloat(p, DOC);\np.close();\n}\n",
    "stack_trace": "java.lang.ArrayIndexOutOfBoundsException: 200\nat com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseNumber2(ReaderBasedJsonParser.java:1418)\nat com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseFloat(ReaderBasedJsonParser.java:1266)\nat com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parsePosNumber(ReaderBasedJsonParser.java:1241)\nat com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextToken(ReaderBasedJsonParser.java:705)\nat com.fasterxml.jackson.core.json.TestNumericValues._testLongerFloat(TestNumericValues.java:580)\nat com.fasterxml.jackson.core.json.TestNumericValues.testLongerFloatingPoint(TestNumericValues.java:570)",
    "covered_methods": [
        {
            "method_signature": "com.fasterxml.jackson.core.JsonToken:<init>(Ljava/lang/String;ILjava/lang/String;I)V",
            "method_body": "JsonToken(String token, int id)\n{\nif (token == null) {\n_serialized = null;\n_serializedChars = null;\n_serializedBytes = null;\n} else {\n_serialized = token;\n_serializedChars = token.toCharArray();\n// It's all in ascii, can just case...\nint len = _serializedChars.length;\n_serializedBytes = new byte[len];\nfor (int i = 0; i < len; ++i) {\n_serializedBytes[i] = (byte) _serializedChars[i];\n}\n}\n_id = id;\n\n_isBoolean = (id == JsonTokenId.ID_FALSE || id == JsonTokenId.ID_TRUE);\n_isNumber = (id == JsonTokenId.ID_NUMBER_INT || id == JsonTokenId.ID_NUMBER_FLOAT);\n\n_isStructStart = (id == JsonTokenId.ID_START_OBJECT || id == JsonTokenId.ID_START_ARRAY);\n_isStructEnd = (id == JsonTokenId.ID_END_OBJECT || id == JsonTokenId.ID_END_ARRAY);\n\n_isScalar = !_isStructStart && !_isStructEnd\n&& (id != JsonTokenId.ID_FIELD_NAME)\n&& (id != JsonTokenId.ID_NOT_AVAILABLE);\n}",
            "method_id": 0
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.JsonReadContext:expectComma()Z",
            "method_body": "public boolean expectComma() {\n/* Assumption here is that we will be getting a value (at least\n* before calling this method again), and\n* so will auto-increment index to avoid having to do another call\n*/\nint ix = ++_index; // starts from -1\nreturn (_type != TYPE_ROOT && ix > 0);\n}",
            "method_id": 1
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.JsonReadContext:createRootContext(Lcom/fasterxml/jackson/core/json/DupDetector;)Lcom/fasterxml/jackson/core/json/JsonReadContext;",
            "method_body": "public static JsonReadContext createRootContext(DupDetector dups) {\nreturn new JsonReadContext(null, dups, TYPE_ROOT, 1, 0);\n}",
            "method_id": 2
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.JsonReadContext:<init>(Lcom/fasterxml/jackson/core/json/JsonReadContext;Lcom/fasterxml/jackson/core/json/DupDetector;III)V",
            "method_body": "public JsonReadContext(JsonReadContext parent, DupDetector dups, int type, int lineNr, int colNr) {\nsuper();\n_parent = parent;\n_dups = dups;\n_type = type;\n_lineNr = lineNr;\n_columnNr = colNr;\n_index = -1;\n}",
            "method_id": 3
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.TextBuffer:emptyAndGetCurrentSegment()[C",
            "method_body": "public char[] emptyAndGetCurrentSegment()\n{\n// inlined 'resetWithEmpty()'\n_inputStart = -1; // indicates shared buffer not used\n_currentSize = 0;\n_inputLen = 0;\n\n_inputBuffer = null;\n_resultString = null;\n_resultArray = null;\n\n// And then reset internal input buffers, if necessary:\nif (_hasSegments) {\nclearSegments();\n}\nchar[] curr = _currentSegment;\nif (curr == null) {\n_currentSegment = curr = buf(0);\n}\nreturn curr;\n}",
            "method_id": 4
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.TextBuffer:buf(I)[C",
            "method_body": "private char[] buf(int needed)\n{\nif (_allocator != null) {\nreturn _allocator.allocCharBuffer(BufferRecycler.CHAR_TEXT_BUFFER, needed);\n}\nreturn new char[Math.max(needed, MIN_SEGMENT_LEN)];\n}",
            "method_id": 5
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.TextBuffer:<clinit>()V",
            "method_body": "final static char[] NO_CHARS = new char[0];\n\n/**\n* Let's start with sizable but not huge buffer, will grow as necessary\n*/\nfinal static int MIN_SEGMENT_LEN = 1000;\n\n/**\n* Let's limit maximum segment length to something sensible\n* like 256k\n*/\nfinal static int MAX_SEGMENT_LEN = 0x40000;\n\n/*\n/**********************************************************\n/* Configuration:\n/**********************************************************\n*/\n\nprivate final BufferRecycler _allocator;\n\n/*\n/**********************************************************\n/* Shared input buffers\n/**********************************************************\n*/\n\n/**\n* Shared input buffer; stored here in case some input can be returned\n* as is, without being copied to collector's own buffers. Note that\n* this is read-only for this Object.\n*/\nprivate char[] _inputBuffer;\n\n/**\n* Character offset of first char in input buffer; -1 to indicate\n* that input buffer currently does not contain any useful char data\n*/\nprivate int _inputStart;\n\nprivate int _inputLen;\n\n/*\n/**********************************************************\n/* Aggregation segments (when not using input buf)\n/**********************************************************\n*/\n\n/**\n* List of segments prior to currently active segment.\n*/\nprivate ArrayList<char[]> _segments;\n\n/**\n* Flag that indicates whether _seqments is non-empty\n*/\nprivate boolean _hasSegments;\n\n// // // Currently used segment; not (yet) contained in _seqments\n\n/**\n* Amount of characters in segments in {@link _segments}",
            "method_id": 6
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.TextBuffer:<init>(Lcom/fasterxml/jackson/core/util/BufferRecycler;)V",
            "method_body": "public TextBuffer(BufferRecycler allocator) {\n_allocator = allocator;\n}",
            "method_id": 7
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser:_updateLocation()V",
            "method_body": "private final void _updateLocation()\n{\nint ptr = _inputPtr;\n_tokenInputTotal = _currInputProcessed + ptr;\n_tokenInputRow = _currInputRow;\n_tokenInputCol = ptr - _currInputRowStart;\n}",
            "method_id": 8
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser:_skipWSOrEnd()I",
            "method_body": "private final void _isNextTokenNameYes(int i) throws IOException\n{\n_currToken = JsonToken.FIELD_NAME;\n_updateLocation();\n\nswitch (i) {\ncase '\"':\n_tokenIncomplete = true;\n_nextToken = JsonToken.VALUE_STRING;\nreturn;\ncase '[':\n_nextToken = JsonToken.START_ARRAY;\nreturn;\ncase '{':\n_nextToken = JsonToken.START_OBJECT;\nreturn;\ncase 't':\n_matchToken(\"true\", 1);\n_nextToken = JsonToken.VALUE_TRUE;\nreturn;\ncase 'f':\n_matchToken(\"false\", 1);\n_nextToken = JsonToken.VALUE_FALSE;\nreturn;\ncase 'n':\n_matchToken(\"null\", 1);\n_nextToken = JsonToken.VALUE_NULL;\nreturn;\ncase '-':\n_nextToken = _parseNegNumber();\nreturn;\ncase '0':\ncase '1':\ncase '2':\ncase '3':\ncase '4':\ncase '5':\ncase '6':\ncase '7':\ncase '8':\ncase '9':\n_nextToken = _parsePosNumber(i);\nreturn;\n}\n_nextToken = _handleOddValue(i);\n}\n\nprotected boolean _isNextTokenNameMaybe(int i, String nameToMatch) throws IOException\n{\n// // // and this is back to standard nextToken()\nString name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);\n_parsingContext.setCurrentName(name);\n_currToken = JsonToken.FIELD_NAME;\ni = _skipColon();\n_updateLocation();\nif (i == INT_QUOTE) {\n_tokenIncomplete = true;\n_nextToken = JsonToken.VALUE_STRING;\nreturn nameToMatch.equals(name);\n}\n// Ok: we must have a value... what is it?\nJsonToken t;\nswitch (i) {\ncase '-':\nt = _parseNegNumber();\nbreak;\ncase '0':\ncase '1':\ncase '2':\ncase '3':\ncase '4':\ncase '5':\ncase '6':\ncase '7':\ncase '8':\ncase '9':\nt = _parsePosNumber(i);\nbreak;\ncase 'f':\n_matchFalse();\nt = JsonToken.VALUE_FALSE;\nbreak;\ncase 'n':\n_matchNull();\nt = JsonToken.VALUE_NULL;\nbreak;\ncase 't':\n_matchTrue();\nt = JsonToken.VALUE_TRUE;\nbreak;\ncase '[':\nt = JsonToken.START_ARRAY;\nbreak;\ncase '{':\nt = JsonToken.START_OBJECT;\nbreak;\ndefault:\nt = _handleOddValue(i);\nbreak;\n}\n_nextToken = t;\nreturn nameToMatch.equals(name);\n}\n\nprivate final JsonToken _nextTokenNotInObject(int i) throws IOException\n{\nif (i == INT_QUOTE) {\n_tokenIncomplete = true;\nreturn (_currToken = JsonToken.VALUE_STRING);\n}\nswitch (i) {\ncase '[':\n_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\nreturn (_currToken = JsonToken.START_ARRAY);\ncase '{':\n_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\nreturn (_currToken = JsonToken.START_OBJECT);\ncase 't':\n_matchToken(\"true\", 1);\nreturn (_currToken = JsonToken.VALUE_TRUE);\ncase 'f':\n_matchToken(\"false\", 1);\nreturn (_currToken = JsonToken.VALUE_FALSE);\ncase 'n':\n_matchToken(\"null\", 1);\nreturn (_currToken = JsonToken.VALUE_NULL);\ncase '-':\nreturn (_currToken = _parseNegNumber());\n/* Should we have separate handling for plus? Although\n* it is not allowed per se, it may be erroneously used,\n* and could be indicated by a more specific error message.\n*/\ncase '0':\ncase '1':\ncase '2':\ncase '3':\ncase '4':\ncase '5':\ncase '6':\ncase '7':\ncase '8':\ncase '9':\nreturn (_currToken = _parsePosNumber(i));\n}\nreturn (_currToken = _handleOddValue(i));\n}\n\n// note: identical to one in UTF8StreamJsonParser\n@Override\npublic final String nextTextValue() throws IOException\n{\nif (_currToken == JsonToken.FIELD_NAME) { // mostly copied from '_nextAfterName'\n_nameCopied = false;\nJsonToken t = _nextToken;\n_nextToken = null;\n_currToken = t;\nif (t == JsonToken.VALUE_STRING) {\nif (_tokenIncomplete) {\n_tokenIncomplete = false;\n_finishString();\n}\nreturn _textBuffer.contentsAsString();\n}\nif (t == JsonToken.START_ARRAY) {\n_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n} else if (t == JsonToken.START_OBJECT) {\n_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n}\nreturn null;\n}\n// !!! TODO: optimize this case as well\nreturn (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;\n}\n\n// note: identical to one in Utf8StreamParser\n@Override\npublic final int nextIntValue(int defaultValue) throws IOException\n{\nif (_currToken == JsonToken.FIELD_NAME) {\n_nameCopied = false;\nJsonToken t = _nextToken;\n_nextToken = null;\n_currToken = t;\nif (t == JsonToken.VALUE_NUMBER_INT) {\nreturn getIntValue();\n}\nif (t == JsonToken.START_ARRAY) {\n_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n} else if (t == JsonToken.START_OBJECT) {\n_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n}\nreturn defaultValue;\n}\n// !!! TODO: optimize this case as well\nreturn (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;\n}\n\n// note: identical to one in Utf8StreamParser\n@Override\npublic final long nextLongValue(long defaultValue) throws IOException\n{\nif (_currToken == JsonToken.FIELD_NAME) { // mostly copied from '_nextAfterName'\n_nameCopied = false;\nJsonToken t = _nextToken;\n_nextToken = null;\n_currToken = t;\nif (t == JsonToken.VALUE_NUMBER_INT) {\nreturn getLongValue();\n}\nif (t == JsonToken.START_ARRAY) {\n_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n} else if (t == JsonToken.START_OBJECT) {\n_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n}\nreturn defaultValue;\n}\n// !!! TODO: optimize this case as well\nreturn (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;\n}\n\n// note: identical to one in UTF8StreamJsonParser\n@Override\npublic final Boolean nextBooleanValue() throws IOException\n{\nif (_currToken == JsonToken.FIELD_NAME) { // mostly copied from '_nextAfterName'\n_nameCopied = false;\nJsonToken t = _nextToken;\n_nextToken = null;\n_currToken = t;\nif (t == JsonToken.VALUE_TRUE) {\nreturn Boolean.TRUE;\n}\nif (t == JsonToken.VALUE_FALSE) {\nreturn Boolean.FALSE;\n}\nif (t == JsonToken.START_ARRAY) {\n_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n} else if (t == JsonToken.START_OBJECT) {\n_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n}\nreturn null;\n}\nJsonToken t = nextToken();\nif (t != null) {\nint id = t.id();\nif (id == ID_TRUE) return Boolean.TRUE;\nif (id == ID_FALSE) return Boolean.FALSE;\n}\nreturn null;\n}\n\n/*\n/**********************************************************\n/* Internal methods, number parsing\n/**********************************************************\n*/\n\n/**\n* Initial parsing method for number values. It needs to be able\n* to parse enough input to be able to determine whether the\n* value is to be considered a simple integer value, or a more\n* generic decimal value: latter of which needs to be expressed\n* as a floating point number. The basic rule is that if the number\n* has no fractional or exponential part, it is an integer; otherwise\n* a floating point number.\n*<p>\n* Because much of input has to be processed in any case, no partial\n* parsing is done: all input text will be stored for further\n* processing. However, actual numeric value conversion will be\n* deferred, since it is usually the most complicated and costliest\n* part of processing.\n*/\nprotected final JsonToken _parsePosNumber(int ch) throws IOException\n{\n/* Although we will always be complete with respect to textual\n* representation (that is, all characters will be parsed),\n* actual conversion to a number is deferred. Thus, need to\n* note that no representations are valid yet\n*/\nint ptr = _inputPtr;\nint startPtr = ptr-1; // to include digit already read\nfinal int inputLen = _inputEnd;\n\n// One special case, leading zero(es):\nif (ch == INT_0) {\nreturn _parseNumber2(false, startPtr);\n}\n\n/* First, let's see if the whole number is contained within\n* the input buffer unsplit. This should be the common case;\n* and to simplify processing, we will just reparse contents\n* in the alternative case (number split on buffer boundary)\n*/\n\nint intLen = 1; // already got one\n\n// First let's get the obligatory integer part:\nint_loop:\nwhile (true) {\nif (ptr >= inputLen) {\n_inputPtr = startPtr;\nreturn _parseNumber2(false, startPtr);\n}\nch = (int) _inputBuffer[ptr++];\nif (ch < INT_0 || ch > INT_9) {\nbreak int_loop;\n}\n++intLen;\n}\nif (ch == INT_PERIOD || ch == INT_e || ch == INT_E) {\n_inputPtr = ptr;\nreturn _parseFloat(ch, startPtr, ptr, false, intLen);\n}\n// Got it all: let's add to text buffer for parsing, access\n--ptr; // need to push back following separator\n_inputPtr = ptr;\n// As per #105, need separating space between root values; check here\nif (_parsingContext.inRoot()) {\n_verifyRootSpace(ch);\n}\nint len = ptr-startPtr;\n_textBuffer.resetWithShared(_inputBuffer, startPtr, len);\nreturn resetInt(false, intLen);\n}\n\nprivate final JsonToken _parseFloat(int ch, int startPtr, int ptr, boolean neg, int intLen)\nthrows IOException\n{\nfinal int inputLen = _inputEnd;\nint fractLen = 0;\n\n// And then see if we get other parts\nif (ch == '.') { // yes, fraction\nfract_loop:\nwhile (true) {\nif (ptr >= inputLen) {\nreturn _parseNumber2(neg, startPtr);\n}\nch = (int) _inputBuffer[ptr++];\nif (ch < INT_0 || ch > INT_9) {\nbreak fract_loop;\n}\n++fractLen;\n}\n// must be followed by sequence of ints, one minimum\nif (fractLen == 0) {\nreportUnexpectedNumberChar(ch, \"Decimal point not followed by a digit\");\n}\n}\nint expLen = 0;\nif (ch == 'e' || ch == 'E') { // and/or exponent\nif (ptr >= inputLen) {\n_inputPtr = startPtr;\nreturn _parseNumber2(neg, startPtr);\n}\n// Sign indicator?\nch = (int) _inputBuffer[ptr++];\nif (ch == INT_MINUS || ch == INT_PLUS) { // yup, skip for now\nif (ptr >= inputLen) {\n_inputPtr = startPtr;\nreturn _parseNumber2(neg, startPtr);\n}\nch = (int) _inputBuffer[ptr++];\n}\nwhile (ch <= INT_9 && ch >= INT_0) {\n++expLen;\nif (ptr >= inputLen) {\n_inputPtr = startPtr;\nreturn _parseNumber2(neg, startPtr);\n}\nch = (int) _inputBuffer[ptr++];\n}\n// must be followed by sequence of ints, one minimum\nif (expLen == 0) {\nreportUnexpectedNumberChar(ch, \"Exponent indicator not followed by a digit\");\n}\n}\n--ptr; // need to push back following separator\n_inputPtr = ptr;\n// As per #105, need separating space between root values; check here\nif (_parsingContext.inRoot()) {\n_verifyRootSpace(ch);\n}\nint len = ptr-startPtr;\n_textBuffer.resetWithShared(_inputBuffer, startPtr, len);\n// And there we have it!\nreturn resetFloat(neg, intLen, fractLen, expLen);\n}\n\nprotected final JsonToken _parseNegNumber() throws IOException\n{\nint ptr = _inputPtr;\nint startPtr = ptr-1; // to include sign/digit already read\nfinal int inputLen = _inputEnd;\n\nif (ptr >= inputLen) {\nreturn _parseNumber2(true, startPtr);\n}\nint ch = _inputBuffer[ptr++];\n// First check: must have a digit to follow minus sign\nif (ch > INT_9 || ch < INT_0) {\n_inputPtr = ptr;\nreturn _handleInvalidNumberStart(ch, true);\n}\n// One special case, leading zero(es):\nif (ch == INT_0) {\nreturn _parseNumber2(true, startPtr);\n}\nint intLen = 1; // already got one\n\n// First let's get the obligatory integer part:\nint_loop:\nwhile (true) {\nif (ptr >= inputLen) {\nreturn _parseNumber2(true, startPtr);\n}\nch = (int) _inputBuffer[ptr++];\nif (ch < INT_0 || ch > INT_9) {\nbreak int_loop;\n}\n++intLen;\n}\n\nif (ch == INT_PERIOD || ch == INT_e || ch == INT_E) {\n_inputPtr = ptr;\nreturn _parseFloat(ch, startPtr, ptr, true, intLen);\n}\n--ptr;\n_inputPtr = ptr;\nif (_parsingContext.inRoot()) {\n_verifyRootSpace(ch);\n}\nint len = ptr-startPtr;\n_textBuffer.resetWithShared(_inputBuffer, startPtr, len);\nreturn resetInt(true, intLen);\n}\n\n/**\n* Method called to parse a number, when the primary parse\n* method has failed to parse it, due to it being split on\n* buffer boundary. As a result code is very similar, except\n* that it has to explicitly copy contents to the text buffer\n* instead of just sharing the main input buffer.\n*/\nprivate final JsonToken _parseNumber2(boolean neg, int startPtr) throws IOException\n{\n_inputPtr = neg ? (startPtr+1) : startPtr;\nchar[] outBuf = _textBuffer.emptyAndGetCurrentSegment();\nint outPtr = 0;\n\n// Need to prepend sign?\nif (neg) {\noutBuf[outPtr++] = '-';\n}\n\n// This is the place to do leading-zero check(s) too:\nint intLen = 0;\nchar c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++] : getNextChar(\"No digit following minus sign\");\nif (c == '0') {\nc = _verifyNoLeadingZeroes();\n}\nboolean eof = false;\n\n// Ok, first the obligatory integer part:\nint_loop:\nwhile (c >= '0' && c <= '9') {\n++intLen;\nif (outPtr >= outBuf.length) {\noutBuf = _textBuffer.finishCurrentSegment();\noutPtr = 0;\n}\noutBuf[outPtr++] = c;\nif (_inputPtr >= _inputEnd && !loadMore()) {\n// EOF is legal for main level int values\nc = CHAR_NULL;\neof = true;\nbreak int_loop;\n}\nc = _inputBuffer[_inputPtr++];\n}\n// Also, integer part is not optional\nif (intLen == 0) {\nreturn _handleInvalidNumberStart(c, neg);\n}\n\nint fractLen = 0;\n// And then see if we get other parts\nif (c == '.') { // yes, fraction\noutBuf[outPtr++] = c;\n\nfract_loop:\nwhile (true) {\nif (_inputPtr >= _inputEnd && !loadMore()) {\neof = true;\nbreak fract_loop;\n}\nc = _inputBuffer[_inputPtr++];\nif (c < INT_0 || c > INT_9) {\nbreak fract_loop;\n}\n++fractLen;\nif (outPtr >= outBuf.length) {\noutBuf = _textBuffer.finishCurrentSegment();\noutPtr = 0;\n}\noutBuf[outPtr++] = c;\n}\n// must be followed by sequence of ints, one minimum\nif (fractLen == 0) {\nreportUnexpectedNumberChar(c, \"Decimal point not followed by a digit\");\n}\n}\n\nint expLen = 0;\nif (c == 'e' || c == 'E') { // exponent?\nif (outPtr >= outBuf.length) {\noutBuf = _textBuffer.finishCurrentSegment();\noutPtr = 0;\n}\noutBuf[outPtr++] = c;\n// Not optional, can require that we get one more char\nc = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++]\n: getNextChar(\"expected a digit for number exponent\");\n// Sign indicator?\nif (c == '-' || c == '+') {\nif (outPtr >= outBuf.length) {\noutBuf = _textBuffer.finishCurrentSegment();\noutPtr = 0;\n}\noutBuf[outPtr++] = c;\n// Likewise, non optional:\nc = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++]\n: getNextChar(\"expected a digit for number exponent\");\n}\n\nexp_loop:\nwhile (c <= INT_9 && c >= INT_0) {\n++expLen;\nif (outPtr >= outBuf.length) {\noutBuf = _textBuffer.finishCurrentSegment();\noutPtr = 0;\n}\noutBuf[outPtr++] = c;\nif (_inputPtr >= _inputEnd && !loadMore()) {\neof = true;\nbreak exp_loop;\n}\nc = _inputBuffer[_inputPtr++];\n}\n// must be followed by sequence of ints, one minimum\nif (expLen == 0) {\nreportUnexpectedNumberChar(c, \"Exponent indicator not followed by a digit\");\n}\n}\n\n// Ok; unless we hit end-of-input, need to push last char read back\nif (!eof) {\n--_inputPtr;\nif (_parsingContext.inRoot()) {\n_verifyRootSpace(c);\n}\n}\n_textBuffer.setCurrentLength(outPtr);\n// And there we have it!\nreturn reset(neg, intLen, fractLen, expLen);\n}\n\n/**\n* Method called when we have seen one zero, and want to ensure\n* it is not followed by another\n*/\nprivate final char _verifyNoLeadingZeroes() throws IOException\n{\n// Fast case first:\nif (_inputPtr < _inputEnd) {\nchar ch = _inputBuffer[_inputPtr];\n// if not followed by a number (probably '.'); return zero as is, to be included\nif (ch < '0' || ch > '9') {\nreturn '0';\n}\n}\n// and offline the less common case\nreturn _verifyNLZ2();\n}\n\nprivate char _verifyNLZ2() throws IOException\n{\nif (_inputPtr >= _inputEnd && !loadMore()) {\nreturn '0';\n}\nchar ch = _inputBuffer[_inputPtr];\nif (ch < '0' || ch > '9') {\nreturn '0';\n}\nif (!isEnabled(Feature.ALLOW_NUMERIC_LEADING_ZEROS)) {\nreportInvalidNumber(\"Leading zeroes not allowed\");\n}\n// if so, just need to skip either all zeroes (if followed by number); or all but one (if non-number)\n++_inputPtr; // Leading zero to be skipped\nif (ch == INT_0) {\nwhile (_inputPtr < _inputEnd || loadMore()) {\nch = _inputBuffer[_inputPtr];\nif (ch < '0' || ch > '9') { // followed by non-number; retain one zero\nreturn '0';\n}\n++_inputPtr; // skip previous zero\nif (ch != '0') { // followed by other number; return\nbreak;\n}\n}\n}\nreturn ch;\n}\n\n/**\n* Method called if expected numeric value (due to leading sign) does not\n* look like a number\n*/\nprotected JsonToken _handleInvalidNumberStart(int ch, boolean negative) throws IOException\n{\nif (ch == 'I') {\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) { _reportInvalidEOFInValue(); }\n}\nch = _inputBuffer[_inputPtr++];\nif (ch == 'N') {\nString match = negative ? \"-INF\" :\"+INF\";\n_matchToken(match, 3);\nif (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\nreturn resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);\n}\n_reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n} else if (ch == 'n') {\nString match = negative ? \"-Infinity\" :\"+Infinity\";\n_matchToken(match, 3);\nif (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\nreturn resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);\n}\n_reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n}\n}\nreportUnexpectedNumberChar(ch, \"expected digit (0-9) to follow minus sign, for valid numeric value\");\nreturn null;\n}\n\n/**\n* Method called to ensure that a root-value is followed by a space\n* token.\n*<p>\n* NOTE: caller MUST ensure there is at least one character available;\n* and that input pointer is AT given char (not past)\n*/\nprivate final void _verifyRootSpace(int ch) throws IOException\n{\n// caller had pushed it back, before calling; reset\n++_inputPtr;\nswitch (ch) {\ncase ' ':\ncase '\\t':\nreturn;\ncase '\\r':\n_skipCR();\nreturn;\ncase '\\n':\n++_currInputRow;\n_currInputRowStart = _inputPtr;\nreturn;\n}\n_reportMissingRootWS(ch);\n}\n\n/*\n/**********************************************************\n/* Internal methods, secondary parsing\n/**********************************************************\n*/\n\nprotected final String _parseName() throws IOException\n{\n// First: let's try to see if we have a simple name: one that does\n// not cross input buffer boundary, and does not contain escape sequences.\nint ptr = _inputPtr;\nint hash = _hashSeed;\nfinal int[] codes = _icLatin1;\n\nwhile (ptr < _inputEnd) {\nint ch = _inputBuffer[ptr];\nif (ch < codes.length && codes[ch] != 0) {\nif (ch == '\"') {\nint start = _inputPtr;\n_inputPtr = ptr+1; // to skip the quote\nreturn _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);\n}\nbreak;\n}\nhash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;\n++ptr;\n}\nint start = _inputPtr;\n_inputPtr = ptr;\nreturn _parseName2(start, hash, INT_QUOTE);\n}\n\nprivate String _parseName2(int startPtr, int hash, int endChar) throws IOException\n{\n_textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));\n\n/* Output pointers; calls will also ensure that the buffer is\n* not shared and has room for at least one more char.\n*/\nchar[] outBuf = _textBuffer.getCurrentSegment();\nint outPtr = _textBuffer.getCurrentSegmentSize();\n\nwhile (true) {\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) {\n_reportInvalidEOF(\": was expecting closing '\"+((char) endChar)+\"' for name\");\n}\n}\nchar c = _inputBuffer[_inputPtr++];\nint i = (int) c;\nif (i <= INT_BACKSLASH) {\nif (i == INT_BACKSLASH) {\n/* Although chars outside of BMP are to be escaped as\n* an UTF-16 surrogate pair, does that affect decoding?\n* For now let's assume it does not.\n*/\nc = _decodeEscaped();\n} else if (i <= endChar) {\nif (i == endChar) {\nbreak;\n}\nif (i < INT_SPACE) {\n_throwUnquotedSpace(i, \"name\");\n}\n}\n}\nhash = (hash * CharsToNameCanonicalizer.HASH_MULT) + c;\n// Ok, let's add char to output:\noutBuf[outPtr++] = c;\n\n// Need more room?\nif (outPtr >= outBuf.length) {\noutBuf = _textBuffer.finishCurrentSegment();\noutPtr = 0;\n}\n}\n_textBuffer.setCurrentLength(outPtr);\n{\nTextBuffer tb = _textBuffer;\nchar[] buf = tb.getTextBuffer();\nint start = tb.getTextOffset();\nint len = tb.size();\nreturn _symbols.findSymbol(buf, start, len, hash);\n}\n}\n\n/**\n* Method called when we see non-white space character other\n* than double quote, when expecting a field name.\n* In standard mode will just throw an expection; but\n* in non-standard modes may be able to parse name.\n*/\nprotected String _handleOddName(int i) throws IOException\n{\n// [JACKSON-173]: allow single quotes\nif (i == '\\'' && isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {\nreturn _parseAposName();\n}\n// [JACKSON-69]: allow unquoted names if feature enabled:\nif (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES)) {\n_reportUnexpectedChar(i, \"was expecting double-quote to start field name\");\n}\nfinal int[] codes = CharTypes.getInputCodeLatin1JsNames();\nfinal int maxCode = codes.length;\n\n// Also: first char must be a valid name char, but NOT be number\nboolean firstOk;\n\nif (i < maxCode) { // identifier, or a number ([Issue#102])\nfirstOk = (codes[i] == 0);\n} else {\nfirstOk = Character.isJavaIdentifierPart((char) i);\n}\nif (!firstOk) {\n_reportUnexpectedChar(i, \"was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name\");\n}\nint ptr = _inputPtr;\nint hash = _hashSeed;\nfinal int inputLen = _inputEnd;\n\nif (ptr < inputLen) {\ndo {\nint ch = _inputBuffer[ptr];\nif (ch < maxCode) {\nif (codes[ch] != 0) {\nint start = _inputPtr-1; // -1 to bring back first char\n_inputPtr = ptr;\nreturn _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);\n}\n} else if (!Character.isJavaIdentifierPart((char) ch)) {\nint start = _inputPtr-1; // -1 to bring back first char\n_inputPtr = ptr;\nreturn _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);\n}\nhash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;\n++ptr;\n} while (ptr < inputLen);\n}\nint start = _inputPtr-1;\n_inputPtr = ptr;\nreturn _handleOddName2(start, hash, codes);\n}\n\nprotected String _parseAposName() throws IOException\n{\n// Note: mostly copy of_parseFieldName\nint ptr = _inputPtr;\nint hash = _hashSeed;\nfinal int inputLen = _inputEnd;\n\nif (ptr < inputLen) {\nfinal int[] codes = _icLatin1;\nfinal int maxCode = codes.length;\n\ndo {\nint ch = _inputBuffer[ptr];\nif (ch == '\\'') {\nint start = _inputPtr;\n_inputPtr = ptr+1; // to skip the quote\nreturn _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);\n}\nif (ch < maxCode && codes[ch] != 0) {\nbreak;\n}\nhash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;\n++ptr;\n} while (ptr < inputLen);\n}\n\nint start = _inputPtr;\n_inputPtr = ptr;\n\nreturn _parseName2(start, hash, '\\'');\n}\n\n/**\n* Method for handling cases where first non-space character\n* of an expected value token is not legal for standard JSON content.\n*/\nprotected JsonToken _handleOddValue(int i) throws IOException\n{\n// Most likely an error, unless we are to allow single-quote-strings\nswitch (i) {\ncase '\\'':\n/* [JACKSON-173]: allow single quotes. Unlike with regular\n* Strings, we'll eagerly parse contents; this so that there's\n* no need to store information on quote char used.\n*\n* Also, no separation to fast/slow parsing; we'll just do\n* one regular (~= slowish) parsing, to keep code simple\n*/\nif (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {\nreturn _handleApos();\n}\nbreak;\ncase 'N':\n_matchToken(\"NaN\", 1);\nif (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\nreturn resetAsNaN(\"NaN\", Double.NaN);\n}\n_reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\nbreak;\ncase 'I':\n_matchToken(\"Infinity\", 1);\nif (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\nreturn resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);\n}\n_reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\nbreak;\ncase '+': // note: '-' is taken as number\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) {\n_reportInvalidEOFInValue();\n}\n}\nreturn _handleInvalidNumberStart(_inputBuffer[_inputPtr++], false);\n}\n// [Issue#77] Try to decode most likely token\nif (Character.isJavaIdentifierStart(i)) {\n_reportInvalidToken(\"\"+((char) i), \"('true', 'false' or 'null')\");\n}\n// but if it doesn't look like a token:\n_reportUnexpectedChar(i, \"expected a valid value (number, String, array, object, 'true', 'false' or 'null')\");\nreturn null;\n}\n\nprotected JsonToken _handleApos() throws IOException\n{\nchar[] outBuf = _textBuffer.emptyAndGetCurrentSegment();\nint outPtr = _textBuffer.getCurrentSegmentSize();\n\nwhile (true) {\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) {\n_reportInvalidEOF(\": was expecting closing quote for a string value\");\n}\n}\nchar c = _inputBuffer[_inputPtr++];\nint i = (int) c;\nif (i <= '\\\\') {\nif (i == '\\\\') {\n/* Although chars outside of BMP are to be escaped as\n* an UTF-16 surrogate pair, does that affect decoding?\n* For now let's assume it does not.\n*/\nc = _decodeEscaped();\n} else if (i <= '\\'') {\nif (i == '\\'') {\nbreak;\n}\nif (i < INT_SPACE) {\n_throwUnquotedSpace(i, \"string value\");\n}\n}\n}\n// Need more room?\nif (outPtr >= outBuf.length) {\noutBuf = _textBuffer.finishCurrentSegment();\noutPtr = 0;\n}\n// Ok, let's add char to output:\noutBuf[outPtr++] = c;\n}\n_textBuffer.setCurrentLength(outPtr);\nreturn JsonToken.VALUE_STRING;\n}\n\nprivate String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException\n{\n_textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));\nchar[] outBuf = _textBuffer.getCurrentSegment();\nint outPtr = _textBuffer.getCurrentSegmentSize();\nfinal int maxCode = codes.length;\n\nwhile (true) {\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) { // acceptable for now (will error out later)\nbreak;\n}\n}\nchar c = _inputBuffer[_inputPtr];\nint i = (int) c;\nif (i <= maxCode) {\nif (codes[i] != 0) {\nbreak;\n}\n} else if (!Character.isJavaIdentifierPart(c)) {\nbreak;\n}\n++_inputPtr;\nhash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i;\n// Ok, let's add char to output:\noutBuf[outPtr++] = c;\n\n// Need more room?\nif (outPtr >= outBuf.length) {\noutBuf = _textBuffer.finishCurrentSegment();\noutPtr = 0;\n}\n}\n_textBuffer.setCurrentLength(outPtr);\n{\nTextBuffer tb = _textBuffer;\nchar[] buf = tb.getTextBuffer();\nint start = tb.getTextOffset();\nint len = tb.size();\n\nreturn _symbols.findSymbol(buf, start, len, hash);\n}\n}\n\n@Override\nprotected final void _finishString() throws IOException\n{\n/* First: let's try to see if we have simple String value: one\n* that does not cross input buffer boundary, and does not\n* contain escape sequences.\n*/\nint ptr = _inputPtr;\nfinal int inputLen = _inputEnd;\n\nif (ptr < inputLen) {\nfinal int[] codes = _icLatin1;\nfinal int maxCode = codes.length;\n\ndo {\nint ch = _inputBuffer[ptr];\nif (ch < maxCode && codes[ch] != 0) {\nif (ch == '\"') {\n_textBuffer.resetWithShared(_inputBuffer, _inputPtr, (ptr-_inputPtr));\n_inputPtr = ptr+1;\n// Yes, we got it all\nreturn;\n}\nbreak;\n}\n++ptr;\n} while (ptr < inputLen);\n}\n\n/* Either ran out of input, or bumped into an escape\n* sequence...\n*/\n_textBuffer.resetWithCopy(_inputBuffer, _inputPtr, (ptr-_inputPtr));\n_inputPtr = ptr;\n_finishString2();\n}\n\nprotected void _finishString2() throws IOException\n{\nchar[] outBuf = _textBuffer.getCurrentSegment();\nint outPtr = _textBuffer.getCurrentSegmentSize();\nfinal int[] codes = _icLatin1;\nfinal int maxCode = codes.length;\n\nwhile (true) {\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) {\n_reportInvalidEOF(\": was expecting closing quote for a string value\");\n}\n}\nchar c = _inputBuffer[_inputPtr++];\nint i = (int) c;\nif (i < maxCode && codes[i] != 0) {\nif (i == INT_QUOTE) {\nbreak;\n} else if (i == INT_BACKSLASH) {\n/* Although chars outside of BMP are to be escaped as\n* an UTF-16 surrogate pair, does that affect decoding?\n* For now let's assume it does not.\n*/\nc = _decodeEscaped();\n} else if (i < INT_SPACE) {\n_throwUnquotedSpace(i, \"string value\");\n} // anything else?\n}\n// Need more room?\nif (outPtr >= outBuf.length) {\noutBuf = _textBuffer.finishCurrentSegment();\noutPtr = 0;\n}\n// Ok, let's add char to output:\noutBuf[outPtr++] = c;\n}\n_textBuffer.setCurrentLength(outPtr);\n}\n\n/**\n* Method called to skim through rest of unparsed String value,\n* if it is not needed. This can be done bit faster if contents\n* need not be stored for future access.\n*/\nprotected final void _skipString() throws IOException\n{\n_tokenIncomplete = false;\n\nint inPtr = _inputPtr;\nint inLen = _inputEnd;\nchar[] inBuf = _inputBuffer;\n\nwhile (true) {\nif (inPtr >= inLen) {\n_inputPtr = inPtr;\nif (!loadMore()) {\n_reportInvalidEOF(\": was expecting closing quote for a string value\");\n}\ninPtr = _inputPtr;\ninLen = _inputEnd;\n}\nchar c = inBuf[inPtr++];\nint i = (int) c;\nif (i <= INT_BACKSLASH) {\nif (i == INT_BACKSLASH) {\n// Although chars outside of BMP are to be escaped as an UTF-16 surrogate pair,\n// does that affect decoding? For now let's assume it does not.\n_inputPtr = inPtr;\n/*c = */ _decodeEscaped();\ninPtr = _inputPtr;\ninLen = _inputEnd;\n} else if (i <= INT_QUOTE) {\nif (i == INT_QUOTE) {\n_inputPtr = inPtr;\nbreak;\n}\nif (i < INT_SPACE) {\n_inputPtr = inPtr;\n_throwUnquotedSpace(i, \"string value\");\n}\n}\n}\n}\n}\n\n/*\n/**********************************************************\n/* Internal methods, other parsing\n/**********************************************************\n*/\n\n/**\n* We actually need to check the character value here\n* (to see if we have \\n following \\r).\n*/\nprotected final void _skipCR() throws IOException {\nif (_inputPtr < _inputEnd || loadMore()) {\nif (_inputBuffer[_inputPtr] == '\\n') {\n++_inputPtr;\n}\n}\n++_currInputRow;\n_currInputRowStart = _inputPtr;\n}\n\nprivate final int _skipColon() throws IOException\n{\nif ((_inputPtr + 4) >= _inputEnd) {\nreturn _skipColon2(false);\n}\nchar c = _inputBuffer[_inputPtr];\nif (c == ':') { // common case, no leading space\nint i = _inputBuffer[++_inputPtr];\nif (i > INT_SPACE) { // nor trailing\nif (i == INT_SLASH || i == INT_HASH) {\nreturn _skipColon2(true);\n}\n++_inputPtr;\nreturn i;\n}\nif (i == INT_SPACE || i == INT_TAB) {\ni = (int) _inputBuffer[++_inputPtr];\nif (i > INT_SPACE) {\nif (i == INT_SLASH || i == INT_HASH) {\nreturn _skipColon2(true);\n}\n++_inputPtr;\nreturn i;\n}\n}\nreturn _skipColon2(true); // true -> skipped colon\n}\nif (c == ' ' || c == '\\t') {\nc = _inputBuffer[++_inputPtr];\n}\nif (c == ':') {\nint i = _inputBuffer[++_inputPtr];\nif (i > INT_SPACE) {\nif (i == INT_SLASH || i == INT_HASH) {\nreturn _skipColon2(true);\n}\n++_inputPtr;\nreturn i;\n}\nif (i == INT_SPACE || i == INT_TAB) {\ni = (int) _inputBuffer[++_inputPtr];\nif (i > INT_SPACE) {\nif (i == INT_SLASH || i == INT_HASH) {\nreturn _skipColon2(true);\n}\n++_inputPtr;\nreturn i;\n}\n}\nreturn _skipColon2(true);\n}\nreturn _skipColon2(false);\n}\n\nprivate final int _skipColon2(boolean gotColon) throws IOException\n{\nwhile (true) {\nif (_inputPtr >= _inputEnd) {\nloadMoreGuaranteed();\n}\nint i = (int) _inputBuffer[_inputPtr++];\nif (i > INT_SPACE) {\nif (i == INT_SLASH) {\n_skipComment();\ncontinue;\n}\nif (i == INT_HASH) {\nif (_skipYAMLComment()) {\ncontinue;\n}\n}\nif (gotColon) {\nreturn i;\n}\nif (i != INT_COLON) {\n_reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");\n}\ngotColon = true;\ncontinue;\n}\nif (i < INT_SPACE) {\nif (i == INT_LF) {\n++_currInputRow;\n_currInputRowStart = _inputPtr;\n} else if (i == INT_CR) {\n_skipCR();\n} else if (i != INT_TAB) {\n_throwInvalidSpace(i);\n}\n}\n}\n}\n\n// Variant called when we know there's at least 4 more bytes available\nprivate final int _skipColonFast(int ptr) throws IOException\n{\nint i = (int) _inputBuffer[ptr++];\nif (i == INT_COLON) { // common case, no leading space\ni = _inputBuffer[ptr++];\nif (i > INT_SPACE) { // nor trailing\nif (i != INT_SLASH && i != INT_HASH) {\n_inputPtr = ptr;\nreturn i;\n}\n} else if (i == INT_SPACE || i == INT_TAB) {\ni = (int) _inputBuffer[ptr++];\nif (i > INT_SPACE) {\nif (i != INT_SLASH && i != INT_HASH) {\n_inputPtr = ptr;\nreturn i;\n}\n}\n}\n_inputPtr = ptr-1;\nreturn _skipColon2(true); // true -> skipped colon\n}\nif (i == INT_SPACE || i == INT_TAB) {\ni = _inputBuffer[ptr++];\n}\nboolean gotColon = (i == INT_COLON);\nif (gotColon) {\ni = _inputBuffer[ptr++];\nif (i > INT_SPACE) {\nif (i != INT_SLASH && i != INT_HASH) {\n_inputPtr = ptr;\nreturn i;\n}\n} else if (i == INT_SPACE || i == INT_TAB) {\ni = (int) _inputBuffer[ptr++];\nif (i > INT_SPACE) {\nif (i != INT_SLASH && i != INT_HASH) {\n_inputPtr = ptr;\nreturn i;\n}\n}\n}\n}\n_inputPtr = ptr-1;\nreturn _skipColon2(gotColon);\n}\n\n// Primary loop: no reloading, comment handling\nprivate final int _skipComma(int i) throws IOException\n{\nif (i != INT_COMMA) {\n_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");\n}\nwhile (_inputPtr < _inputEnd) {\ni = (int) _inputBuffer[_inputPtr++];\nif (i > INT_SPACE) {\nif (i == INT_SLASH || i == INT_HASH) {\n--_inputPtr;\nreturn _skipAfterComma2();\n}\nreturn i;\n}\nif (i < INT_SPACE) {\nif (i == INT_LF) {\n++_currInputRow;\n_currInputRowStart = _inputPtr;\n} else if (i == INT_CR) {\n_skipCR();\n} else if (i != INT_TAB) {\n_throwInvalidSpace(i);\n}\n}\n}\nreturn _skipAfterComma2();\n}\n\nprivate final int _skipAfterComma2() throws IOException\n{\nwhile (_inputPtr < _inputEnd || loadMore()) {\nint i = (int) _inputBuffer[_inputPtr++];\nif (i > INT_SPACE) {\nif (i == INT_SLASH) {\n_skipComment();\ncontinue;\n}\nif (i == INT_HASH) {\nif (_skipYAMLComment()) {\ncontinue;\n}\n}\nreturn i;\n}\nif (i < INT_SPACE) {\nif (i == INT_LF) {\n++_currInputRow;\n_currInputRowStart = _inputPtr;\n} else if (i == INT_CR) {\n_skipCR();\n} else if (i != INT_TAB) {\n_throwInvalidSpace(i);\n}\n}\n}\nthrow _constructError(\"Unexpected end-of-input within/between \"+_parsingContext.getTypeDesc()+\" entries\");\n}\n\nprivate final int _skipWSOrEnd() throws IOException\n{\n// Let's handle first character separately since it is likely that\n// it is either non-whitespace; or we have longer run of white space\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) {\nreturn _eofAsNextChar();\n}\n}\nint i = _inputBuffer[_inputPtr++];\nif (i > INT_SPACE) {\nif (i == INT_SLASH || i == INT_HASH) {\n--_inputPtr;\nreturn _skipWSOrEnd2();\n}\nreturn i;\n}\nif (i != INT_SPACE) {\nif (i == INT_LF) {\n++_currInputRow;\n_currInputRowStart = _inputPtr;\n} else if (i == INT_CR) {\n_skipCR();\n} else if (i != INT_TAB) {\n_throwInvalidSpace(i);\n}\n}\n\nwhile (_inputPtr < _inputEnd) {\ni = (int) _inputBuffer[_inputPtr++];\nif (i > INT_SPACE) {\nif (i == INT_SLASH || i == INT_HASH) {\n--_inputPtr;\nreturn _skipWSOrEnd2();\n}\nreturn i;\n}\nif (i != INT_SPACE) {\nif (i == INT_LF) {\n++_currInputRow;\n_currInputRowStart = _inputPtr;\n} else if (i == INT_CR) {\n_skipCR();\n} else if (i != INT_TAB) {\n_throwInvalidSpace(i);\n}\n}\n}\nreturn _skipWSOrEnd2();\n}\n\nprivate int _skipWSOrEnd2() throws IOException\n{\nwhile (true) {\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) { // We ran out of input...\nreturn _eofAsNextChar();\n}\n}\nint i = (int) _inputBuffer[_inputPtr++];\nif (i > INT_SPACE) {\nif (i == INT_SLASH) {\n_skipComment();\ncontinue;\n}\nif (i == INT_HASH) {\nif (_skipYAMLComment()) {\ncontinue;\n}\n}\nreturn i;\n} else if (i != INT_SPACE) {\nif (i == INT_LF) {\n++_currInputRow;\n_currInputRowStart = _inputPtr;\n} else if (i == INT_CR) {\n_skipCR();\n} else if (i != INT_TAB) {\n_throwInvalidSpace(i);\n}\n}\n}\n}\n\nprivate void _skipComment() throws IOException\n{\nif (!isEnabled(Feature.ALLOW_COMMENTS)) {\n_reportUnexpectedChar('/', \"maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)\");\n}\n// First: check which comment (if either) it is:\nif (_inputPtr >= _inputEnd && !loadMore()) {\n_reportInvalidEOF(\" in a comment\");\n}\nchar c = _inputBuffer[_inputPtr++];\nif (c == '/') {\n_skipLine();\n} else if (c == '*') {\n_skipCComment();\n} else {\n_reportUnexpectedChar(c, \"was expecting either '*' or '/' for a comment\");\n}\n}\n\nprivate void _skipCComment() throws IOException\n{\n// Ok: need the matching '*/'\nwhile ((_inputPtr < _inputEnd) || loadMore()) {\nint i = (int) _inputBuffer[_inputPtr++];\nif (i <= '*') {\nif (i == '*') { // end?\nif ((_inputPtr >= _inputEnd) && !loadMore()) {\nbreak;\n}\nif (_inputBuffer[_inputPtr] == INT_SLASH) {\n++_inputPtr;\nreturn;\n}\ncontinue;\n}\nif (i < INT_SPACE) {\nif (i == INT_LF) {\n++_currInputRow;\n_currInputRowStart = _inputPtr;\n} else if (i == INT_CR) {\n_skipCR();\n} else if (i != INT_TAB) {\n_throwInvalidSpace(i);\n}\n}\n}\n}\n_reportInvalidEOF(\" in a comment\");\n}\n\nprivate boolean _skipYAMLComment() throws IOException\n{\nif (!isEnabled(Feature.ALLOW_YAML_COMMENTS)) {\nreturn false;\n}\n_skipLine();\nreturn true;\n}\n\nprivate void _skipLine() throws IOException\n{\n// Ok: need to find EOF or linefeed\nwhile ((_inputPtr < _inputEnd) || loadMore()) {\nint i = (int) _inputBuffer[_inputPtr++];\nif (i < INT_SPACE) {\nif (i == INT_LF) {\n++_currInputRow;\n_currInputRowStart = _inputPtr;\nbreak;\n} else if (i == INT_CR) {\n_skipCR();\nbreak;\n} else if (i != INT_TAB) {\n_throwInvalidSpace(i);\n}\n}\n}\n}\n\n@Override\nprotected char _decodeEscaped() throws IOException\n{\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) {\n_reportInvalidEOF(\" in character escape sequence\");\n}\n}\nchar c = _inputBuffer[_inputPtr++];\n\nswitch ((int) c) {\n// First, ones that are mapped\ncase 'b':\nreturn '\\b';\ncase 't':\nreturn '\\t';\ncase 'n':\nreturn '\\n';\ncase 'f':\nreturn '\\f';\ncase 'r':\nreturn '\\r';\n\n// And these are to be returned as they are\ncase '\"':\ncase '/':\ncase '\\\\':\nreturn c;\n\ncase 'u': // and finally hex-escaped\nbreak;\n\ndefault:\nreturn _handleUnrecognizedCharacterEscape(c);\n}\n\n// Ok, a hex escape. Need 4 characters\nint value = 0;\nfor (int i = 0; i < 4; ++i) {\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) {\n_reportInvalidEOF(\" in character escape sequence\");\n}\n}\nint ch = (int) _inputBuffer[_inputPtr++];\nint digit = CharTypes.charToHex(ch);\nif (digit < 0) {\n_reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n}\nvalue = (value << 4) | digit;\n}\nreturn (char) value;\n}\n\nprivate final void _matchTrue() throws IOException {\nint ptr = _inputPtr;\nif ((ptr + 3) < _inputEnd) {\nfinal char[] b = _inputBuffer;\nif (b[ptr] == 'r' && b[++ptr] == 'u' && b[++ptr] == 'e') {\nchar c = b[++ptr];\nif (c < '0' || c == ']' || c == '}') { // expected/allowed chars\n_inputPtr = ptr;\nreturn;\n}\n}\n}\n// buffer boundary, or problem, offline\n_matchToken(\"true\", 1);\n}\n\nprivate final void _matchFalse() throws IOException {\nint ptr = _inputPtr;\nif ((ptr + 4) < _inputEnd) {\nfinal char[] b = _inputBuffer;\nif (b[ptr] == 'a' && b[++ptr] == 'l' && b[++ptr] == 's' && b[++ptr] == 'e') {\nchar c = b[++ptr];\nif (c < '0' || c == ']' || c == '}') { // expected/allowed chars\n_inputPtr = ptr;\nreturn;\n}\n}\n}\n// buffer boundary, or problem, offline\n_matchToken(\"false\", 1);\n}\n\nprivate final void _matchNull() throws IOException {\nint ptr = _inputPtr;\nif ((ptr + 3) < _inputEnd) {\nfinal char[] b = _inputBuffer;\nif (b[ptr] == 'u' && b[++ptr] == 'l' && b[++ptr] == 'l') {\nchar c = b[++ptr];\nif (c < '0' || c == ']' || c == '}') { // expected/allowed chars\n_inputPtr = ptr;\nreturn;\n}\n}\n}\n// buffer boundary, or problem, offline\n_matchToken(\"null\", 1);\n}",
            "method_id": 9
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser:_parseFloat(IIIZI)Lcom/fasterxml/jackson/core/JsonToken;",
            "method_body": "private final void _isNextTokenNameYes(int i) throws IOException\n{\n_currToken = JsonToken.FIELD_NAME;\n_updateLocation();\n\nswitch (i) {\ncase '\"':\n_tokenIncomplete = true;\n_nextToken = JsonToken.VALUE_STRING;\nreturn;\ncase '[':\n_nextToken = JsonToken.START_ARRAY;\nreturn;\ncase '{':\n_nextToken = JsonToken.START_OBJECT;\nreturn;\ncase 't':\n_matchToken(\"true\", 1);\n_nextToken = JsonToken.VALUE_TRUE;\nreturn;\ncase 'f':\n_matchToken(\"false\", 1);\n_nextToken = JsonToken.VALUE_FALSE;\nreturn;\ncase 'n':\n_matchToken(\"null\", 1);\n_nextToken = JsonToken.VALUE_NULL;\nreturn;\ncase '-':\n_nextToken = _parseNegNumber();\nreturn;\ncase '0':\ncase '1':\ncase '2':\ncase '3':\ncase '4':\ncase '5':\ncase '6':\ncase '7':\ncase '8':\ncase '9':\n_nextToken = _parsePosNumber(i);\nreturn;\n}\n_nextToken = _handleOddValue(i);\n}\n\nprotected boolean _isNextTokenNameMaybe(int i, String nameToMatch) throws IOException\n{\n// // // and this is back to standard nextToken()\nString name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);\n_parsingContext.setCurrentName(name);\n_currToken = JsonToken.FIELD_NAME;\ni = _skipColon();\n_updateLocation();\nif (i == INT_QUOTE) {\n_tokenIncomplete = true;\n_nextToken = JsonToken.VALUE_STRING;\nreturn nameToMatch.equals(name);\n}\n// Ok: we must have a value... what is it?\nJsonToken t;\nswitch (i) {\ncase '-':\nt = _parseNegNumber();\nbreak;\ncase '0':\ncase '1':\ncase '2':\ncase '3':\ncase '4':\ncase '5':\ncase '6':\ncase '7':\ncase '8':\ncase '9':\nt = _parsePosNumber(i);\nbreak;\ncase 'f':\n_matchFalse();\nt = JsonToken.VALUE_FALSE;\nbreak;\ncase 'n':\n_matchNull();\nt = JsonToken.VALUE_NULL;\nbreak;\ncase 't':\n_matchTrue();\nt = JsonToken.VALUE_TRUE;\nbreak;\ncase '[':\nt = JsonToken.START_ARRAY;\nbreak;\ncase '{':\nt = JsonToken.START_OBJECT;\nbreak;\ndefault:\nt = _handleOddValue(i);\nbreak;\n}\n_nextToken = t;\nreturn nameToMatch.equals(name);\n}\n\nprivate final JsonToken _nextTokenNotInObject(int i) throws IOException\n{\nif (i == INT_QUOTE) {\n_tokenIncomplete = true;\nreturn (_currToken = JsonToken.VALUE_STRING);\n}\nswitch (i) {\ncase '[':\n_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\nreturn (_currToken = JsonToken.START_ARRAY);\ncase '{':\n_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\nreturn (_currToken = JsonToken.START_OBJECT);\ncase 't':\n_matchToken(\"true\", 1);\nreturn (_currToken = JsonToken.VALUE_TRUE);\ncase 'f':\n_matchToken(\"false\", 1);\nreturn (_currToken = JsonToken.VALUE_FALSE);\ncase 'n':\n_matchToken(\"null\", 1);\nreturn (_currToken = JsonToken.VALUE_NULL);\ncase '-':\nreturn (_currToken = _parseNegNumber());\n/* Should we have separate handling for plus? Although\n* it is not allowed per se, it may be erroneously used,\n* and could be indicated by a more specific error message.\n*/\ncase '0':\ncase '1':\ncase '2':\ncase '3':\ncase '4':\ncase '5':\ncase '6':\ncase '7':\ncase '8':\ncase '9':\nreturn (_currToken = _parsePosNumber(i));\n}\nreturn (_currToken = _handleOddValue(i));\n}\n\n// note: identical to one in UTF8StreamJsonParser\n@Override\npublic final String nextTextValue() throws IOException\n{\nif (_currToken == JsonToken.FIELD_NAME) { // mostly copied from '_nextAfterName'\n_nameCopied = false;\nJsonToken t = _nextToken;\n_nextToken = null;\n_currToken = t;\nif (t == JsonToken.VALUE_STRING) {\nif (_tokenIncomplete) {\n_tokenIncomplete = false;\n_finishString();\n}\nreturn _textBuffer.contentsAsString();\n}\nif (t == JsonToken.START_ARRAY) {\n_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n} else if (t == JsonToken.START_OBJECT) {\n_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n}\nreturn null;\n}\n// !!! TODO: optimize this case as well\nreturn (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;\n}\n\n// note: identical to one in Utf8StreamParser\n@Override\npublic final int nextIntValue(int defaultValue) throws IOException\n{\nif (_currToken == JsonToken.FIELD_NAME) {\n_nameCopied = false;\nJsonToken t = _nextToken;\n_nextToken = null;\n_currToken = t;\nif (t == JsonToken.VALUE_NUMBER_INT) {\nreturn getIntValue();\n}\nif (t == JsonToken.START_ARRAY) {\n_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n} else if (t == JsonToken.START_OBJECT) {\n_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n}\nreturn defaultValue;\n}\n// !!! TODO: optimize this case as well\nreturn (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;\n}\n\n// note: identical to one in Utf8StreamParser\n@Override\npublic final long nextLongValue(long defaultValue) throws IOException\n{\nif (_currToken == JsonToken.FIELD_NAME) { // mostly copied from '_nextAfterName'\n_nameCopied = false;\nJsonToken t = _nextToken;\n_nextToken = null;\n_currToken = t;\nif (t == JsonToken.VALUE_NUMBER_INT) {\nreturn getLongValue();\n}\nif (t == JsonToken.START_ARRAY) {\n_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n} else if (t == JsonToken.START_OBJECT) {\n_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n}\nreturn defaultValue;\n}\n// !!! TODO: optimize this case as well\nreturn (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;\n}\n\n// note: identical to one in UTF8StreamJsonParser\n@Override\npublic final Boolean nextBooleanValue() throws IOException\n{\nif (_currToken == JsonToken.FIELD_NAME) { // mostly copied from '_nextAfterName'\n_nameCopied = false;\nJsonToken t = _nextToken;\n_nextToken = null;\n_currToken = t;\nif (t == JsonToken.VALUE_TRUE) {\nreturn Boolean.TRUE;\n}\nif (t == JsonToken.VALUE_FALSE) {\nreturn Boolean.FALSE;\n}\nif (t == JsonToken.START_ARRAY) {\n_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n} else if (t == JsonToken.START_OBJECT) {\n_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n}\nreturn null;\n}\nJsonToken t = nextToken();\nif (t != null) {\nint id = t.id();\nif (id == ID_TRUE) return Boolean.TRUE;\nif (id == ID_FALSE) return Boolean.FALSE;\n}\nreturn null;\n}\n\n/*\n/**********************************************************\n/* Internal methods, number parsing\n/**********************************************************\n*/\n\n/**\n* Initial parsing method for number values. It needs to be able\n* to parse enough input to be able to determine whether the\n* value is to be considered a simple integer value, or a more\n* generic decimal value: latter of which needs to be expressed\n* as a floating point number. The basic rule is that if the number\n* has no fractional or exponential part, it is an integer; otherwise\n* a floating point number.\n*<p>\n* Because much of input has to be processed in any case, no partial\n* parsing is done: all input text will be stored for further\n* processing. However, actual numeric value conversion will be\n* deferred, since it is usually the most complicated and costliest\n* part of processing.\n*/\nprotected final JsonToken _parsePosNumber(int ch) throws IOException\n{\n/* Although we will always be complete with respect to textual\n* representation (that is, all characters will be parsed),\n* actual conversion to a number is deferred. Thus, need to\n* note that no representations are valid yet\n*/\nint ptr = _inputPtr;\nint startPtr = ptr-1; // to include digit already read\nfinal int inputLen = _inputEnd;\n\n// One special case, leading zero(es):\nif (ch == INT_0) {\nreturn _parseNumber2(false, startPtr);\n}\n\n/* First, let's see if the whole number is contained within\n* the input buffer unsplit. This should be the common case;\n* and to simplify processing, we will just reparse contents\n* in the alternative case (number split on buffer boundary)\n*/\n\nint intLen = 1; // already got one\n\n// First let's get the obligatory integer part:\nint_loop:\nwhile (true) {\nif (ptr >= inputLen) {\n_inputPtr = startPtr;\nreturn _parseNumber2(false, startPtr);\n}\nch = (int) _inputBuffer[ptr++];\nif (ch < INT_0 || ch > INT_9) {\nbreak int_loop;\n}\n++intLen;\n}\nif (ch == INT_PERIOD || ch == INT_e || ch == INT_E) {\n_inputPtr = ptr;\nreturn _parseFloat(ch, startPtr, ptr, false, intLen);\n}\n// Got it all: let's add to text buffer for parsing, access\n--ptr; // need to push back following separator\n_inputPtr = ptr;\n// As per #105, need separating space between root values; check here\nif (_parsingContext.inRoot()) {\n_verifyRootSpace(ch);\n}\nint len = ptr-startPtr;\n_textBuffer.resetWithShared(_inputBuffer, startPtr, len);\nreturn resetInt(false, intLen);\n}\n\nprivate final JsonToken _parseFloat(int ch, int startPtr, int ptr, boolean neg, int intLen)\nthrows IOException\n{\nfinal int inputLen = _inputEnd;\nint fractLen = 0;\n\n// And then see if we get other parts\nif (ch == '.') { // yes, fraction\nfract_loop:\nwhile (true) {\nif (ptr >= inputLen) {\nreturn _parseNumber2(neg, startPtr);\n}\nch = (int) _inputBuffer[ptr++];\nif (ch < INT_0 || ch > INT_9) {\nbreak fract_loop;\n}\n++fractLen;\n}\n// must be followed by sequence of ints, one minimum\nif (fractLen == 0) {\nreportUnexpectedNumberChar(ch, \"Decimal point not followed by a digit\");\n}\n}\nint expLen = 0;\nif (ch == 'e' || ch == 'E') { // and/or exponent\nif (ptr >= inputLen) {\n_inputPtr = startPtr;\nreturn _parseNumber2(neg, startPtr);\n}\n// Sign indicator?\nch = (int) _inputBuffer[ptr++];\nif (ch == INT_MINUS || ch == INT_PLUS) { // yup, skip for now\nif (ptr >= inputLen) {\n_inputPtr = startPtr;\nreturn _parseNumber2(neg, startPtr);\n}\nch = (int) _inputBuffer[ptr++];\n}\nwhile (ch <= INT_9 && ch >= INT_0) {\n++expLen;\nif (ptr >= inputLen) {\n_inputPtr = startPtr;\nreturn _parseNumber2(neg, startPtr);\n}\nch = (int) _inputBuffer[ptr++];\n}\n// must be followed by sequence of ints, one minimum\nif (expLen == 0) {\nreportUnexpectedNumberChar(ch, \"Exponent indicator not followed by a digit\");\n}\n}\n--ptr; // need to push back following separator\n_inputPtr = ptr;\n// As per #105, need separating space between root values; check here\nif (_parsingContext.inRoot()) {\n_verifyRootSpace(ch);\n}\nint len = ptr-startPtr;\n_textBuffer.resetWithShared(_inputBuffer, startPtr, len);\n// And there we have it!\nreturn resetFloat(neg, intLen, fractLen, expLen);\n}\n\nprotected final JsonToken _parseNegNumber() throws IOException\n{\nint ptr = _inputPtr;\nint startPtr = ptr-1; // to include sign/digit already read\nfinal int inputLen = _inputEnd;\n\nif (ptr >= inputLen) {\nreturn _parseNumber2(true, startPtr);\n}\nint ch = _inputBuffer[ptr++];\n// First check: must have a digit to follow minus sign\nif (ch > INT_9 || ch < INT_0) {\n_inputPtr = ptr;\nreturn _handleInvalidNumberStart(ch, true);\n}\n// One special case, leading zero(es):\nif (ch == INT_0) {\nreturn _parseNumber2(true, startPtr);\n}\nint intLen = 1; // already got one\n\n// First let's get the obligatory integer part:\nint_loop:\nwhile (true) {\nif (ptr >= inputLen) {\nreturn _parseNumber2(true, startPtr);\n}\nch = (int) _inputBuffer[ptr++];\nif (ch < INT_0 || ch > INT_9) {\nbreak int_loop;\n}\n++intLen;\n}\n\nif (ch == INT_PERIOD || ch == INT_e || ch == INT_E) {\n_inputPtr = ptr;\nreturn _parseFloat(ch, startPtr, ptr, true, intLen);\n}\n--ptr;\n_inputPtr = ptr;\nif (_parsingContext.inRoot()) {\n_verifyRootSpace(ch);\n}\nint len = ptr-startPtr;\n_textBuffer.resetWithShared(_inputBuffer, startPtr, len);\nreturn resetInt(true, intLen);\n}\n\n/**\n* Method called to parse a number, when the primary parse\n* method has failed to parse it, due to it being split on\n* buffer boundary. As a result code is very similar, except\n* that it has to explicitly copy contents to the text buffer\n* instead of just sharing the main input buffer.\n*/\nprivate final JsonToken _parseNumber2(boolean neg, int startPtr) throws IOException\n{\n_inputPtr = neg ? (startPtr+1) : startPtr;\nchar[] outBuf = _textBuffer.emptyAndGetCurrentSegment();\nint outPtr = 0;\n\n// Need to prepend sign?\nif (neg) {\noutBuf[outPtr++] = '-';\n}\n\n// This is the place to do leading-zero check(s) too:\nint intLen = 0;\nchar c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++] : getNextChar(\"No digit following minus sign\");\nif (c == '0') {\nc = _verifyNoLeadingZeroes();\n}\nboolean eof = false;\n\n// Ok, first the obligatory integer part:\nint_loop:\nwhile (c >= '0' && c <= '9') {\n++intLen;\nif (outPtr >= outBuf.length) {\noutBuf = _textBuffer.finishCurrentSegment();\noutPtr = 0;\n}\noutBuf[outPtr++] = c;\nif (_inputPtr >= _inputEnd && !loadMore()) {\n// EOF is legal for main level int values\nc = CHAR_NULL;\neof = true;\nbreak int_loop;\n}\nc = _inputBuffer[_inputPtr++];\n}\n// Also, integer part is not optional\nif (intLen == 0) {\nreturn _handleInvalidNumberStart(c, neg);\n}\n\nint fractLen = 0;\n// And then see if we get other parts\nif (c == '.') { // yes, fraction\noutBuf[outPtr++] = c;\n\nfract_loop:\nwhile (true) {\nif (_inputPtr >= _inputEnd && !loadMore()) {\neof = true;\nbreak fract_loop;\n}\nc = _inputBuffer[_inputPtr++];\nif (c < INT_0 || c > INT_9) {\nbreak fract_loop;\n}\n++fractLen;\nif (outPtr >= outBuf.length) {\noutBuf = _textBuffer.finishCurrentSegment();\noutPtr = 0;\n}\noutBuf[outPtr++] = c;\n}\n// must be followed by sequence of ints, one minimum\nif (fractLen == 0) {\nreportUnexpectedNumberChar(c, \"Decimal point not followed by a digit\");\n}\n}\n\nint expLen = 0;\nif (c == 'e' || c == 'E') { // exponent?\nif (outPtr >= outBuf.length) {\noutBuf = _textBuffer.finishCurrentSegment();\noutPtr = 0;\n}\noutBuf[outPtr++] = c;\n// Not optional, can require that we get one more char\nc = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++]\n: getNextChar(\"expected a digit for number exponent\");\n// Sign indicator?\nif (c == '-' || c == '+') {\nif (outPtr >= outBuf.length) {\noutBuf = _textBuffer.finishCurrentSegment();\noutPtr = 0;\n}\noutBuf[outPtr++] = c;\n// Likewise, non optional:\nc = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++]\n: getNextChar(\"expected a digit for number exponent\");\n}\n\nexp_loop:\nwhile (c <= INT_9 && c >= INT_0) {\n++expLen;\nif (outPtr >= outBuf.length) {\noutBuf = _textBuffer.finishCurrentSegment();\noutPtr = 0;\n}\noutBuf[outPtr++] = c;\nif (_inputPtr >= _inputEnd && !loadMore()) {\neof = true;\nbreak exp_loop;\n}\nc = _inputBuffer[_inputPtr++];\n}\n// must be followed by sequence of ints, one minimum\nif (expLen == 0) {\nreportUnexpectedNumberChar(c, \"Exponent indicator not followed by a digit\");\n}\n}\n\n// Ok; unless we hit end-of-input, need to push last char read back\nif (!eof) {\n--_inputPtr;\nif (_parsingContext.inRoot()) {\n_verifyRootSpace(c);\n}\n}\n_textBuffer.setCurrentLength(outPtr);\n// And there we have it!\nreturn reset(neg, intLen, fractLen, expLen);\n}\n\n/**\n* Method called when we have seen one zero, and want to ensure\n* it is not followed by another\n*/\nprivate final char _verifyNoLeadingZeroes() throws IOException\n{\n// Fast case first:\nif (_inputPtr < _inputEnd) {\nchar ch = _inputBuffer[_inputPtr];\n// if not followed by a number (probably '.'); return zero as is, to be included\nif (ch < '0' || ch > '9') {\nreturn '0';\n}\n}\n// and offline the less common case\nreturn _verifyNLZ2();\n}\n\nprivate char _verifyNLZ2() throws IOException\n{\nif (_inputPtr >= _inputEnd && !loadMore()) {\nreturn '0';\n}\nchar ch = _inputBuffer[_inputPtr];\nif (ch < '0' || ch > '9') {\nreturn '0';\n}\nif (!isEnabled(Feature.ALLOW_NUMERIC_LEADING_ZEROS)) {\nreportInvalidNumber(\"Leading zeroes not allowed\");\n}\n// if so, just need to skip either all zeroes (if followed by number); or all but one (if non-number)\n++_inputPtr; // Leading zero to be skipped\nif (ch == INT_0) {\nwhile (_inputPtr < _inputEnd || loadMore()) {\nch = _inputBuffer[_inputPtr];\nif (ch < '0' || ch > '9') { // followed by non-number; retain one zero\nreturn '0';\n}\n++_inputPtr; // skip previous zero\nif (ch != '0') { // followed by other number; return\nbreak;\n}\n}\n}\nreturn ch;\n}\n\n/**\n* Method called if expected numeric value (due to leading sign) does not\n* look like a number\n*/\nprotected JsonToken _handleInvalidNumberStart(int ch, boolean negative) throws IOException\n{\nif (ch == 'I') {\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) { _reportInvalidEOFInValue(); }\n}\nch = _inputBuffer[_inputPtr++];\nif (ch == 'N') {\nString match = negative ? \"-INF\" :\"+INF\";\n_matchToken(match, 3);\nif (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\nreturn resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);\n}\n_reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n} else if (ch == 'n') {\nString match = negative ? \"-Infinity\" :\"+Infinity\";\n_matchToken(match, 3);\nif (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\nreturn resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);\n}\n_reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n}\n}\nreportUnexpectedNumberChar(ch, \"expected digit (0-9) to follow minus sign, for valid numeric value\");\nreturn null;\n}\n\n/**\n* Method called to ensure that a root-value is followed by a space\n* token.\n*<p>\n* NOTE: caller MUST ensure there is at least one character available;\n* and that input pointer is AT given char (not past)\n*/\nprivate final void _verifyRootSpace(int ch) throws IOException\n{\n// caller had pushed it back, before calling; reset\n++_inputPtr;\nswitch (ch) {\ncase ' ':\ncase '\\t':\nreturn;\ncase '\\r':\n_skipCR();\nreturn;\ncase '\\n':\n++_currInputRow;\n_currInputRowStart = _inputPtr;\nreturn;\n}\n_reportMissingRootWS(ch);\n}\n\n/*\n/**********************************************************\n/* Internal methods, secondary parsing\n/**********************************************************\n*/\n\nprotected final String _parseName() throws IOException\n{\n// First: let's try to see if we have a simple name: one that does\n// not cross input buffer boundary, and does not contain escape sequences.\nint ptr = _inputPtr;\nint hash = _hashSeed;\nfinal int[] codes = _icLatin1;\n\nwhile (ptr < _inputEnd) {\nint ch = _inputBuffer[ptr];\nif (ch < codes.length && codes[ch] != 0) {\nif (ch == '\"') {\nint start = _inputPtr;\n_inputPtr = ptr+1; // to skip the quote\nreturn _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);\n}\nbreak;\n}\nhash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;\n++ptr;\n}\nint start = _inputPtr;\n_inputPtr = ptr;\nreturn _parseName2(start, hash, INT_QUOTE);\n}\n\nprivate String _parseName2(int startPtr, int hash, int endChar) throws IOException\n{\n_textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));\n\n/* Output pointers; calls will also ensure that the buffer is\n* not shared and has room for at least one more char.\n*/\nchar[] outBuf = _textBuffer.getCurrentSegment();\nint outPtr = _textBuffer.getCurrentSegmentSize();\n\nwhile (true) {\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) {\n_reportInvalidEOF(\": was expecting closing '\"+((char) endChar)+\"' for name\");\n}\n}\nchar c = _inputBuffer[_inputPtr++];\nint i = (int) c;\nif (i <= INT_BACKSLASH) {\nif (i == INT_BACKSLASH) {\n/* Although chars outside of BMP are to be escaped as\n* an UTF-16 surrogate pair, does that affect decoding?\n* For now let's assume it does not.\n*/\nc = _decodeEscaped();\n} else if (i <= endChar) {\nif (i == endChar) {\nbreak;\n}\nif (i < INT_SPACE) {\n_throwUnquotedSpace(i, \"name\");\n}\n}\n}\nhash = (hash * CharsToNameCanonicalizer.HASH_MULT) + c;\n// Ok, let's add char to output:\noutBuf[outPtr++] = c;\n\n// Need more room?\nif (outPtr >= outBuf.length) {\noutBuf = _textBuffer.finishCurrentSegment();\noutPtr = 0;\n}\n}\n_textBuffer.setCurrentLength(outPtr);\n{\nTextBuffer tb = _textBuffer;\nchar[] buf = tb.getTextBuffer();\nint start = tb.getTextOffset();\nint len = tb.size();\nreturn _symbols.findSymbol(buf, start, len, hash);\n}\n}\n\n/**\n* Method called when we see non-white space character other\n* than double quote, when expecting a field name.\n* In standard mode will just throw an expection; but\n* in non-standard modes may be able to parse name.\n*/\nprotected String _handleOddName(int i) throws IOException\n{\n// [JACKSON-173]: allow single quotes\nif (i == '\\'' && isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {\nreturn _parseAposName();\n}\n// [JACKSON-69]: allow unquoted names if feature enabled:\nif (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES)) {\n_reportUnexpectedChar(i, \"was expecting double-quote to start field name\");\n}\nfinal int[] codes = CharTypes.getInputCodeLatin1JsNames();\nfinal int maxCode = codes.length;\n\n// Also: first char must be a valid name char, but NOT be number\nboolean firstOk;\n\nif (i < maxCode) { // identifier, or a number ([Issue#102])\nfirstOk = (codes[i] == 0);\n} else {\nfirstOk = Character.isJavaIdentifierPart((char) i);\n}\nif (!firstOk) {\n_reportUnexpectedChar(i, \"was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name\");\n}\nint ptr = _inputPtr;\nint hash = _hashSeed;\nfinal int inputLen = _inputEnd;\n\nif (ptr < inputLen) {\ndo {\nint ch = _inputBuffer[ptr];\nif (ch < maxCode) {\nif (codes[ch] != 0) {\nint start = _inputPtr-1; // -1 to bring back first char\n_inputPtr = ptr;\nreturn _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);\n}\n} else if (!Character.isJavaIdentifierPart((char) ch)) {\nint start = _inputPtr-1; // -1 to bring back first char\n_inputPtr = ptr;\nreturn _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);\n}\nhash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;\n++ptr;\n} while (ptr < inputLen);\n}\nint start = _inputPtr-1;\n_inputPtr = ptr;\nreturn _handleOddName2(start, hash, codes);\n}\n\nprotected String _parseAposName() throws IOException\n{\n// Note: mostly copy of_parseFieldName\nint ptr = _inputPtr;\nint hash = _hashSeed;\nfinal int inputLen = _inputEnd;\n\nif (ptr < inputLen) {\nfinal int[] codes = _icLatin1;\nfinal int maxCode = codes.length;\n\ndo {\nint ch = _inputBuffer[ptr];\nif (ch == '\\'') {\nint start = _inputPtr;\n_inputPtr = ptr+1; // to skip the quote\nreturn _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);\n}\nif (ch < maxCode && codes[ch] != 0) {\nbreak;\n}\nhash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;\n++ptr;\n} while (ptr < inputLen);\n}\n\nint start = _inputPtr;\n_inputPtr = ptr;\n\nreturn _parseName2(start, hash, '\\'');\n}\n\n/**\n* Method for handling cases where first non-space character\n* of an expected value token is not legal for standard JSON content.\n*/\nprotected JsonToken _handleOddValue(int i) throws IOException\n{\n// Most likely an error, unless we are to allow single-quote-strings\nswitch (i) {\ncase '\\'':\n/* [JACKSON-173]: allow single quotes. Unlike with regular\n* Strings, we'll eagerly parse contents; this so that there's\n* no need to store information on quote char used.\n*\n* Also, no separation to fast/slow parsing; we'll just do\n* one regular (~= slowish) parsing, to keep code simple\n*/\nif (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {\nreturn _handleApos();\n}\nbreak;\ncase 'N':\n_matchToken(\"NaN\", 1);\nif (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\nreturn resetAsNaN(\"NaN\", Double.NaN);\n}\n_reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\nbreak;\ncase 'I':\n_matchToken(\"Infinity\", 1);\nif (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\nreturn resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);\n}\n_reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\nbreak;\ncase '+': // note: '-' is taken as number\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) {\n_reportInvalidEOFInValue();\n}\n}\nreturn _handleInvalidNumberStart(_inputBuffer[_inputPtr++], false);\n}\n// [Issue#77] Try to decode most likely token\nif (Character.isJavaIdentifierStart(i)) {\n_reportInvalidToken(\"\"+((char) i), \"('true', 'false' or 'null')\");\n}\n// but if it doesn't look like a token:\n_reportUnexpectedChar(i, \"expected a valid value (number, String, array, object, 'true', 'false' or 'null')\");\nreturn null;\n}\n\nprotected JsonToken _handleApos() throws IOException\n{\nchar[] outBuf = _textBuffer.emptyAndGetCurrentSegment();\nint outPtr = _textBuffer.getCurrentSegmentSize();\n\nwhile (true) {\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) {\n_reportInvalidEOF(\": was expecting closing quote for a string value\");\n}\n}\nchar c = _inputBuffer[_inputPtr++];\nint i = (int) c;\nif (i <= '\\\\') {\nif (i == '\\\\') {\n/* Although chars outside of BMP are to be escaped as\n* an UTF-16 surrogate pair, does that affect decoding?\n* For now let's assume it does not.\n*/\nc = _decodeEscaped();\n} else if (i <= '\\'') {\nif (i == '\\'') {\nbreak;\n}\nif (i < INT_SPACE) {\n_throwUnquotedSpace(i, \"string value\");\n}\n}\n}\n// Need more room?\nif (outPtr >= outBuf.length) {\noutBuf = _textBuffer.finishCurrentSegment();\noutPtr = 0;\n}\n// Ok, let's add char to output:\noutBuf[outPtr++] = c;\n}\n_textBuffer.setCurrentLength(outPtr);\nreturn JsonToken.VALUE_STRING;\n}\n\nprivate String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException\n{\n_textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));\nchar[] outBuf = _textBuffer.getCurrentSegment();\nint outPtr = _textBuffer.getCurrentSegmentSize();\nfinal int maxCode = codes.length;\n\nwhile (true) {\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) { // acceptable for now (will error out later)\nbreak;\n}\n}\nchar c = _inputBuffer[_inputPtr];\nint i = (int) c;\nif (i <= maxCode) {\nif (codes[i] != 0) {\nbreak;\n}\n} else if (!Character.isJavaIdentifierPart(c)) {\nbreak;\n}\n++_inputPtr;\nhash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i;\n// Ok, let's add char to output:\noutBuf[outPtr++] = c;\n\n// Need more room?\nif (outPtr >= outBuf.length) {\noutBuf = _textBuffer.finishCurrentSegment();\noutPtr = 0;\n}\n}\n_textBuffer.setCurrentLength(outPtr);\n{\nTextBuffer tb = _textBuffer;\nchar[] buf = tb.getTextBuffer();\nint start = tb.getTextOffset();\nint len = tb.size();\n\nreturn _symbols.findSymbol(buf, start, len, hash);\n}\n}\n\n@Override\nprotected final void _finishString() throws IOException\n{\n/* First: let's try to see if we have simple String value: one\n* that does not cross input buffer boundary, and does not\n* contain escape sequences.\n*/\nint ptr = _inputPtr;\nfinal int inputLen = _inputEnd;\n\nif (ptr < inputLen) {\nfinal int[] codes = _icLatin1;\nfinal int maxCode = codes.length;\n\ndo {\nint ch = _inputBuffer[ptr];\nif (ch < maxCode && codes[ch] != 0) {\nif (ch == '\"') {\n_textBuffer.resetWithShared(_inputBuffer, _inputPtr, (ptr-_inputPtr));\n_inputPtr = ptr+1;\n// Yes, we got it all\nreturn;\n}\nbreak;\n}\n++ptr;\n} while (ptr < inputLen);\n}\n\n/* Either ran out of input, or bumped into an escape\n* sequence...\n*/\n_textBuffer.resetWithCopy(_inputBuffer, _inputPtr, (ptr-_inputPtr));\n_inputPtr = ptr;\n_finishString2();\n}\n\nprotected void _finishString2() throws IOException\n{\nchar[] outBuf = _textBuffer.getCurrentSegment();\nint outPtr = _textBuffer.getCurrentSegmentSize();\nfinal int[] codes = _icLatin1;\nfinal int maxCode = codes.length;\n\nwhile (true) {\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) {\n_reportInvalidEOF(\": was expecting closing quote for a string value\");\n}\n}\nchar c = _inputBuffer[_inputPtr++];\nint i = (int) c;\nif (i < maxCode && codes[i] != 0) {\nif (i == INT_QUOTE) {\nbreak;\n} else if (i == INT_BACKSLASH) {\n/* Although chars outside of BMP are to be escaped as\n* an UTF-16 surrogate pair, does that affect decoding?\n* For now let's assume it does not.\n*/\nc = _decodeEscaped();\n} else if (i < INT_SPACE) {\n_throwUnquotedSpace(i, \"string value\");\n} // anything else?\n}\n// Need more room?\nif (outPtr >= outBuf.length) {\noutBuf = _textBuffer.finishCurrentSegment();\noutPtr = 0;\n}\n// Ok, let's add char to output:\noutBuf[outPtr++] = c;\n}\n_textBuffer.setCurrentLength(outPtr);\n}\n\n/**\n* Method called to skim through rest of unparsed String value,\n* if it is not needed. This can be done bit faster if contents\n* need not be stored for future access.\n*/\nprotected final void _skipString() throws IOException\n{\n_tokenIncomplete = false;\n\nint inPtr = _inputPtr;\nint inLen = _inputEnd;\nchar[] inBuf = _inputBuffer;\n\nwhile (true) {\nif (inPtr >= inLen) {\n_inputPtr = inPtr;\nif (!loadMore()) {\n_reportInvalidEOF(\": was expecting closing quote for a string value\");\n}\ninPtr = _inputPtr;\ninLen = _inputEnd;\n}\nchar c = inBuf[inPtr++];\nint i = (int) c;\nif (i <= INT_BACKSLASH) {\nif (i == INT_BACKSLASH) {\n// Although chars outside of BMP are to be escaped as an UTF-16 surrogate pair,\n// does that affect decoding? For now let's assume it does not.\n_inputPtr = inPtr;\n/*c = */ _decodeEscaped();\ninPtr = _inputPtr;\ninLen = _inputEnd;\n} else if (i <= INT_QUOTE) {\nif (i == INT_QUOTE) {\n_inputPtr = inPtr;\nbreak;\n}\nif (i < INT_SPACE) {\n_inputPtr = inPtr;\n_throwUnquotedSpace(i, \"string value\");\n}\n}\n}\n}\n}\n\n/*\n/**********************************************************\n/* Internal methods, other parsing\n/**********************************************************\n*/\n\n/**\n* We actually need to check the character value here\n* (to see if we have \\n following \\r).\n*/\nprotected final void _skipCR() throws IOException {\nif (_inputPtr < _inputEnd || loadMore()) {\nif (_inputBuffer[_inputPtr] == '\\n') {\n++_inputPtr;\n}\n}\n++_currInputRow;\n_currInputRowStart = _inputPtr;\n}\n\nprivate final int _skipColon() throws IOException\n{\nif ((_inputPtr + 4) >= _inputEnd) {\nreturn _skipColon2(false);\n}\nchar c = _inputBuffer[_inputPtr];\nif (c == ':') { // common case, no leading space\nint i = _inputBuffer[++_inputPtr];\nif (i > INT_SPACE) { // nor trailing\nif (i == INT_SLASH || i == INT_HASH) {\nreturn _skipColon2(true);\n}\n++_inputPtr;\nreturn i;\n}\nif (i == INT_SPACE || i == INT_TAB) {\ni = (int) _inputBuffer[++_inputPtr];\nif (i > INT_SPACE) {\nif (i == INT_SLASH || i == INT_HASH) {\nreturn _skipColon2(true);\n}\n++_inputPtr;\nreturn i;\n}\n}\nreturn _skipColon2(true); // true -> skipped colon\n}\nif (c == ' ' || c == '\\t') {\nc = _inputBuffer[++_inputPtr];\n}\nif (c == ':') {\nint i = _inputBuffer[++_inputPtr];\nif (i > INT_SPACE) {\nif (i == INT_SLASH || i == INT_HASH) {\nreturn _skipColon2(true);\n}\n++_inputPtr;\nreturn i;\n}\nif (i == INT_SPACE || i == INT_TAB) {\ni = (int) _inputBuffer[++_inputPtr];\nif (i > INT_SPACE) {\nif (i == INT_SLASH || i == INT_HASH) {\nreturn _skipColon2(true);\n}\n++_inputPtr;\nreturn i;\n}\n}\nreturn _skipColon2(true);\n}\nreturn _skipColon2(false);\n}\n\nprivate final int _skipColon2(boolean gotColon) throws IOException\n{\nwhile (true) {\nif (_inputPtr >= _inputEnd) {\nloadMoreGuaranteed();\n}\nint i = (int) _inputBuffer[_inputPtr++];\nif (i > INT_SPACE) {\nif (i == INT_SLASH) {\n_skipComment();\ncontinue;\n}\nif (i == INT_HASH) {\nif (_skipYAMLComment()) {\ncontinue;\n}\n}\nif (gotColon) {\nreturn i;\n}\nif (i != INT_COLON) {\n_reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");\n}\ngotColon = true;\ncontinue;\n}\nif (i < INT_SPACE) {\nif (i == INT_LF) {\n++_currInputRow;\n_currInputRowStart = _inputPtr;\n} else if (i == INT_CR) {\n_skipCR();\n} else if (i != INT_TAB) {\n_throwInvalidSpace(i);\n}\n}\n}\n}\n\n// Variant called when we know there's at least 4 more bytes available\nprivate final int _skipColonFast(int ptr) throws IOException\n{\nint i = (int) _inputBuffer[ptr++];\nif (i == INT_COLON) { // common case, no leading space\ni = _inputBuffer[ptr++];\nif (i > INT_SPACE) { // nor trailing\nif (i != INT_SLASH && i != INT_HASH) {\n_inputPtr = ptr;\nreturn i;\n}\n} else if (i == INT_SPACE || i == INT_TAB) {\ni = (int) _inputBuffer[ptr++];\nif (i > INT_SPACE) {\nif (i != INT_SLASH && i != INT_HASH) {\n_inputPtr = ptr;\nreturn i;\n}\n}\n}\n_inputPtr = ptr-1;\nreturn _skipColon2(true); // true -> skipped colon\n}\nif (i == INT_SPACE || i == INT_TAB) {\ni = _inputBuffer[ptr++];\n}\nboolean gotColon = (i == INT_COLON);\nif (gotColon) {\ni = _inputBuffer[ptr++];\nif (i > INT_SPACE) {\nif (i != INT_SLASH && i != INT_HASH) {\n_inputPtr = ptr;\nreturn i;\n}\n} else if (i == INT_SPACE || i == INT_TAB) {\ni = (int) _inputBuffer[ptr++];\nif (i > INT_SPACE) {\nif (i != INT_SLASH && i != INT_HASH) {\n_inputPtr = ptr;\nreturn i;\n}\n}\n}\n}\n_inputPtr = ptr-1;\nreturn _skipColon2(gotColon);\n}\n\n// Primary loop: no reloading, comment handling\nprivate final int _skipComma(int i) throws IOException\n{\nif (i != INT_COMMA) {\n_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");\n}\nwhile (_inputPtr < _inputEnd) {\ni = (int) _inputBuffer[_inputPtr++];\nif (i > INT_SPACE) {\nif (i == INT_SLASH || i == INT_HASH) {\n--_inputPtr;\nreturn _skipAfterComma2();\n}\nreturn i;\n}\nif (i < INT_SPACE) {\nif (i == INT_LF) {\n++_currInputRow;\n_currInputRowStart = _inputPtr;\n} else if (i == INT_CR) {\n_skipCR();\n} else if (i != INT_TAB) {\n_throwInvalidSpace(i);\n}\n}\n}\nreturn _skipAfterComma2();\n}\n\nprivate final int _skipAfterComma2() throws IOException\n{\nwhile (_inputPtr < _inputEnd || loadMore()) {\nint i = (int) _inputBuffer[_inputPtr++];\nif (i > INT_SPACE) {\nif (i == INT_SLASH) {\n_skipComment();\ncontinue;\n}\nif (i == INT_HASH) {\nif (_skipYAMLComment()) {\ncontinue;\n}\n}\nreturn i;\n}\nif (i < INT_SPACE) {\nif (i == INT_LF) {\n++_currInputRow;\n_currInputRowStart = _inputPtr;\n} else if (i == INT_CR) {\n_skipCR();\n} else if (i != INT_TAB) {\n_throwInvalidSpace(i);\n}\n}\n}\nthrow _constructError(\"Unexpected end-of-input within/between \"+_parsingContext.getTypeDesc()+\" entries\");\n}\n\nprivate final int _skipWSOrEnd() throws IOException\n{\n// Let's handle first character separately since it is likely that\n// it is either non-whitespace; or we have longer run of white space\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) {\nreturn _eofAsNextChar();\n}\n}\nint i = _inputBuffer[_inputPtr++];\nif (i > INT_SPACE) {\nif (i == INT_SLASH || i == INT_HASH) {\n--_inputPtr;\nreturn _skipWSOrEnd2();\n}\nreturn i;\n}\nif (i != INT_SPACE) {\nif (i == INT_LF) {\n++_currInputRow;\n_currInputRowStart = _inputPtr;\n} else if (i == INT_CR) {\n_skipCR();\n} else if (i != INT_TAB) {\n_throwInvalidSpace(i);\n}\n}\n\nwhile (_inputPtr < _inputEnd) {\ni = (int) _inputBuffer[_inputPtr++];\nif (i > INT_SPACE) {\nif (i == INT_SLASH || i == INT_HASH) {\n--_inputPtr;\nreturn _skipWSOrEnd2();\n}\nreturn i;\n}\nif (i != INT_SPACE) {\nif (i == INT_LF) {\n++_currInputRow;\n_currInputRowStart = _inputPtr;\n} else if (i == INT_CR) {\n_skipCR();\n} else if (i != INT_TAB) {\n_throwInvalidSpace(i);\n}\n}\n}\nreturn _skipWSOrEnd2();\n}\n\nprivate int _skipWSOrEnd2() throws IOException\n{\nwhile (true) {\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) { // We ran out of input...\nreturn _eofAsNextChar();\n}\n}\nint i = (int) _inputBuffer[_inputPtr++];\nif (i > INT_SPACE) {\nif (i == INT_SLASH) {\n_skipComment();\ncontinue;\n}\nif (i == INT_HASH) {\nif (_skipYAMLComment()) {\ncontinue;\n}\n}\nreturn i;\n} else if (i != INT_SPACE) {\nif (i == INT_LF) {\n++_currInputRow;\n_currInputRowStart = _inputPtr;\n} else if (i == INT_CR) {\n_skipCR();\n} else if (i != INT_TAB) {\n_throwInvalidSpace(i);\n}\n}\n}\n}\n\nprivate void _skipComment() throws IOException\n{\nif (!isEnabled(Feature.ALLOW_COMMENTS)) {\n_reportUnexpectedChar('/', \"maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)\");\n}\n// First: check which comment (if either) it is:\nif (_inputPtr >= _inputEnd && !loadMore()) {\n_reportInvalidEOF(\" in a comment\");\n}\nchar c = _inputBuffer[_inputPtr++];\nif (c == '/') {\n_skipLine();\n} else if (c == '*') {\n_skipCComment();\n} else {\n_reportUnexpectedChar(c, \"was expecting either '*' or '/' for a comment\");\n}\n}\n\nprivate void _skipCComment() throws IOException\n{\n// Ok: need the matching '*/'\nwhile ((_inputPtr < _inputEnd) || loadMore()) {\nint i = (int) _inputBuffer[_inputPtr++];\nif (i <= '*') {\nif (i == '*') { // end?\nif ((_inputPtr >= _inputEnd) && !loadMore()) {\nbreak;\n}\nif (_inputBuffer[_inputPtr] == INT_SLASH) {\n++_inputPtr;\nreturn;\n}\ncontinue;\n}\nif (i < INT_SPACE) {\nif (i == INT_LF) {\n++_currInputRow;\n_currInputRowStart = _inputPtr;\n} else if (i == INT_CR) {\n_skipCR();\n} else if (i != INT_TAB) {\n_throwInvalidSpace(i);\n}\n}\n}\n}\n_reportInvalidEOF(\" in a comment\");\n}\n\nprivate boolean _skipYAMLComment() throws IOException\n{\nif (!isEnabled(Feature.ALLOW_YAML_COMMENTS)) {\nreturn false;\n}\n_skipLine();\nreturn true;\n}\n\nprivate void _skipLine() throws IOException\n{\n// Ok: need to find EOF or linefeed\nwhile ((_inputPtr < _inputEnd) || loadMore()) {\nint i = (int) _inputBuffer[_inputPtr++];\nif (i < INT_SPACE) {\nif (i == INT_LF) {\n++_currInputRow;\n_currInputRowStart = _inputPtr;\nbreak;\n} else if (i == INT_CR) {\n_skipCR();\nbreak;\n} else if (i != INT_TAB) {\n_throwInvalidSpace(i);\n}\n}\n}\n}\n\n@Override\nprotected char _decodeEscaped() throws IOException\n{\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) {\n_reportInvalidEOF(\" in character escape sequence\");\n}\n}\nchar c = _inputBuffer[_inputPtr++];\n\nswitch ((int) c) {\n// First, ones that are mapped\ncase 'b':\nreturn '\\b';\ncase 't':\nreturn '\\t';\ncase 'n':\nreturn '\\n';\ncase 'f':\nreturn '\\f';\ncase 'r':\nreturn '\\r';\n\n// And these are to be returned as they are\ncase '\"':\ncase '/':\ncase '\\\\':\nreturn c;\n\ncase 'u': // and finally hex-escaped\nbreak;\n\ndefault:\nreturn _handleUnrecognizedCharacterEscape(c);\n}\n\n// Ok, a hex escape. Need 4 characters\nint value = 0;\nfor (int i = 0; i < 4; ++i) {\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) {\n_reportInvalidEOF(\" in character escape sequence\");\n}\n}\nint ch = (int) _inputBuffer[_inputPtr++];\nint digit = CharTypes.charToHex(ch);\nif (digit < 0) {\n_reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n}\nvalue = (value << 4) | digit;\n}\nreturn (char) value;\n}\n\nprivate final void _matchTrue() throws IOException {\nint ptr = _inputPtr;\nif ((ptr + 3) < _inputEnd) {\nfinal char[] b = _inputBuffer;\nif (b[ptr] == 'r' && b[++ptr] == 'u' && b[++ptr] == 'e') {\nchar c = b[++ptr];\nif (c < '0' || c == ']' || c == '}') { // expected/allowed chars\n_inputPtr = ptr;\nreturn;\n}\n}\n}\n// buffer boundary, or problem, offline\n_matchToken(\"true\", 1);\n}\n\nprivate final void _matchFalse() throws IOException {\nint ptr = _inputPtr;\nif ((ptr + 4) < _inputEnd) {\nfinal char[] b = _inputBuffer;\nif (b[ptr] == 'a' && b[++ptr] == 'l' && b[++ptr] == 's' && b[++ptr] == 'e') {\nchar c = b[++ptr];\nif (c < '0' || c == ']' || c == '}') { // expected/allowed chars\n_inputPtr = ptr;\nreturn;\n}\n}\n}\n// buffer boundary, or problem, offline\n_matchToken(\"false\", 1);\n}\n\nprivate final void _matchNull() throws IOException {\nint ptr = _inputPtr;\nif ((ptr + 3) < _inputEnd) {\nfinal char[] b = _inputBuffer;\nif (b[ptr] == 'u' && b[++ptr] == 'l' && b[++ptr] == 'l') {\nchar c = b[++ptr];\nif (c < '0' || c == ']' || c == '}') { // expected/allowed chars\n_inputPtr = ptr;\nreturn;\n}\n}\n}\n// buffer boundary, or problem, offline\n_matchToken(\"null\", 1);\n}",
            "method_id": 10
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser:_parsePosNumber(I)Lcom/fasterxml/jackson/core/JsonToken;",
            "method_body": "private final void _isNextTokenNameYes(int i) throws IOException\n{\n_currToken = JsonToken.FIELD_NAME;\n_updateLocation();\n\nswitch (i) {\ncase '\"':\n_tokenIncomplete = true;\n_nextToken = JsonToken.VALUE_STRING;\nreturn;\ncase '[':\n_nextToken = JsonToken.START_ARRAY;\nreturn;\ncase '{':\n_nextToken = JsonToken.START_OBJECT;\nreturn;\ncase 't':\n_matchToken(\"true\", 1);\n_nextToken = JsonToken.VALUE_TRUE;\nreturn;\ncase 'f':\n_matchToken(\"false\", 1);\n_nextToken = JsonToken.VALUE_FALSE;\nreturn;\ncase 'n':\n_matchToken(\"null\", 1);\n_nextToken = JsonToken.VALUE_NULL;\nreturn;\ncase '-':\n_nextToken = _parseNegNumber();\nreturn;\ncase '0':\ncase '1':\ncase '2':\ncase '3':\ncase '4':\ncase '5':\ncase '6':\ncase '7':\ncase '8':\ncase '9':\n_nextToken = _parsePosNumber(i);\nreturn;\n}\n_nextToken = _handleOddValue(i);\n}\n\nprotected boolean _isNextTokenNameMaybe(int i, String nameToMatch) throws IOException\n{\n// // // and this is back to standard nextToken()\nString name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);\n_parsingContext.setCurrentName(name);\n_currToken = JsonToken.FIELD_NAME;\ni = _skipColon();\n_updateLocation();\nif (i == INT_QUOTE) {\n_tokenIncomplete = true;\n_nextToken = JsonToken.VALUE_STRING;\nreturn nameToMatch.equals(name);\n}\n// Ok: we must have a value... what is it?\nJsonToken t;\nswitch (i) {\ncase '-':\nt = _parseNegNumber();\nbreak;\ncase '0':\ncase '1':\ncase '2':\ncase '3':\ncase '4':\ncase '5':\ncase '6':\ncase '7':\ncase '8':\ncase '9':\nt = _parsePosNumber(i);\nbreak;\ncase 'f':\n_matchFalse();\nt = JsonToken.VALUE_FALSE;\nbreak;\ncase 'n':\n_matchNull();\nt = JsonToken.VALUE_NULL;\nbreak;\ncase 't':\n_matchTrue();\nt = JsonToken.VALUE_TRUE;\nbreak;\ncase '[':\nt = JsonToken.START_ARRAY;\nbreak;\ncase '{':\nt = JsonToken.START_OBJECT;\nbreak;\ndefault:\nt = _handleOddValue(i);\nbreak;\n}\n_nextToken = t;\nreturn nameToMatch.equals(name);\n}\n\nprivate final JsonToken _nextTokenNotInObject(int i) throws IOException\n{\nif (i == INT_QUOTE) {\n_tokenIncomplete = true;\nreturn (_currToken = JsonToken.VALUE_STRING);\n}\nswitch (i) {\ncase '[':\n_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\nreturn (_currToken = JsonToken.START_ARRAY);\ncase '{':\n_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\nreturn (_currToken = JsonToken.START_OBJECT);\ncase 't':\n_matchToken(\"true\", 1);\nreturn (_currToken = JsonToken.VALUE_TRUE);\ncase 'f':\n_matchToken(\"false\", 1);\nreturn (_currToken = JsonToken.VALUE_FALSE);\ncase 'n':\n_matchToken(\"null\", 1);\nreturn (_currToken = JsonToken.VALUE_NULL);\ncase '-':\nreturn (_currToken = _parseNegNumber());\n/* Should we have separate handling for plus? Although\n* it is not allowed per se, it may be erroneously used,\n* and could be indicated by a more specific error message.\n*/\ncase '0':\ncase '1':\ncase '2':\ncase '3':\ncase '4':\ncase '5':\ncase '6':\ncase '7':\ncase '8':\ncase '9':\nreturn (_currToken = _parsePosNumber(i));\n}\nreturn (_currToken = _handleOddValue(i));\n}\n\n// note: identical to one in UTF8StreamJsonParser\n@Override\npublic final String nextTextValue() throws IOException\n{\nif (_currToken == JsonToken.FIELD_NAME) { // mostly copied from '_nextAfterName'\n_nameCopied = false;\nJsonToken t = _nextToken;\n_nextToken = null;\n_currToken = t;\nif (t == JsonToken.VALUE_STRING) {\nif (_tokenIncomplete) {\n_tokenIncomplete = false;\n_finishString();\n}\nreturn _textBuffer.contentsAsString();\n}\nif (t == JsonToken.START_ARRAY) {\n_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n} else if (t == JsonToken.START_OBJECT) {\n_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n}\nreturn null;\n}\n// !!! TODO: optimize this case as well\nreturn (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;\n}\n\n// note: identical to one in Utf8StreamParser\n@Override\npublic final int nextIntValue(int defaultValue) throws IOException\n{\nif (_currToken == JsonToken.FIELD_NAME) {\n_nameCopied = false;\nJsonToken t = _nextToken;\n_nextToken = null;\n_currToken = t;\nif (t == JsonToken.VALUE_NUMBER_INT) {\nreturn getIntValue();\n}\nif (t == JsonToken.START_ARRAY) {\n_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n} else if (t == JsonToken.START_OBJECT) {\n_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n}\nreturn defaultValue;\n}\n// !!! TODO: optimize this case as well\nreturn (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;\n}\n\n// note: identical to one in Utf8StreamParser\n@Override\npublic final long nextLongValue(long defaultValue) throws IOException\n{\nif (_currToken == JsonToken.FIELD_NAME) { // mostly copied from '_nextAfterName'\n_nameCopied = false;\nJsonToken t = _nextToken;\n_nextToken = null;\n_currToken = t;\nif (t == JsonToken.VALUE_NUMBER_INT) {\nreturn getLongValue();\n}\nif (t == JsonToken.START_ARRAY) {\n_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n} else if (t == JsonToken.START_OBJECT) {\n_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n}\nreturn defaultValue;\n}\n// !!! TODO: optimize this case as well\nreturn (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;\n}\n\n// note: identical to one in UTF8StreamJsonParser\n@Override\npublic final Boolean nextBooleanValue() throws IOException\n{\nif (_currToken == JsonToken.FIELD_NAME) { // mostly copied from '_nextAfterName'\n_nameCopied = false;\nJsonToken t = _nextToken;\n_nextToken = null;\n_currToken = t;\nif (t == JsonToken.VALUE_TRUE) {\nreturn Boolean.TRUE;\n}\nif (t == JsonToken.VALUE_FALSE) {\nreturn Boolean.FALSE;\n}\nif (t == JsonToken.START_ARRAY) {\n_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n} else if (t == JsonToken.START_OBJECT) {\n_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n}\nreturn null;\n}\nJsonToken t = nextToken();\nif (t != null) {\nint id = t.id();\nif (id == ID_TRUE) return Boolean.TRUE;\nif (id == ID_FALSE) return Boolean.FALSE;\n}\nreturn null;\n}\n\n/*\n/**********************************************************\n/* Internal methods, number parsing\n/**********************************************************\n*/\n\n/**\n* Initial parsing method for number values. It needs to be able\n* to parse enough input to be able to determine whether the\n* value is to be considered a simple integer value, or a more\n* generic decimal value: latter of which needs to be expressed\n* as a floating point number. The basic rule is that if the number\n* has no fractional or exponential part, it is an integer; otherwise\n* a floating point number.\n*<p>\n* Because much of input has to be processed in any case, no partial\n* parsing is done: all input text will be stored for further\n* processing. However, actual numeric value conversion will be\n* deferred, since it is usually the most complicated and costliest\n* part of processing.\n*/\nprotected final JsonToken _parsePosNumber(int ch) throws IOException\n{\n/* Although we will always be complete with respect to textual\n* representation (that is, all characters will be parsed),\n* actual conversion to a number is deferred. Thus, need to\n* note that no representations are valid yet\n*/\nint ptr = _inputPtr;\nint startPtr = ptr-1; // to include digit already read\nfinal int inputLen = _inputEnd;\n\n// One special case, leading zero(es):\nif (ch == INT_0) {\nreturn _parseNumber2(false, startPtr);\n}\n\n/* First, let's see if the whole number is contained within\n* the input buffer unsplit. This should be the common case;\n* and to simplify processing, we will just reparse contents\n* in the alternative case (number split on buffer boundary)\n*/\n\nint intLen = 1; // already got one\n\n// First let's get the obligatory integer part:\nint_loop:\nwhile (true) {\nif (ptr >= inputLen) {\n_inputPtr = startPtr;\nreturn _parseNumber2(false, startPtr);\n}\nch = (int) _inputBuffer[ptr++];\nif (ch < INT_0 || ch > INT_9) {\nbreak int_loop;\n}\n++intLen;\n}\nif (ch == INT_PERIOD || ch == INT_e || ch == INT_E) {\n_inputPtr = ptr;\nreturn _parseFloat(ch, startPtr, ptr, false, intLen);\n}\n// Got it all: let's add to text buffer for parsing, access\n--ptr; // need to push back following separator\n_inputPtr = ptr;\n// As per #105, need separating space between root values; check here\nif (_parsingContext.inRoot()) {\n_verifyRootSpace(ch);\n}\nint len = ptr-startPtr;\n_textBuffer.resetWithShared(_inputBuffer, startPtr, len);\nreturn resetInt(false, intLen);\n}\n\nprivate final JsonToken _parseFloat(int ch, int startPtr, int ptr, boolean neg, int intLen)\nthrows IOException\n{\nfinal int inputLen = _inputEnd;\nint fractLen = 0;\n\n// And then see if we get other parts\nif (ch == '.') { // yes, fraction\nfract_loop:\nwhile (true) {\nif (ptr >= inputLen) {\nreturn _parseNumber2(neg, startPtr);\n}\nch = (int) _inputBuffer[ptr++];\nif (ch < INT_0 || ch > INT_9) {\nbreak fract_loop;\n}\n++fractLen;\n}\n// must be followed by sequence of ints, one minimum\nif (fractLen == 0) {\nreportUnexpectedNumberChar(ch, \"Decimal point not followed by a digit\");\n}\n}\nint expLen = 0;\nif (ch == 'e' || ch == 'E') { // and/or exponent\nif (ptr >= inputLen) {\n_inputPtr = startPtr;\nreturn _parseNumber2(neg, startPtr);\n}\n// Sign indicator?\nch = (int) _inputBuffer[ptr++];\nif (ch == INT_MINUS || ch == INT_PLUS) { // yup, skip for now\nif (ptr >= inputLen) {\n_inputPtr = startPtr;\nreturn _parseNumber2(neg, startPtr);\n}\nch = (int) _inputBuffer[ptr++];\n}\nwhile (ch <= INT_9 && ch >= INT_0) {\n++expLen;\nif (ptr >= inputLen) {\n_inputPtr = startPtr;\nreturn _parseNumber2(neg, startPtr);\n}\nch = (int) _inputBuffer[ptr++];\n}\n// must be followed by sequence of ints, one minimum\nif (expLen == 0) {\nreportUnexpectedNumberChar(ch, \"Exponent indicator not followed by a digit\");\n}\n}\n--ptr; // need to push back following separator\n_inputPtr = ptr;\n// As per #105, need separating space between root values; check here\nif (_parsingContext.inRoot()) {\n_verifyRootSpace(ch);\n}\nint len = ptr-startPtr;\n_textBuffer.resetWithShared(_inputBuffer, startPtr, len);\n// And there we have it!\nreturn resetFloat(neg, intLen, fractLen, expLen);\n}\n\nprotected final JsonToken _parseNegNumber() throws IOException\n{\nint ptr = _inputPtr;\nint startPtr = ptr-1; // to include sign/digit already read\nfinal int inputLen = _inputEnd;\n\nif (ptr >= inputLen) {\nreturn _parseNumber2(true, startPtr);\n}\nint ch = _inputBuffer[ptr++];\n// First check: must have a digit to follow minus sign\nif (ch > INT_9 || ch < INT_0) {\n_inputPtr = ptr;\nreturn _handleInvalidNumberStart(ch, true);\n}\n// One special case, leading zero(es):\nif (ch == INT_0) {\nreturn _parseNumber2(true, startPtr);\n}\nint intLen = 1; // already got one\n\n// First let's get the obligatory integer part:\nint_loop:\nwhile (true) {\nif (ptr >= inputLen) {\nreturn _parseNumber2(true, startPtr);\n}\nch = (int) _inputBuffer[ptr++];\nif (ch < INT_0 || ch > INT_9) {\nbreak int_loop;\n}\n++intLen;\n}\n\nif (ch == INT_PERIOD || ch == INT_e || ch == INT_E) {\n_inputPtr = ptr;\nreturn _parseFloat(ch, startPtr, ptr, true, intLen);\n}\n--ptr;\n_inputPtr = ptr;\nif (_parsingContext.inRoot()) {\n_verifyRootSpace(ch);\n}\nint len = ptr-startPtr;\n_textBuffer.resetWithShared(_inputBuffer, startPtr, len);\nreturn resetInt(true, intLen);\n}\n\n/**\n* Method called to parse a number, when the primary parse\n* method has failed to parse it, due to it being split on\n* buffer boundary. As a result code is very similar, except\n* that it has to explicitly copy contents to the text buffer\n* instead of just sharing the main input buffer.\n*/\nprivate final JsonToken _parseNumber2(boolean neg, int startPtr) throws IOException\n{\n_inputPtr = neg ? (startPtr+1) : startPtr;\nchar[] outBuf = _textBuffer.emptyAndGetCurrentSegment();\nint outPtr = 0;\n\n// Need to prepend sign?\nif (neg) {\noutBuf[outPtr++] = '-';\n}\n\n// This is the place to do leading-zero check(s) too:\nint intLen = 0;\nchar c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++] : getNextChar(\"No digit following minus sign\");\nif (c == '0') {\nc = _verifyNoLeadingZeroes();\n}\nboolean eof = false;\n\n// Ok, first the obligatory integer part:\nint_loop:\nwhile (c >= '0' && c <= '9') {\n++intLen;\nif (outPtr >= outBuf.length) {\noutBuf = _textBuffer.finishCurrentSegment();\noutPtr = 0;\n}\noutBuf[outPtr++] = c;\nif (_inputPtr >= _inputEnd && !loadMore()) {\n// EOF is legal for main level int values\nc = CHAR_NULL;\neof = true;\nbreak int_loop;\n}\nc = _inputBuffer[_inputPtr++];\n}\n// Also, integer part is not optional\nif (intLen == 0) {\nreturn _handleInvalidNumberStart(c, neg);\n}\n\nint fractLen = 0;\n// And then see if we get other parts\nif (c == '.') { // yes, fraction\noutBuf[outPtr++] = c;\n\nfract_loop:\nwhile (true) {\nif (_inputPtr >= _inputEnd && !loadMore()) {\neof = true;\nbreak fract_loop;\n}\nc = _inputBuffer[_inputPtr++];\nif (c < INT_0 || c > INT_9) {\nbreak fract_loop;\n}\n++fractLen;\nif (outPtr >= outBuf.length) {\noutBuf = _textBuffer.finishCurrentSegment();\noutPtr = 0;\n}\noutBuf[outPtr++] = c;\n}\n// must be followed by sequence of ints, one minimum\nif (fractLen == 0) {\nreportUnexpectedNumberChar(c, \"Decimal point not followed by a digit\");\n}\n}\n\nint expLen = 0;\nif (c == 'e' || c == 'E') { // exponent?\nif (outPtr >= outBuf.length) {\noutBuf = _textBuffer.finishCurrentSegment();\noutPtr = 0;\n}\noutBuf[outPtr++] = c;\n// Not optional, can require that we get one more char\nc = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++]\n: getNextChar(\"expected a digit for number exponent\");\n// Sign indicator?\nif (c == '-' || c == '+') {\nif (outPtr >= outBuf.length) {\noutBuf = _textBuffer.finishCurrentSegment();\noutPtr = 0;\n}\noutBuf[outPtr++] = c;\n// Likewise, non optional:\nc = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++]\n: getNextChar(\"expected a digit for number exponent\");\n}\n\nexp_loop:\nwhile (c <= INT_9 && c >= INT_0) {\n++expLen;\nif (outPtr >= outBuf.length) {\noutBuf = _textBuffer.finishCurrentSegment();\noutPtr = 0;\n}\noutBuf[outPtr++] = c;\nif (_inputPtr >= _inputEnd && !loadMore()) {\neof = true;\nbreak exp_loop;\n}\nc = _inputBuffer[_inputPtr++];\n}\n// must be followed by sequence of ints, one minimum\nif (expLen == 0) {\nreportUnexpectedNumberChar(c, \"Exponent indicator not followed by a digit\");\n}\n}\n\n// Ok; unless we hit end-of-input, need to push last char read back\nif (!eof) {\n--_inputPtr;\nif (_parsingContext.inRoot()) {\n_verifyRootSpace(c);\n}\n}\n_textBuffer.setCurrentLength(outPtr);\n// And there we have it!\nreturn reset(neg, intLen, fractLen, expLen);\n}\n\n/**\n* Method called when we have seen one zero, and want to ensure\n* it is not followed by another\n*/\nprivate final char _verifyNoLeadingZeroes() throws IOException\n{\n// Fast case first:\nif (_inputPtr < _inputEnd) {\nchar ch = _inputBuffer[_inputPtr];\n// if not followed by a number (probably '.'); return zero as is, to be included\nif (ch < '0' || ch > '9') {\nreturn '0';\n}\n}\n// and offline the less common case\nreturn _verifyNLZ2();\n}\n\nprivate char _verifyNLZ2() throws IOException\n{\nif (_inputPtr >= _inputEnd && !loadMore()) {\nreturn '0';\n}\nchar ch = _inputBuffer[_inputPtr];\nif (ch < '0' || ch > '9') {\nreturn '0';\n}\nif (!isEnabled(Feature.ALLOW_NUMERIC_LEADING_ZEROS)) {\nreportInvalidNumber(\"Leading zeroes not allowed\");\n}\n// if so, just need to skip either all zeroes (if followed by number); or all but one (if non-number)\n++_inputPtr; // Leading zero to be skipped\nif (ch == INT_0) {\nwhile (_inputPtr < _inputEnd || loadMore()) {\nch = _inputBuffer[_inputPtr];\nif (ch < '0' || ch > '9') { // followed by non-number; retain one zero\nreturn '0';\n}\n++_inputPtr; // skip previous zero\nif (ch != '0') { // followed by other number; return\nbreak;\n}\n}\n}\nreturn ch;\n}\n\n/**\n* Method called if expected numeric value (due to leading sign) does not\n* look like a number\n*/\nprotected JsonToken _handleInvalidNumberStart(int ch, boolean negative) throws IOException\n{\nif (ch == 'I') {\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) { _reportInvalidEOFInValue(); }\n}\nch = _inputBuffer[_inputPtr++];\nif (ch == 'N') {\nString match = negative ? \"-INF\" :\"+INF\";\n_matchToken(match, 3);\nif (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\nreturn resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);\n}\n_reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n} else if (ch == 'n') {\nString match = negative ? \"-Infinity\" :\"+Infinity\";\n_matchToken(match, 3);\nif (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\nreturn resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);\n}\n_reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n}\n}\nreportUnexpectedNumberChar(ch, \"expected digit (0-9) to follow minus sign, for valid numeric value\");\nreturn null;\n}\n\n/**\n* Method called to ensure that a root-value is followed by a space\n* token.\n*<p>\n* NOTE: caller MUST ensure there is at least one character available;\n* and that input pointer is AT given char (not past)\n*/\nprivate final void _verifyRootSpace(int ch) throws IOException\n{\n// caller had pushed it back, before calling; reset\n++_inputPtr;\nswitch (ch) {\ncase ' ':\ncase '\\t':\nreturn;\ncase '\\r':\n_skipCR();\nreturn;\ncase '\\n':\n++_currInputRow;\n_currInputRowStart = _inputPtr;\nreturn;\n}\n_reportMissingRootWS(ch);\n}\n\n/*\n/**********************************************************\n/* Internal methods, secondary parsing\n/**********************************************************\n*/\n\nprotected final String _parseName() throws IOException\n{\n// First: let's try to see if we have a simple name: one that does\n// not cross input buffer boundary, and does not contain escape sequences.\nint ptr = _inputPtr;\nint hash = _hashSeed;\nfinal int[] codes = _icLatin1;\n\nwhile (ptr < _inputEnd) {\nint ch = _inputBuffer[ptr];\nif (ch < codes.length && codes[ch] != 0) {\nif (ch == '\"') {\nint start = _inputPtr;\n_inputPtr = ptr+1; // to skip the quote\nreturn _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);\n}\nbreak;\n}\nhash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;\n++ptr;\n}\nint start = _inputPtr;\n_inputPtr = ptr;\nreturn _parseName2(start, hash, INT_QUOTE);\n}\n\nprivate String _parseName2(int startPtr, int hash, int endChar) throws IOException\n{\n_textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));\n\n/* Output pointers; calls will also ensure that the buffer is\n* not shared and has room for at least one more char.\n*/\nchar[] outBuf = _textBuffer.getCurrentSegment();\nint outPtr = _textBuffer.getCurrentSegmentSize();\n\nwhile (true) {\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) {\n_reportInvalidEOF(\": was expecting closing '\"+((char) endChar)+\"' for name\");\n}\n}\nchar c = _inputBuffer[_inputPtr++];\nint i = (int) c;\nif (i <= INT_BACKSLASH) {\nif (i == INT_BACKSLASH) {\n/* Although chars outside of BMP are to be escaped as\n* an UTF-16 surrogate pair, does that affect decoding?\n* For now let's assume it does not.\n*/\nc = _decodeEscaped();\n} else if (i <= endChar) {\nif (i == endChar) {\nbreak;\n}\nif (i < INT_SPACE) {\n_throwUnquotedSpace(i, \"name\");\n}\n}\n}\nhash = (hash * CharsToNameCanonicalizer.HASH_MULT) + c;\n// Ok, let's add char to output:\noutBuf[outPtr++] = c;\n\n// Need more room?\nif (outPtr >= outBuf.length) {\noutBuf = _textBuffer.finishCurrentSegment();\noutPtr = 0;\n}\n}\n_textBuffer.setCurrentLength(outPtr);\n{\nTextBuffer tb = _textBuffer;\nchar[] buf = tb.getTextBuffer();\nint start = tb.getTextOffset();\nint len = tb.size();\nreturn _symbols.findSymbol(buf, start, len, hash);\n}\n}\n\n/**\n* Method called when we see non-white space character other\n* than double quote, when expecting a field name.\n* In standard mode will just throw an expection; but\n* in non-standard modes may be able to parse name.\n*/\nprotected String _handleOddName(int i) throws IOException\n{\n// [JACKSON-173]: allow single quotes\nif (i == '\\'' && isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {\nreturn _parseAposName();\n}\n// [JACKSON-69]: allow unquoted names if feature enabled:\nif (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES)) {\n_reportUnexpectedChar(i, \"was expecting double-quote to start field name\");\n}\nfinal int[] codes = CharTypes.getInputCodeLatin1JsNames();\nfinal int maxCode = codes.length;\n\n// Also: first char must be a valid name char, but NOT be number\nboolean firstOk;\n\nif (i < maxCode) { // identifier, or a number ([Issue#102])\nfirstOk = (codes[i] == 0);\n} else {\nfirstOk = Character.isJavaIdentifierPart((char) i);\n}\nif (!firstOk) {\n_reportUnexpectedChar(i, \"was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name\");\n}\nint ptr = _inputPtr;\nint hash = _hashSeed;\nfinal int inputLen = _inputEnd;\n\nif (ptr < inputLen) {\ndo {\nint ch = _inputBuffer[ptr];\nif (ch < maxCode) {\nif (codes[ch] != 0) {\nint start = _inputPtr-1; // -1 to bring back first char\n_inputPtr = ptr;\nreturn _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);\n}\n} else if (!Character.isJavaIdentifierPart((char) ch)) {\nint start = _inputPtr-1; // -1 to bring back first char\n_inputPtr = ptr;\nreturn _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);\n}\nhash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;\n++ptr;\n} while (ptr < inputLen);\n}\nint start = _inputPtr-1;\n_inputPtr = ptr;\nreturn _handleOddName2(start, hash, codes);\n}\n\nprotected String _parseAposName() throws IOException\n{\n// Note: mostly copy of_parseFieldName\nint ptr = _inputPtr;\nint hash = _hashSeed;\nfinal int inputLen = _inputEnd;\n\nif (ptr < inputLen) {\nfinal int[] codes = _icLatin1;\nfinal int maxCode = codes.length;\n\ndo {\nint ch = _inputBuffer[ptr];\nif (ch == '\\'') {\nint start = _inputPtr;\n_inputPtr = ptr+1; // to skip the quote\nreturn _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);\n}\nif (ch < maxCode && codes[ch] != 0) {\nbreak;\n}\nhash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;\n++ptr;\n} while (ptr < inputLen);\n}\n\nint start = _inputPtr;\n_inputPtr = ptr;\n\nreturn _parseName2(start, hash, '\\'');\n}\n\n/**\n* Method for handling cases where first non-space character\n* of an expected value token is not legal for standard JSON content.\n*/\nprotected JsonToken _handleOddValue(int i) throws IOException\n{\n// Most likely an error, unless we are to allow single-quote-strings\nswitch (i) {\ncase '\\'':\n/* [JACKSON-173]: allow single quotes. Unlike with regular\n* Strings, we'll eagerly parse contents; this so that there's\n* no need to store information on quote char used.\n*\n* Also, no separation to fast/slow parsing; we'll just do\n* one regular (~= slowish) parsing, to keep code simple\n*/\nif (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {\nreturn _handleApos();\n}\nbreak;\ncase 'N':\n_matchToken(\"NaN\", 1);\nif (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\nreturn resetAsNaN(\"NaN\", Double.NaN);\n}\n_reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\nbreak;\ncase 'I':\n_matchToken(\"Infinity\", 1);\nif (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\nreturn resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);\n}\n_reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\nbreak;\ncase '+': // note: '-' is taken as number\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) {\n_reportInvalidEOFInValue();\n}\n}\nreturn _handleInvalidNumberStart(_inputBuffer[_inputPtr++], false);\n}\n// [Issue#77] Try to decode most likely token\nif (Character.isJavaIdentifierStart(i)) {\n_reportInvalidToken(\"\"+((char) i), \"('true', 'false' or 'null')\");\n}\n// but if it doesn't look like a token:\n_reportUnexpectedChar(i, \"expected a valid value (number, String, array, object, 'true', 'false' or 'null')\");\nreturn null;\n}\n\nprotected JsonToken _handleApos() throws IOException\n{\nchar[] outBuf = _textBuffer.emptyAndGetCurrentSegment();\nint outPtr = _textBuffer.getCurrentSegmentSize();\n\nwhile (true) {\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) {\n_reportInvalidEOF(\": was expecting closing quote for a string value\");\n}\n}\nchar c = _inputBuffer[_inputPtr++];\nint i = (int) c;\nif (i <= '\\\\') {\nif (i == '\\\\') {\n/* Although chars outside of BMP are to be escaped as\n* an UTF-16 surrogate pair, does that affect decoding?\n* For now let's assume it does not.\n*/\nc = _decodeEscaped();\n} else if (i <= '\\'') {\nif (i == '\\'') {\nbreak;\n}\nif (i < INT_SPACE) {\n_throwUnquotedSpace(i, \"string value\");\n}\n}\n}\n// Need more room?\nif (outPtr >= outBuf.length) {\noutBuf = _textBuffer.finishCurrentSegment();\noutPtr = 0;\n}\n// Ok, let's add char to output:\noutBuf[outPtr++] = c;\n}\n_textBuffer.setCurrentLength(outPtr);\nreturn JsonToken.VALUE_STRING;\n}\n\nprivate String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException\n{\n_textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));\nchar[] outBuf = _textBuffer.getCurrentSegment();\nint outPtr = _textBuffer.getCurrentSegmentSize();\nfinal int maxCode = codes.length;\n\nwhile (true) {\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) { // acceptable for now (will error out later)\nbreak;\n}\n}\nchar c = _inputBuffer[_inputPtr];\nint i = (int) c;\nif (i <= maxCode) {\nif (codes[i] != 0) {\nbreak;\n}\n} else if (!Character.isJavaIdentifierPart(c)) {\nbreak;\n}\n++_inputPtr;\nhash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i;\n// Ok, let's add char to output:\noutBuf[outPtr++] = c;\n\n// Need more room?\nif (outPtr >= outBuf.length) {\noutBuf = _textBuffer.finishCurrentSegment();\noutPtr = 0;\n}\n}\n_textBuffer.setCurrentLength(outPtr);\n{\nTextBuffer tb = _textBuffer;\nchar[] buf = tb.getTextBuffer();\nint start = tb.getTextOffset();\nint len = tb.size();\n\nreturn _symbols.findSymbol(buf, start, len, hash);\n}\n}\n\n@Override\nprotected final void _finishString() throws IOException\n{\n/* First: let's try to see if we have simple String value: one\n* that does not cross input buffer boundary, and does not\n* contain escape sequences.\n*/\nint ptr = _inputPtr;\nfinal int inputLen = _inputEnd;\n\nif (ptr < inputLen) {\nfinal int[] codes = _icLatin1;\nfinal int maxCode = codes.length;\n\ndo {\nint ch = _inputBuffer[ptr];\nif (ch < maxCode && codes[ch] != 0) {\nif (ch == '\"') {\n_textBuffer.resetWithShared(_inputBuffer, _inputPtr, (ptr-_inputPtr));\n_inputPtr = ptr+1;\n// Yes, we got it all\nreturn;\n}\nbreak;\n}\n++ptr;\n} while (ptr < inputLen);\n}\n\n/* Either ran out of input, or bumped into an escape\n* sequence...\n*/\n_textBuffer.resetWithCopy(_inputBuffer, _inputPtr, (ptr-_inputPtr));\n_inputPtr = ptr;\n_finishString2();\n}\n\nprotected void _finishString2() throws IOException\n{\nchar[] outBuf = _textBuffer.getCurrentSegment();\nint outPtr = _textBuffer.getCurrentSegmentSize();\nfinal int[] codes = _icLatin1;\nfinal int maxCode = codes.length;\n\nwhile (true) {\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) {\n_reportInvalidEOF(\": was expecting closing quote for a string value\");\n}\n}\nchar c = _inputBuffer[_inputPtr++];\nint i = (int) c;\nif (i < maxCode && codes[i] != 0) {\nif (i == INT_QUOTE) {\nbreak;\n} else if (i == INT_BACKSLASH) {\n/* Although chars outside of BMP are to be escaped as\n* an UTF-16 surrogate pair, does that affect decoding?\n* For now let's assume it does not.\n*/\nc = _decodeEscaped();\n} else if (i < INT_SPACE) {\n_throwUnquotedSpace(i, \"string value\");\n} // anything else?\n}\n// Need more room?\nif (outPtr >= outBuf.length) {\noutBuf = _textBuffer.finishCurrentSegment();\noutPtr = 0;\n}\n// Ok, let's add char to output:\noutBuf[outPtr++] = c;\n}\n_textBuffer.setCurrentLength(outPtr);\n}\n\n/**\n* Method called to skim through rest of unparsed String value,\n* if it is not needed. This can be done bit faster if contents\n* need not be stored for future access.\n*/\nprotected final void _skipString() throws IOException\n{\n_tokenIncomplete = false;\n\nint inPtr = _inputPtr;\nint inLen = _inputEnd;\nchar[] inBuf = _inputBuffer;\n\nwhile (true) {\nif (inPtr >= inLen) {\n_inputPtr = inPtr;\nif (!loadMore()) {\n_reportInvalidEOF(\": was expecting closing quote for a string value\");\n}\ninPtr = _inputPtr;\ninLen = _inputEnd;\n}\nchar c = inBuf[inPtr++];\nint i = (int) c;\nif (i <= INT_BACKSLASH) {\nif (i == INT_BACKSLASH) {\n// Although chars outside of BMP are to be escaped as an UTF-16 surrogate pair,\n// does that affect decoding? For now let's assume it does not.\n_inputPtr = inPtr;\n/*c = */ _decodeEscaped();\ninPtr = _inputPtr;\ninLen = _inputEnd;\n} else if (i <= INT_QUOTE) {\nif (i == INT_QUOTE) {\n_inputPtr = inPtr;\nbreak;\n}\nif (i < INT_SPACE) {\n_inputPtr = inPtr;\n_throwUnquotedSpace(i, \"string value\");\n}\n}\n}\n}\n}\n\n/*\n/**********************************************************\n/* Internal methods, other parsing\n/**********************************************************\n*/\n\n/**\n* We actually need to check the character value here\n* (to see if we have \\n following \\r).\n*/\nprotected final void _skipCR() throws IOException {\nif (_inputPtr < _inputEnd || loadMore()) {\nif (_inputBuffer[_inputPtr] == '\\n') {\n++_inputPtr;\n}\n}\n++_currInputRow;\n_currInputRowStart = _inputPtr;\n}\n\nprivate final int _skipColon() throws IOException\n{\nif ((_inputPtr + 4) >= _inputEnd) {\nreturn _skipColon2(false);\n}\nchar c = _inputBuffer[_inputPtr];\nif (c == ':') { // common case, no leading space\nint i = _inputBuffer[++_inputPtr];\nif (i > INT_SPACE) { // nor trailing\nif (i == INT_SLASH || i == INT_HASH) {\nreturn _skipColon2(true);\n}\n++_inputPtr;\nreturn i;\n}\nif (i == INT_SPACE || i == INT_TAB) {\ni = (int) _inputBuffer[++_inputPtr];\nif (i > INT_SPACE) {\nif (i == INT_SLASH || i == INT_HASH) {\nreturn _skipColon2(true);\n}\n++_inputPtr;\nreturn i;\n}\n}\nreturn _skipColon2(true); // true -> skipped colon\n}\nif (c == ' ' || c == '\\t') {\nc = _inputBuffer[++_inputPtr];\n}\nif (c == ':') {\nint i = _inputBuffer[++_inputPtr];\nif (i > INT_SPACE) {\nif (i == INT_SLASH || i == INT_HASH) {\nreturn _skipColon2(true);\n}\n++_inputPtr;\nreturn i;\n}\nif (i == INT_SPACE || i == INT_TAB) {\ni = (int) _inputBuffer[++_inputPtr];\nif (i > INT_SPACE) {\nif (i == INT_SLASH || i == INT_HASH) {\nreturn _skipColon2(true);\n}\n++_inputPtr;\nreturn i;\n}\n}\nreturn _skipColon2(true);\n}\nreturn _skipColon2(false);\n}\n\nprivate final int _skipColon2(boolean gotColon) throws IOException\n{\nwhile (true) {\nif (_inputPtr >= _inputEnd) {\nloadMoreGuaranteed();\n}\nint i = (int) _inputBuffer[_inputPtr++];\nif (i > INT_SPACE) {\nif (i == INT_SLASH) {\n_skipComment();\ncontinue;\n}\nif (i == INT_HASH) {\nif (_skipYAMLComment()) {\ncontinue;\n}\n}\nif (gotColon) {\nreturn i;\n}\nif (i != INT_COLON) {\n_reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");\n}\ngotColon = true;\ncontinue;\n}\nif (i < INT_SPACE) {\nif (i == INT_LF) {\n++_currInputRow;\n_currInputRowStart = _inputPtr;\n} else if (i == INT_CR) {\n_skipCR();\n} else if (i != INT_TAB) {\n_throwInvalidSpace(i);\n}\n}\n}\n}\n\n// Variant called when we know there's at least 4 more bytes available\nprivate final int _skipColonFast(int ptr) throws IOException\n{\nint i = (int) _inputBuffer[ptr++];\nif (i == INT_COLON) { // common case, no leading space\ni = _inputBuffer[ptr++];\nif (i > INT_SPACE) { // nor trailing\nif (i != INT_SLASH && i != INT_HASH) {\n_inputPtr = ptr;\nreturn i;\n}\n} else if (i == INT_SPACE || i == INT_TAB) {\ni = (int) _inputBuffer[ptr++];\nif (i > INT_SPACE) {\nif (i != INT_SLASH && i != INT_HASH) {\n_inputPtr = ptr;\nreturn i;\n}\n}\n}\n_inputPtr = ptr-1;\nreturn _skipColon2(true); // true -> skipped colon\n}\nif (i == INT_SPACE || i == INT_TAB) {\ni = _inputBuffer[ptr++];\n}\nboolean gotColon = (i == INT_COLON);\nif (gotColon) {\ni = _inputBuffer[ptr++];\nif (i > INT_SPACE) {\nif (i != INT_SLASH && i != INT_HASH) {\n_inputPtr = ptr;\nreturn i;\n}\n} else if (i == INT_SPACE || i == INT_TAB) {\ni = (int) _inputBuffer[ptr++];\nif (i > INT_SPACE) {\nif (i != INT_SLASH && i != INT_HASH) {\n_inputPtr = ptr;\nreturn i;\n}\n}\n}\n}\n_inputPtr = ptr-1;\nreturn _skipColon2(gotColon);\n}\n\n// Primary loop: no reloading, comment handling\nprivate final int _skipComma(int i) throws IOException\n{\nif (i != INT_COMMA) {\n_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");\n}\nwhile (_inputPtr < _inputEnd) {\ni = (int) _inputBuffer[_inputPtr++];\nif (i > INT_SPACE) {\nif (i == INT_SLASH || i == INT_HASH) {\n--_inputPtr;\nreturn _skipAfterComma2();\n}\nreturn i;\n}\nif (i < INT_SPACE) {\nif (i == INT_LF) {\n++_currInputRow;\n_currInputRowStart = _inputPtr;\n} else if (i == INT_CR) {\n_skipCR();\n} else if (i != INT_TAB) {\n_throwInvalidSpace(i);\n}\n}\n}\nreturn _skipAfterComma2();\n}\n\nprivate final int _skipAfterComma2() throws IOException\n{\nwhile (_inputPtr < _inputEnd || loadMore()) {\nint i = (int) _inputBuffer[_inputPtr++];\nif (i > INT_SPACE) {\nif (i == INT_SLASH) {\n_skipComment();\ncontinue;\n}\nif (i == INT_HASH) {\nif (_skipYAMLComment()) {\ncontinue;\n}\n}\nreturn i;\n}\nif (i < INT_SPACE) {\nif (i == INT_LF) {\n++_currInputRow;\n_currInputRowStart = _inputPtr;\n} else if (i == INT_CR) {\n_skipCR();\n} else if (i != INT_TAB) {\n_throwInvalidSpace(i);\n}\n}\n}\nthrow _constructError(\"Unexpected end-of-input within/between \"+_parsingContext.getTypeDesc()+\" entries\");\n}\n\nprivate final int _skipWSOrEnd() throws IOException\n{\n// Let's handle first character separately since it is likely that\n// it is either non-whitespace; or we have longer run of white space\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) {\nreturn _eofAsNextChar();\n}\n}\nint i = _inputBuffer[_inputPtr++];\nif (i > INT_SPACE) {\nif (i == INT_SLASH || i == INT_HASH) {\n--_inputPtr;\nreturn _skipWSOrEnd2();\n}\nreturn i;\n}\nif (i != INT_SPACE) {\nif (i == INT_LF) {\n++_currInputRow;\n_currInputRowStart = _inputPtr;\n} else if (i == INT_CR) {\n_skipCR();\n} else if (i != INT_TAB) {\n_throwInvalidSpace(i);\n}\n}\n\nwhile (_inputPtr < _inputEnd) {\ni = (int) _inputBuffer[_inputPtr++];\nif (i > INT_SPACE) {\nif (i == INT_SLASH || i == INT_HASH) {\n--_inputPtr;\nreturn _skipWSOrEnd2();\n}\nreturn i;\n}\nif (i != INT_SPACE) {\nif (i == INT_LF) {\n++_currInputRow;\n_currInputRowStart = _inputPtr;\n} else if (i == INT_CR) {\n_skipCR();\n} else if (i != INT_TAB) {\n_throwInvalidSpace(i);\n}\n}\n}\nreturn _skipWSOrEnd2();\n}\n\nprivate int _skipWSOrEnd2() throws IOException\n{\nwhile (true) {\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) { // We ran out of input...\nreturn _eofAsNextChar();\n}\n}\nint i = (int) _inputBuffer[_inputPtr++];\nif (i > INT_SPACE) {\nif (i == INT_SLASH) {\n_skipComment();\ncontinue;\n}\nif (i == INT_HASH) {\nif (_skipYAMLComment()) {\ncontinue;\n}\n}\nreturn i;\n} else if (i != INT_SPACE) {\nif (i == INT_LF) {\n++_currInputRow;\n_currInputRowStart = _inputPtr;\n} else if (i == INT_CR) {\n_skipCR();\n} else if (i != INT_TAB) {\n_throwInvalidSpace(i);\n}\n}\n}\n}\n\nprivate void _skipComment() throws IOException\n{\nif (!isEnabled(Feature.ALLOW_COMMENTS)) {\n_reportUnexpectedChar('/', \"maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)\");\n}\n// First: check which comment (if either) it is:\nif (_inputPtr >= _inputEnd && !loadMore()) {\n_reportInvalidEOF(\" in a comment\");\n}\nchar c = _inputBuffer[_inputPtr++];\nif (c == '/') {\n_skipLine();\n} else if (c == '*') {\n_skipCComment();\n} else {\n_reportUnexpectedChar(c, \"was expecting either '*' or '/' for a comment\");\n}\n}\n\nprivate void _skipCComment() throws IOException\n{\n// Ok: need the matching '*/'\nwhile ((_inputPtr < _inputEnd) || loadMore()) {\nint i = (int) _inputBuffer[_inputPtr++];\nif (i <= '*') {\nif (i == '*') { // end?\nif ((_inputPtr >= _inputEnd) && !loadMore()) {\nbreak;\n}\nif (_inputBuffer[_inputPtr] == INT_SLASH) {\n++_inputPtr;\nreturn;\n}\ncontinue;\n}\nif (i < INT_SPACE) {\nif (i == INT_LF) {\n++_currInputRow;\n_currInputRowStart = _inputPtr;\n} else if (i == INT_CR) {\n_skipCR();\n} else if (i != INT_TAB) {\n_throwInvalidSpace(i);\n}\n}\n}\n}\n_reportInvalidEOF(\" in a comment\");\n}\n\nprivate boolean _skipYAMLComment() throws IOException\n{\nif (!isEnabled(Feature.ALLOW_YAML_COMMENTS)) {\nreturn false;\n}\n_skipLine();\nreturn true;\n}\n\nprivate void _skipLine() throws IOException\n{\n// Ok: need to find EOF or linefeed\nwhile ((_inputPtr < _inputEnd) || loadMore()) {\nint i = (int) _inputBuffer[_inputPtr++];\nif (i < INT_SPACE) {\nif (i == INT_LF) {\n++_currInputRow;\n_currInputRowStart = _inputPtr;\nbreak;\n} else if (i == INT_CR) {\n_skipCR();\nbreak;\n} else if (i != INT_TAB) {\n_throwInvalidSpace(i);\n}\n}\n}\n}\n\n@Override\nprotected char _decodeEscaped() throws IOException\n{\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) {\n_reportInvalidEOF(\" in character escape sequence\");\n}\n}\nchar c = _inputBuffer[_inputPtr++];\n\nswitch ((int) c) {\n// First, ones that are mapped\ncase 'b':\nreturn '\\b';\ncase 't':\nreturn '\\t';\ncase 'n':\nreturn '\\n';\ncase 'f':\nreturn '\\f';\ncase 'r':\nreturn '\\r';\n\n// And these are to be returned as they are\ncase '\"':\ncase '/':\ncase '\\\\':\nreturn c;\n\ncase 'u': // and finally hex-escaped\nbreak;\n\ndefault:\nreturn _handleUnrecognizedCharacterEscape(c);\n}\n\n// Ok, a hex escape. Need 4 characters\nint value = 0;\nfor (int i = 0; i < 4; ++i) {\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) {\n_reportInvalidEOF(\" in character escape sequence\");\n}\n}\nint ch = (int) _inputBuffer[_inputPtr++];\nint digit = CharTypes.charToHex(ch);\nif (digit < 0) {\n_reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n}\nvalue = (value << 4) | digit;\n}\nreturn (char) value;\n}\n\nprivate final void _matchTrue() throws IOException {\nint ptr = _inputPtr;\nif ((ptr + 3) < _inputEnd) {\nfinal char[] b = _inputBuffer;\nif (b[ptr] == 'r' && b[++ptr] == 'u' && b[++ptr] == 'e') {\nchar c = b[++ptr];\nif (c < '0' || c == ']' || c == '}') { // expected/allowed chars\n_inputPtr = ptr;\nreturn;\n}\n}\n}\n// buffer boundary, or problem, offline\n_matchToken(\"true\", 1);\n}\n\nprivate final void _matchFalse() throws IOException {\nint ptr = _inputPtr;\nif ((ptr + 4) < _inputEnd) {\nfinal char[] b = _inputBuffer;\nif (b[ptr] == 'a' && b[++ptr] == 'l' && b[++ptr] == 's' && b[++ptr] == 'e') {\nchar c = b[++ptr];\nif (c < '0' || c == ']' || c == '}') { // expected/allowed chars\n_inputPtr = ptr;\nreturn;\n}\n}\n}\n// buffer boundary, or problem, offline\n_matchToken(\"false\", 1);\n}\n\nprivate final void _matchNull() throws IOException {\nint ptr = _inputPtr;\nif ((ptr + 3) < _inputEnd) {\nfinal char[] b = _inputBuffer;\nif (b[ptr] == 'u' && b[++ptr] == 'l' && b[++ptr] == 'l') {\nchar c = b[++ptr];\nif (c < '0' || c == ']' || c == '}') { // expected/allowed chars\n_inputPtr = ptr;\nreturn;\n}\n}\n}\n// buffer boundary, or problem, offline\n_matchToken(\"null\", 1);\n}",
            "method_id": 11
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser:nextToken()Lcom/fasterxml/jackson/core/JsonToken;",
            "method_body": "public final JsonToken nextToken() throws IOException\n{\n/* First: field names are special -- we will always tokenize\n* (part of) value along with field name to simplify\n* state handling. If so, can and need to use secondary token:\n*/\nif (_currToken == JsonToken.FIELD_NAME) {\nreturn _nextAfterName();\n}\n// But if we didn't already have a name, and (partially?) decode number,\n// need to ensure no numeric information is leaked\n_numTypesValid = NR_UNKNOWN;\nif (_tokenIncomplete) {\n_skipString(); // only strings can be partial\n}\nint i = _skipWSOrEnd();\nif (i < 0) { // end-of-input\n/* 19-Feb-2009, tatu: Should actually close/release things\n*    like input source, symbol table and recyclable buffers now.\n*/\nclose();\nreturn (_currToken = null);\n}\n// clear any data retained so far\n_binaryValue = null;\n\n// Closing scope?\nif (i == INT_RBRACKET) {\n_updateLocation();\nif (!_parsingContext.inArray()) {\n_reportMismatchedEndMarker(i, '}');\n}\n_parsingContext = _parsingContext.clearAndGetParent();\nreturn (_currToken = JsonToken.END_ARRAY);\n}",
            "method_id": 12
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser:loadMore()Z",
            "method_body": "protected boolean loadMore() throws IOException\n{\nfinal int bufSize = _inputEnd;\n\n_currInputProcessed += bufSize;\n_currInputRowStart -= bufSize;\n\n// 26-Nov-2015, tatu: Since name-offset requires it too, must offset\n//   this increase to avoid \"moving\" name-offset, resulting most likely\n//   in negative value, which is fine as combine value remains unchanged.\n_nameStartOffset -= bufSize;\n\nif (_reader != null) {\nint count = _reader.read(_inputBuffer, 0, _inputBuffer.length);\nif (count > 0) {\n_inputPtr = 0;\n_inputEnd = count;\nreturn true;\n}\n// End of input\n_closeInput();\n// Should never return 0, so let's fail\nif (count == 0) {\nthrow new IOException(\"Reader returned 0 characters when trying to read \"+_inputEnd);\n}\n}\nreturn false;\n}",
            "method_id": 13
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser:<clinit>()V",
            "method_body": "protected final static int[] _icLatin1 = CharTypes.getInputCodeLatin1();\n\n/*\n/**********************************************************\n/* Input configuration\n/**********************************************************\n*/\n\n/**\n* Reader that can be used for reading more content, if one\n* buffer from input source, but in some cases pre-loaded buffer\n* is handed to the parser.\n*/\nprotected Reader _reader;\n\n/**\n* Current buffer from which data is read; generally data is read into\n* buffer from input source.\n*/\nprotected char[] _inputBuffer;\n\n/**\n* Flag that indicates whether the input buffer is recycable (and\n* needs to be returned to recycler once we are done) or not.\n*<p>\n* If it is not, it also means that parser can NOT modify underlying\n* buffer.\n*/\nprotected boolean _bufferRecyclable;\n\n/*\n/**********************************************************\n/* Configuration\n/**********************************************************\n*/\n\nprotected ObjectCodec _objectCodec;\n\nfinal protected CharsToNameCanonicalizer _symbols;\n\nfinal protected int _hashSeed;\n\n/*\n/**********************************************************\n/* Parsing state\n/**********************************************************\n*/\n\n/**\n* Flag that indicates that the current token has not yet\n* been fully processed, and needs to be finished for\n* some access (or skipped to obtain the next token)\n*/\nprotected boolean _tokenIncomplete;\n\n/**\n* Value of {@link #_inputPtr} at the time when the first character of",
            "method_id": 14
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser:<init>(Lcom/fasterxml/jackson/core/io/IOContext;ILjava/io/Reader;Lcom/fasterxml/jackson/core/ObjectCodec;Lcom/fasterxml/jackson/core/sym/CharsToNameCanonicalizer;)V",
            "method_body": "public ReaderBasedJsonParser(IOContext ctxt, int features, Reader r,\nObjectCodec codec, CharsToNameCanonicalizer st)\n{\nsuper(ctxt, features);\n_reader = r;\n_inputBuffer = ctxt.allocTokenBuffer();\n_inputPtr = 0;\n_inputEnd = 0;\n_objectCodec = codec;\n_symbols = st;\n_hashSeed = st.hashSeed();\n_bufferRecyclable = true;\n}",
            "method_id": 15
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.ParserBase:<clinit>()V",
            "method_body": "protected byte[] _binaryValue;\n\n/*\n/**********************************************************\n/* Constants and fields of former 'JsonNumericParserBase'\n/**********************************************************\n*/\n\nfinal protected static int NR_UNKNOWN = 0;\n\n// First, integer types\n\nfinal protected static int NR_INT = 0x0001;\nfinal protected static int NR_LONG = 0x0002;\nfinal protected static int NR_BIGINT = 0x0004;\n\n// And then floating point types\n\nfinal protected static int NR_DOUBLE = 0x008;\nfinal protected static int NR_BIGDECIMAL = 0x0010;\n\n// Also, we need some numeric constants\n\nfinal static BigInteger BI_MIN_INT = BigInteger.valueOf(Integer.MIN_VALUE);\nfinal static BigInteger BI_MAX_INT = BigInteger.valueOf(Integer.MAX_VALUE);\n\nfinal static BigInteger BI_MIN_LONG = BigInteger.valueOf(Long.MIN_VALUE);\nfinal static BigInteger BI_MAX_LONG = BigInteger.valueOf(Long.MAX_VALUE);\n\nfinal static BigDecimal BD_MIN_LONG = new BigDecimal(BI_MIN_LONG);\nfinal static BigDecimal BD_MAX_LONG = new BigDecimal(BI_MAX_LONG);\n\nfinal static BigDecimal BD_MIN_INT = new BigDecimal(BI_MIN_INT);\nfinal static BigDecimal BD_MAX_INT = new BigDecimal(BI_MAX_INT);\n\nfinal static long MIN_INT_L = (long) Integer.MIN_VALUE;\nfinal static long MAX_INT_L = (long) Integer.MAX_VALUE;\n\n// These are not very accurate, but have to do... (for bounds checks)\n\nfinal static double MIN_LONG_D = (double) Long.MIN_VALUE;\nfinal static double MAX_LONG_D = (double) Long.MAX_VALUE;\n\nfinal static double MIN_INT_D = (double) Integer.MIN_VALUE;\nfinal static double MAX_INT_D = (double) Integer.MAX_VALUE;\n\n// Digits, numeric\nfinal protected static int INT_0 = '0';\nfinal protected static int INT_9 = '9';\n\nfinal protected static int INT_MINUS = '-';\nfinal protected static int INT_PLUS = '+';\n\nfinal protected static char CHAR_NULL = '\\0';\n\n// Numeric value holders: multiple fields used for\n// for efficiency\n\n/**\n* Bitfield that indicates which numeric representations\n* have been calculated for the current type\n*/\nprotected int _numTypesValid = NR_UNKNOWN;\n\n// First primitives\n\nprotected int _numberInt;\n\nprotected long _numberLong;\n\nprotected double _numberDouble;\n\n// And then object types\n\nprotected BigInteger _numberBigInt;\n\nprotected BigDecimal _numberBigDecimal;\n\n// And then other information about value itself\n\n/**\n* Flag that indicates whether numeric value has a negative\n* value. That is, whether its textual representation starts\n* with minus character.\n*/\nprotected boolean _numberNegative;\n\n/**\n* Length of integer part of the number, in characters\n*/\nprotected int _intLength;\n\n/**\n* Length of the fractional part (not including decimal\n* point or exponent), in characters.\n* Not used for  pure integer values.\n*/\nprotected int _fractLength;\n\n/**\n* Length of the exponent part of the number, if any, not\n* including 'e' marker or sign, just digits.\n* Not used for  pure integer values.\n*/\nprotected int _expLength;\n\n/*\n/**********************************************************\n/* Life-cycle\n/**********************************************************\n*/\n\nprotected ParserBase(IOContext ctxt, int features) {\nsuper(features);\n_ioContext = ctxt;\n_textBuffer = ctxt.constructTextBuffer();\nDupDetector dups = Feature.STRICT_DUPLICATE_DETECTION.enabledIn(features)\n? DupDetector.rootDetector(this) : null;\n_parsingContext = JsonReadContext.createRootContext(dups);\n}",
            "method_id": 16
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.ParserBase:<init>(Lcom/fasterxml/jackson/core/io/IOContext;I)V",
            "method_body": "protected ParserBase(IOContext ctxt, int features) {\nsuper(features);\n_ioContext = ctxt;\n_textBuffer = ctxt.constructTextBuffer();\nDupDetector dups = Feature.STRICT_DUPLICATE_DETECTION.enabledIn(features)\n? DupDetector.rootDetector(this) : null;\n_parsingContext = JsonReadContext.createRootContext(dups);\n}",
            "method_id": 17
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonParser:<init>(I)V",
            "method_body": "protected JsonParser(int features) { _features = features; }\nprotected JsonParser(int features) { _features = features; }",
            "method_id": 18
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonStreamContext:inObject()Z",
            "method_body": "public final boolean inObject() { return _type == TYPE_OBJECT; }\npublic final boolean inObject() { return _type == TYPE_OBJECT; }",
            "method_id": 19
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonStreamContext:<init>()V",
            "method_body": "protected JsonStreamContext() { }\nprotected JsonStreamContext() { }",
            "method_id": 20
        },
        {
            "method_signature": "com.fasterxml.jackson.core.io.CharTypes:getInputCodeLatin1()[I",
            "method_body": "public static int[] getInputCodeLatin1() { return sInputCodes; }\npublic static int[] getInputCodeLatin1() { return sInputCodes; }",
            "method_id": 21
        },
        {
            "method_signature": "com.fasterxml.jackson.core.io.CharTypes:<clinit>()V",
            "method_body": "private final static char[] HC = \"0123456789ABCDEF\".toCharArray();\nprivate final static byte[] HB;\nstatic {\nint len = HC.length;\nHB = new byte[len];\nfor (int i = 0; i < len; ++i) {\nHB[i] = (byte) HC[i];\n}\n}",
            "method_id": 22
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.BufferRecycler:calloc(I)[C",
            "method_body": "protected char[] calloc(int size) { return new char[size]; }\nprotected char[] calloc(int size) { return new char[size]; }",
            "method_id": 23
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.BufferRecycler:charBufferLength(I)I",
            "method_body": "protected int charBufferLength(int ix) {\nreturn CHAR_BUFFER_LENGTHS[ix];\n}",
            "method_id": 24
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.BufferRecycler:allocCharBuffer(II)[C",
            "method_body": "public char[] allocCharBuffer(int ix, int minSize) {\nfinal int DEF_SIZE = charBufferLength(ix);\nif (minSize < DEF_SIZE) {\nminSize = DEF_SIZE;\n}\nchar[] buffer = _charBuffers[ix];\nif (buffer == null || buffer.length < minSize) {\nbuffer = calloc(minSize);\n} else {\n_charBuffers[ix] = null;\n}\nreturn buffer;\n}",
            "method_id": 25
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.BufferRecycler:<clinit>()V",
            "method_body": "public final static int BYTE_READ_IO_BUFFER = 0;\n\n/**\n* Buffer used for temporarily storing encoded content; used\n* for example by UTF-8 encoding writer\n*/\npublic final static int BYTE_WRITE_ENCODING_BUFFER = 1;\n\n/**\n* Buffer used for temporarily concatenating output; used for\n* example when requesting output as byte array.\n*/\npublic final static int BYTE_WRITE_CONCAT_BUFFER = 2;\n\n/**\n* Buffer used for concatenating binary data that is either being\n* encoded as base64 output, or decoded from base64 input.\n*\n* @since 2.1\n*/\npublic final static int BYTE_BASE64_CODEC_BUFFER = 3;\n\npublic final static int CHAR_TOKEN_BUFFER = 0;  // Tokenizable input\npublic final static int CHAR_CONCAT_BUFFER = 1; // concatenated output\npublic final static int CHAR_TEXT_BUFFER = 2; // Text content from input\npublic final static int CHAR_NAME_COPY_BUFFER = 3; // Temporary buffer for getting name characters\n\n// Buffer lengths, defined in 2.4 (smaller before that)\n\nprivate final static int[] BYTE_BUFFER_LENGTHS = new int[] { 8000, 8000, 2000, 2000 };",
            "method_id": 26
        },
        {
            "method_signature": "com.fasterxml.jackson.core.io.IOContext:<init>(Lcom/fasterxml/jackson/core/util/BufferRecycler;Ljava/lang/Object;Z)V",
            "method_body": "public IOContext(BufferRecycler br, Object sourceRef, boolean managedResource)\n{\n_bufferRecycler = br;\n_sourceRef = sourceRef;\n_managedResource = managedResource;\n}",
            "method_id": 27
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo:createInitial(I)Lcom/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer$TableInfo;",
            "method_body": "public static TableInfo createInitial(int sz) {\nint hashAreaSize = sz << 3;\nint tertShift = _calcTertiaryShift(sz);\n\nreturn new TableInfo(sz, // hashSize\n0, // count\ntertShift,\nnew int[hashAreaSize], // mainHash, 2x slots, 4 ints per slot\nnew String[sz << 1], // names == 2x slots\nhashAreaSize - sz, // at 7/8 of the total area\nhashAreaSize // longNameOffset, immediately after main hashes\n);\n}",
            "method_id": 28
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo:<init>(III[I[Ljava/lang/String;II)V",
            "method_body": "public TableInfo(int size, int count, int tertiaryShift,\nint[] mainHash, String[] names, int spilloverEnd, int longNameOffset)\n{\nthis.size = size;\nthis.count = count;\nthis.tertiaryShift = tertiaryShift;\nthis.mainHash = mainHash;\nthis.names = names;\nthis.spilloverEnd = spilloverEnd;\nthis.longNameOffset = longNameOffset;\n}",
            "method_id": 29
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:_calcTertiaryShift(I)I",
            "method_body": "static int _calcTertiaryShift(int primarySlots)\n{\n// first: we only get 1/4 of slots of primary, to divide\nint tertSlots = (primarySlots) >> 2;\n\n// default is for buckets of 4 slots (each 4 ints, i.e. 1 << 4)\nif (tertSlots < 64) {\nreturn 4;\n}\nif (tertSlots <= 256) { // buckets of 8 slots (up to 256 == 32 x 8)\nreturn 5;\n}\nif (tertSlots <= 1024) { // buckets of 16 slots (up to 1024 == 64 x 16)\nreturn 6;\n}\n// and biggest buckets have 32 slots\nreturn 7;\n}",
            "method_id": 30
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:createRoot(I)Lcom/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer;",
            "method_body": "protected static ByteQuadsCanonicalizer createRoot(int seed) {\nreturn new ByteQuadsCanonicalizer(DEFAULT_T_SIZE, true, seed, true);\n}",
            "method_id": 31
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:createRoot()Lcom/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer;",
            "method_body": "public static ByteQuadsCanonicalizer createRoot() {\n/* [Issue-21]: Need to use a variable seed, to thwart hash-collision\n* based attacks.\n*/\nlong now = System.currentTimeMillis();\n// ensure it's not 0; and might as well require to be odd so:\nint seed = (((int) now) + ((int) (now >>> 32))) | 1;\nreturn createRoot(seed);\n}",
            "method_id": 32
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:<init>(IZIZ)V",
            "method_body": "private ByteQuadsCanonicalizer(int sz, boolean intern, int seed, boolean failOnDoS) {\n_parent = null;\n_seed = seed;\n_intern = intern;\n_failOnDoS = failOnDoS;\n// Sanity check: let's now allow hash sizes below certain minimum value\nif (sz < MIN_HASH_SIZE) {\nsz = MIN_HASH_SIZE;\n} else {\n// Also; size must be 2^N; otherwise hash algorithm won't\n// work... so let's just pad it up, if so\nif ((sz & (sz - 1)) != 0) { // only true if it's 2^N\nint curr = MIN_HASH_SIZE;\nwhile (curr < sz) {\ncurr += curr;\n}\nsz = curr;\n}\n}\n_tableInfo = new AtomicReference<TableInfo>(TableInfo.createInitial(sz));\n}",
            "method_id": 33
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer:hashSeed()I",
            "method_body": "public int hashSeed() { return _hashSeed; }\npublic int hashSeed() { return _hashSeed; }",
            "method_id": 34
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer:makeOrphan(I)Lcom/fasterxml/jackson/core/sym/CharsToNameCanonicalizer;",
            "method_body": "private CharsToNameCanonicalizer makeOrphan(int seed) {\nreturn new CharsToNameCanonicalizer(null, -1, _symbols, _buckets, _size, seed, _longestCollisionList);\n}",
            "method_id": 35
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer:_thresholdSize(I)I",
            "method_body": "private static int _thresholdSize(int hashAreaSize) { return hashAreaSize - (hashAreaSize >> 2); }\nprivate static int _thresholdSize(int hashAreaSize) { return hashAreaSize - (hashAreaSize >> 2); }",
            "method_id": 36
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer:initTables(I)V",
            "method_body": "private void initTables(int initialSize)\n{\n_symbols = new String[initialSize];\n_buckets = new Bucket[initialSize >> 1];\n// Mask is easy to calc for powers of two.\n_indexMask = initialSize - 1;\n_size = 0;\n_longestCollisionList = 0;\n// Hard-coded fill factor is 75%\n_sizeThreshold = _thresholdSize(initialSize);\n}",
            "method_id": 37
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer:createRoot(I)Lcom/fasterxml/jackson/core/sym/CharsToNameCanonicalizer;",
            "method_body": "protected static CharsToNameCanonicalizer createRoot(int hashSeed) {\nreturn sBootstrapSymbolTable.makeOrphan(hashSeed);\n}",
            "method_id": 38
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer:createRoot()Lcom/fasterxml/jackson/core/sym/CharsToNameCanonicalizer;",
            "method_body": "public static CharsToNameCanonicalizer createRoot() {\n/* [Issue-21]: Need to use a variable seed, to thwart hash-collision\n* based attacks.\n*/\nlong now = System.currentTimeMillis();\n// ensure it's not 0; and might as well require to be odd so:\nint seed = (((int) now) + ((int) (now >>> 32))) | 1;\nreturn createRoot(seed);\n}",
            "method_id": 39
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer:<clinit>()V",
            "method_body": "public final static int HASH_MULT = 33;\n\n/**\n* Default initial table size. Shouldn't be miniscule (as there's\n* cost to both array realloc and rehashing), but let's keep\n* it reasonably small. For systems that properly\n* reuse factories it doesn't matter either way; but when\n* recreating factories often, initial overhead may dominate.\n*/\nprotected static final int DEFAULT_T_SIZE = 64;\n\n/**\n* Let's not expand symbol tables past some maximum size;\n* this should protected against OOMEs caused by large documents\n* with unique (~= random) names.\n*/\nprotected static final int MAX_T_SIZE = 0x10000; // 64k entries == 256k mem\n\n/**\n* Let's only share reasonably sized symbol tables. Max size set to 3/4 of 16k;\n* this corresponds to 64k main hash index. This should allow for enough distinct\n* names for almost any case.\n*/\nfinal static int MAX_ENTRIES_FOR_REUSE = 12000;\n\n/**\n* Also: to thwart attacks based on hash collisions (which may or may not\n* be cheap to calculate), we will need to detect \"too long\"\n* collision chains. Let's start with static value of 255 entries\n* for the longest legal chain.\n*<p>\n* Note: longest chain we have been able to produce without malicious\n* intent has been 38 (with \"com.fasterxml.jackson.core.main.TestWithTonsaSymbols\");\n* our setting should be reasonable here.\n*<p>\n* Also note that value was lowered from 255 (2.3 and earlier) to 100 for 2.4\n*\n* @since 2.1\n*/\nfinal static int MAX_COLL_CHAIN_LENGTH = 100;\n\nfinal static CharsToNameCanonicalizer sBootstrapSymbolTable = new CharsToNameCanonicalizer();\n\n/*\n/**********************************************************\n/* Configuration\n/**********************************************************\n*/\n\n/**\n* Sharing of learnt symbols is done by optional linking of symbol\n* table instances with their parents. When parent linkage is\n* defined, and child instance is released (call to <code>release</code>),\n* parent's shared tables may be updated from the child instance.\n*/\nprotected CharsToNameCanonicalizer _parent;\n\n/**\n* Seed value we use as the base to make hash codes non-static between\n* different runs, but still stable for lifetime of a single symbol table\n* instance.\n* This is done for security reasons, to avoid potential DoS attack via\n* hash collisions.\n*\n* @since 2.1\n*/\nfinal private int _hashSeed;\n\nfinal protected int _flags;\n\n/**\n* Whether any canonicalization should be attempted (whether using\n* intern or not)\n*/\nprotected boolean _canonicalize;\n\n/*\n/**********************************************************\n/* Actual symbol table data\n/**********************************************************\n*/\n\n/**\n* Primary matching symbols; it's expected most match occur from\n* here.\n*/\nprotected String[] _symbols;\n\n/**\n* Overflow buckets; if primary doesn't match, lookup is done\n* from here.\n*<p>\n* Note: Number of buckets is half of number of symbol entries, on\n* assumption there's less need for buckets.\n*/\nprotected Bucket[] _buckets;\n\n/**\n* Current size (number of entries); needed to know if and when\n* rehash.\n*/\nprotected int _size;\n\n/**\n* Limit that indicates maximum size this instance can hold before\n* it needs to be expanded and rehashed. Calculated using fill\n* factor passed in to constructor.\n*/\nprotected int _sizeThreshold;\n\n/**\n* Mask used to get index from hash values; equal to\n* <code>_buckets.length - 1</code>, when _buckets.length is\n* a power of two.\n*/\nprotected int _indexMask;\n\n/**\n* We need to keep track of the longest collision list; this is needed\n* both to indicate problems with attacks and to allow flushing for\n* other cases.\n*\n* @since 2.1\n*/\nprotected int _longestCollisionList;\n\n/*\n/**********************************************************\n/* State regarding shared arrays\n/**********************************************************\n*/\n\n/**\n* Flag that indicates if any changes have been made to the data;\n* used to both determine if bucket array needs to be copied when\n* (first) change is made, and potentially if updated bucket list\n* is to be resync'ed back to master instance.\n*/\nprotected boolean _dirty;\n\n/*\n/**********************************************************\n/* Bit of DoS detection goodness\n/**********************************************************\n*/\n\n/**\n* Lazily constructed structure that is used to keep track of\n* collision buckets that have overflowed once: this is used\n* to detect likely attempts at denial-of-service attacks that\n* uses hash collisions.\n*\n* @since 2.4\n*/\nprotected BitSet _overflows;\n\n/*\n/**********************************************************\n/* Life-cycle\n/**********************************************************\n*/\n\n/**\n* Method called to create root canonicalizer for a {@link com.fasterxml.jackson.core.JsonFactory}",
            "method_id": 40
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer:<init>(Lcom/fasterxml/jackson/core/sym/CharsToNameCanonicalizer;I[Ljava/lang/String;[Lcom/fasterxml/jackson/core/sym/CharsToNameCanonicalizer$Bucket;III)V",
            "method_body": "private CharsToNameCanonicalizer(CharsToNameCanonicalizer parent, int flags,\nString[] symbols, Bucket[] buckets, int size, int hashSeed, int longestColl) {\n_parent = parent;\n\n_flags = flags;\n_canonicalize = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES.enabledIn(flags);\n\n_symbols = symbols;\n_buckets = buckets;\n_size = size;\n_hashSeed = hashSeed;\n// Hard-coded fill factor, 75%\nint arrayLen = (symbols.length);\n_sizeThreshold = _thresholdSize(arrayLen);\n_indexMask =  (arrayLen - 1);\n_longestCollisionList = longestColl;\n\n// Need to make copies of arrays, if/when adding new entries\n_dirty = false;\n}",
            "method_id": 41
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer:<init>()V",
            "method_body": "private CharsToNameCanonicalizer() {\n// these settings don't really matter for the bootstrap instance\n_canonicalize = true;\n_flags = -1;\n// And we'll also set flags so no copying of buckets is needed:\n_dirty = true;\n_hashSeed = 0;\n_longestCollisionList = 0;\ninitTables(DEFAULT_T_SIZE);\n}",
            "method_id": 42
        },
        {
            "method_signature": "com.fasterxml.jackson.core.io.SerializedString:<init>(Ljava/lang/String;)V",
            "method_body": "public SerializedString(String v) {\nif (v == null) {\nthrow new IllegalStateException(\"Null String illegal for SerializedString\");\n}\n_value = v;\n}",
            "method_id": 43
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.DefaultPrettyPrinter:<clinit>()V",
            "method_body": "private static final long serialVersionUID = 1;\n\n/**\n* Constant that specifies default \"root-level\" separator to use between\n* root values: a single space character.\n*\n* @since 2.1\n*/\npublic final static SerializedString DEFAULT_ROOT_VALUE_SEPARATOR = new SerializedString(\" \");\n\n/**\n* Interface that defines objects that can produce indentation used\n* to separate object entries and array values. Indentation in this\n* context just means insertion of white space, independent of whether\n* linefeeds are output.\n*/\npublic interface Indenter\n{\nvoid writeIndentation(JsonGenerator jg, int level) throws IOException;\n\n/**\n* @return True if indenter is considered inline (does not add linefeeds),\n*   false otherwise\n*/\nboolean isInline();\n}",
            "method_id": 44
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonGenerator$Feature:getMask()I",
            "method_body": "public int getMask() { return _mask; }\npublic int getMask() { return _mask; }",
            "method_id": 45
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonGenerator$Feature:enabledByDefault()Z",
            "method_body": "public boolean enabledByDefault() { return _defaultState; }\npublic boolean enabledByDefault() { return _defaultState; }",
            "method_id": 46
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonGenerator$Feature:collectDefaults()I",
            "method_body": "public static int collectDefaults()\n{\nint flags = 0;\nfor (Feature f : values()) {\nif (f.enabledByDefault()) {\nflags |= f.getMask();\n}\n}\nreturn flags;\n}",
            "method_id": 47
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonGenerator$Feature:<init>(Ljava/lang/String;IZ)V",
            "method_body": "private Feature(boolean defaultState) {\n_defaultState = defaultState;\n_mask = (1 << ordinal());\n}",
            "method_id": 48
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonParser$Feature:getMask()I",
            "method_body": "public int getMask() { return _mask; }\npublic int getMask() { return _mask; }",
            "method_id": 49
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonParser$Feature:enabledIn(I)Z",
            "method_body": "public boolean enabledIn(int flags) { return (flags & _mask) != 0; }\npublic boolean enabledIn(int flags) { return (flags & _mask) != 0; }",
            "method_id": 50
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonParser$Feature:enabledByDefault()Z",
            "method_body": "public boolean enabledByDefault() { return _defaultState; }\npublic boolean enabledByDefault() { return _defaultState; }",
            "method_id": 51
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonParser$Feature:collectDefaults()I",
            "method_body": "public static int collectDefaults()\n{\nint flags = 0;\nfor (Feature f : values()) {\nif (f.enabledByDefault()) {\nflags |= f.getMask();\n}\n}\nreturn flags;\n}",
            "method_id": 52
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonParser$Feature:<init>(Ljava/lang/String;IZ)V",
            "method_body": "private Feature(boolean defaultState) {\n_mask = (1 << ordinal());\n_defaultState = defaultState;\n}",
            "method_id": 53
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonFactory$Feature:enabledByDefault()Z",
            "method_body": "public boolean enabledByDefault() { return _defaultState; }\npublic boolean enabledByDefault() { return _defaultState; }",
            "method_id": 54
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonFactory$Feature:collectDefaults()I",
            "method_body": "public static int collectDefaults() {\nint flags = 0;\nfor (Feature f : values()) {\nif (f.enabledByDefault()) { flags |= f.getMask(); }\n}\nreturn flags;\n}",
            "method_id": 55
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonFactory$Feature:<init>(Ljava/lang/String;IZ)V",
            "method_body": "private Feature(boolean defaultState) { _defaultState = defaultState; }\nprivate Feature(boolean defaultState) { _defaultState = defaultState; }",
            "method_id": 56
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonFactory:_createContext(Ljava/lang/Object;Z)Lcom/fasterxml/jackson/core/io/IOContext;",
            "method_body": "protected IOContext _createContext(Object srcRef, boolean resourceManaged) {\nreturn new IOContext(_getBufferRecycler(), srcRef, resourceManaged);\n}",
            "method_id": 57
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonFactory:_decorate(Ljava/io/Reader;Lcom/fasterxml/jackson/core/io/IOContext;)Ljava/io/Reader;",
            "method_body": "protected final Reader _decorate(Reader in, IOContext ctxt) throws IOException {\nif (_inputDecorator != null) {\nReader in2 = _inputDecorator.decorate(ctxt, in);\nif (in2 != null) {\nreturn in2;\n}\n}\nreturn in;\n}",
            "method_id": 58
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonFactory:_createParser(Ljava/io/Reader;Lcom/fasterxml/jackson/core/io/IOContext;)Lcom/fasterxml/jackson/core/JsonParser;",
            "method_body": "protected JsonParser _createParser(Reader r, IOContext ctxt) throws IOException {\nreturn new ReaderBasedJsonParser(ctxt, _parserFeatures, r, _objectCodec,\n_rootCharSymbols.makeChild(_factoryFeatures));\n}",
            "method_id": 59
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonFactory:createParser(Ljava/io/Reader;)Lcom/fasterxml/jackson/core/JsonParser;",
            "method_body": "public JsonParser createParser(Reader r) throws IOException, JsonParseException {\n// false -> we do NOT own Reader (did not create it)\nIOContext ctxt = _createContext(r, false);\nreturn _createParser(_decorate(r, ctxt), ctxt);\n}",
            "method_id": 60
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonFactory:isEnabled(Lcom/fasterxml/jackson/core/JsonFactory$Feature;)Z",
            "method_body": "public final boolean isEnabled(JsonFactory.Feature f) {\nreturn (_factoryFeatures & f.getMask()) != 0;\n}",
            "method_id": 61
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonFactory:<clinit>()V",
            "method_body": "public final static String FORMAT_NAME_JSON = \"JSON\";\n\n/**\n* Bitfield (set of flags) of all factory features that are enabled by default.\n*/\nprotected final static int DEFAULT_FACTORY_FEATURE_FLAGS = JsonFactory.Feature.collectDefaults();\n\n/**\n* Bitfield (set of flags) of all parser features that are enabled\n* by default.\n*/\nprotected final static int DEFAULT_PARSER_FEATURE_FLAGS = JsonParser.Feature.collectDefaults();\n\n/**\n* Bitfield (set of flags) of all generator features that are enabled\n* by default.\n*/\nprotected final static int DEFAULT_GENERATOR_FEATURE_FLAGS = JsonGenerator.Feature.collectDefaults();\n\nprivate final static SerializableString DEFAULT_ROOT_VALUE_SEPARATOR = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;\n\n/*\n/**********************************************************\n/* Buffer, symbol table management\n/**********************************************************\n*/\n\n/**\n* This <code>ThreadLocal</code> contains a {@link java.lang.ref.SoftReference}",
            "method_id": 62
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonFactory:<init>(Lcom/fasterxml/jackson/core/JsonFactory;Lcom/fasterxml/jackson/core/ObjectCodec;)V",
            "method_body": "final protected static ThreadLocal<SoftReference<BufferRecycler>> _recyclerRef\nprotected final transient CharsToNameCanonicalizer _rootCharSymbols = CharsToNameCanonicalizer.createRoot();\nprotected final transient ByteQuadsCanonicalizer _byteSymbolCanonicalizer = ByteQuadsCanonicalizer.createRoot();\nprotected int _factoryFeatures = DEFAULT_FACTORY_FEATURE_FLAGS;\nprotected int _parserFeatures = DEFAULT_PARSER_FEATURE_FLAGS;\nprotected int _generatorFeatures = DEFAULT_GENERATOR_FEATURE_FLAGS;\nprotected SerializableString _rootValueSeparator = DEFAULT_ROOT_VALUE_SEPARATOR;\npublic JsonFactory() { this(null); }",
            "method_id": 63
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonFactory:<init>(Lcom/fasterxml/jackson/core/ObjectCodec;)V",
            "method_body": "public JsonFactory(ObjectCodec oc) { _objectCodec = oc; }\npublic JsonFactory(ObjectCodec oc) { _objectCodec = oc; }",
            "method_id": 64
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonFactory:<init>()V",
            "method_body": "public JsonFactory() { this(null); }\npublic JsonFactory() { this(null); }",
            "method_id": 65
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.BufferRecycler:allocCharBuffer(I)[C",
            "method_body": "public final char[] allocCharBuffer(int ix) {\nreturn allocCharBuffer(ix, 0);\n}",
            "method_id": 66
        },
        {
            "method_signature": "com.fasterxml.jackson.core.io.IOContext:_verifyAlloc(Ljava/lang/Object;)V",
            "method_body": "protected final void _verifyAlloc(Object buffer) {\nif (buffer != null) { throw new IllegalStateException(\"Trying to call same allocXxx() method second time\"); }\n}",
            "method_id": 67
        },
        {
            "method_signature": "com.fasterxml.jackson.core.io.IOContext:allocTokenBuffer()[C",
            "method_body": "public char[] allocTokenBuffer() {\n_verifyAlloc(_tokenCBuffer);\nreturn (_tokenCBuffer = _bufferRecycler.allocCharBuffer(BufferRecycler.CHAR_TOKEN_BUFFER));\n}",
            "method_id": 68
        },
        {
            "method_signature": "com.fasterxml.jackson.core.io.IOContext:constructTextBuffer()Lcom/fasterxml/jackson/core/util/TextBuffer;",
            "method_body": "public TextBuffer constructTextBuffer() {\nreturn new TextBuffer(_bufferRecycler);\n}",
            "method_id": 69
        },
        {
            "method_signature": "com.fasterxml.jackson.core.base.ParserMinimalBase:<init>(I)V",
            "method_body": "protected ParserMinimalBase(int features) { super(features); }\nprotected ParserMinimalBase(int features) { super(features); }",
            "method_id": 70
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonFactory$Feature:enabledIn(I)Z",
            "method_body": "public boolean enabledIn(int flags) { return (flags & getMask()) != 0; }\npublic boolean enabledIn(int flags) { return (flags & getMask()) != 0; }",
            "method_id": 71
        },
        {
            "method_signature": "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer:makeChild(I)Lcom/fasterxml/jackson/core/sym/CharsToNameCanonicalizer;",
            "method_body": "public CharsToNameCanonicalizer makeChild(int flags) {\n/* 24-Jul-2012, tatu: Trying to reduce scope of synchronization, assuming\n*   that synchronizing construction is the (potentially) expensive part,\n*   and not so much short copy-the-variables thing.\n*/\nfinal String[] symbols;\nfinal Bucket[] buckets;\nfinal int size;\nfinal int hashSeed;\nfinal int longestCollisionList;\n\nsynchronized (this) {\nsymbols = _symbols;\nbuckets = _buckets;\nsize = _size;\nhashSeed = _hashSeed;\nlongestCollisionList = _longestCollisionList;\n}\nreturn new CharsToNameCanonicalizer(this, flags,\nsymbols, buckets, size, hashSeed, longestCollisionList);\n}",
            "method_id": 72
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.BufferRecycler:<init>(II)V",
            "method_body": "protected BufferRecycler(int bbCount, int cbCount) {\n_byteBuffers = new byte[bbCount][];\n_charBuffers = new char[cbCount][];\n}",
            "method_id": 73
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.BufferRecycler:<init>()V",
            "method_body": "public BufferRecycler() {\nthis(4, 4);\n}",
            "method_id": 74
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonFactory$Feature:getMask()I",
            "method_body": "public int getMask() { return (1 << ordinal()); }\npublic int getMask() { return (1 << ordinal()); }",
            "method_id": 75
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonFactory:_getBufferRecycler()Lcom/fasterxml/jackson/core/util/BufferRecycler;",
            "method_body": "public BufferRecycler _getBufferRecycler()\n{\nBufferRecycler br;\n\n/* 23-Apr-2015, tatu: Let's allow disabling of buffer recycling\n*   scheme, for cases where it is considered harmful (possibly\n*   on Android, for example)\n*/\nif (isEnabled(Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING)) {\nSoftReference<BufferRecycler> ref = _recyclerRef.get();\nbr = (ref == null) ? null : ref.get();\n\nif (br == null) {\nbr = new BufferRecycler();\n_recyclerRef.set(new SoftReference<BufferRecycler>(br));\n}\n} else {\nbr = new BufferRecycler();\n}\nreturn br;\n}",
            "method_id": 76
        },
        {
            "method_signature": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser:_parseNumber2(ZI)Lcom/fasterxml/jackson/core/JsonToken;",
            "method_body": "private final void _isNextTokenNameYes(int i) throws IOException\n{\n_currToken = JsonToken.FIELD_NAME;\n_updateLocation();\n\nswitch (i) {\ncase '\"':\n_tokenIncomplete = true;\n_nextToken = JsonToken.VALUE_STRING;\nreturn;\ncase '[':\n_nextToken = JsonToken.START_ARRAY;\nreturn;\ncase '{':\n_nextToken = JsonToken.START_OBJECT;\nreturn;\ncase 't':\n_matchToken(\"true\", 1);\n_nextToken = JsonToken.VALUE_TRUE;\nreturn;\ncase 'f':\n_matchToken(\"false\", 1);\n_nextToken = JsonToken.VALUE_FALSE;\nreturn;\ncase 'n':\n_matchToken(\"null\", 1);\n_nextToken = JsonToken.VALUE_NULL;\nreturn;\ncase '-':\n_nextToken = _parseNegNumber();\nreturn;\ncase '0':\ncase '1':\ncase '2':\ncase '3':\ncase '4':\ncase '5':\ncase '6':\ncase '7':\ncase '8':\ncase '9':\n_nextToken = _parsePosNumber(i);\nreturn;\n}\n_nextToken = _handleOddValue(i);\n}\n\nprotected boolean _isNextTokenNameMaybe(int i, String nameToMatch) throws IOException\n{\n// // // and this is back to standard nextToken()\nString name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);\n_parsingContext.setCurrentName(name);\n_currToken = JsonToken.FIELD_NAME;\ni = _skipColon();\n_updateLocation();\nif (i == INT_QUOTE) {\n_tokenIncomplete = true;\n_nextToken = JsonToken.VALUE_STRING;\nreturn nameToMatch.equals(name);\n}\n// Ok: we must have a value... what is it?\nJsonToken t;\nswitch (i) {\ncase '-':\nt = _parseNegNumber();\nbreak;\ncase '0':\ncase '1':\ncase '2':\ncase '3':\ncase '4':\ncase '5':\ncase '6':\ncase '7':\ncase '8':\ncase '9':\nt = _parsePosNumber(i);\nbreak;\ncase 'f':\n_matchFalse();\nt = JsonToken.VALUE_FALSE;\nbreak;\ncase 'n':\n_matchNull();\nt = JsonToken.VALUE_NULL;\nbreak;\ncase 't':\n_matchTrue();\nt = JsonToken.VALUE_TRUE;\nbreak;\ncase '[':\nt = JsonToken.START_ARRAY;\nbreak;\ncase '{':\nt = JsonToken.START_OBJECT;\nbreak;\ndefault:\nt = _handleOddValue(i);\nbreak;\n}\n_nextToken = t;\nreturn nameToMatch.equals(name);\n}\n\nprivate final JsonToken _nextTokenNotInObject(int i) throws IOException\n{\nif (i == INT_QUOTE) {\n_tokenIncomplete = true;\nreturn (_currToken = JsonToken.VALUE_STRING);\n}\nswitch (i) {\ncase '[':\n_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\nreturn (_currToken = JsonToken.START_ARRAY);\ncase '{':\n_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\nreturn (_currToken = JsonToken.START_OBJECT);\ncase 't':\n_matchToken(\"true\", 1);\nreturn (_currToken = JsonToken.VALUE_TRUE);\ncase 'f':\n_matchToken(\"false\", 1);\nreturn (_currToken = JsonToken.VALUE_FALSE);\ncase 'n':\n_matchToken(\"null\", 1);\nreturn (_currToken = JsonToken.VALUE_NULL);\ncase '-':\nreturn (_currToken = _parseNegNumber());\n/* Should we have separate handling for plus? Although\n* it is not allowed per se, it may be erroneously used,\n* and could be indicated by a more specific error message.\n*/\ncase '0':\ncase '1':\ncase '2':\ncase '3':\ncase '4':\ncase '5':\ncase '6':\ncase '7':\ncase '8':\ncase '9':\nreturn (_currToken = _parsePosNumber(i));\n}\nreturn (_currToken = _handleOddValue(i));\n}\n\n// note: identical to one in UTF8StreamJsonParser\n@Override\npublic final String nextTextValue() throws IOException\n{\nif (_currToken == JsonToken.FIELD_NAME) { // mostly copied from '_nextAfterName'\n_nameCopied = false;\nJsonToken t = _nextToken;\n_nextToken = null;\n_currToken = t;\nif (t == JsonToken.VALUE_STRING) {\nif (_tokenIncomplete) {\n_tokenIncomplete = false;\n_finishString();\n}\nreturn _textBuffer.contentsAsString();\n}\nif (t == JsonToken.START_ARRAY) {\n_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n} else if (t == JsonToken.START_OBJECT) {\n_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n}\nreturn null;\n}\n// !!! TODO: optimize this case as well\nreturn (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;\n}\n\n// note: identical to one in Utf8StreamParser\n@Override\npublic final int nextIntValue(int defaultValue) throws IOException\n{\nif (_currToken == JsonToken.FIELD_NAME) {\n_nameCopied = false;\nJsonToken t = _nextToken;\n_nextToken = null;\n_currToken = t;\nif (t == JsonToken.VALUE_NUMBER_INT) {\nreturn getIntValue();\n}\nif (t == JsonToken.START_ARRAY) {\n_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n} else if (t == JsonToken.START_OBJECT) {\n_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n}\nreturn defaultValue;\n}\n// !!! TODO: optimize this case as well\nreturn (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;\n}\n\n// note: identical to one in Utf8StreamParser\n@Override\npublic final long nextLongValue(long defaultValue) throws IOException\n{\nif (_currToken == JsonToken.FIELD_NAME) { // mostly copied from '_nextAfterName'\n_nameCopied = false;\nJsonToken t = _nextToken;\n_nextToken = null;\n_currToken = t;\nif (t == JsonToken.VALUE_NUMBER_INT) {\nreturn getLongValue();\n}\nif (t == JsonToken.START_ARRAY) {\n_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n} else if (t == JsonToken.START_OBJECT) {\n_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n}\nreturn defaultValue;\n}\n// !!! TODO: optimize this case as well\nreturn (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;\n}\n\n// note: identical to one in UTF8StreamJsonParser\n@Override\npublic final Boolean nextBooleanValue() throws IOException\n{\nif (_currToken == JsonToken.FIELD_NAME) { // mostly copied from '_nextAfterName'\n_nameCopied = false;\nJsonToken t = _nextToken;\n_nextToken = null;\n_currToken = t;\nif (t == JsonToken.VALUE_TRUE) {\nreturn Boolean.TRUE;\n}\nif (t == JsonToken.VALUE_FALSE) {\nreturn Boolean.FALSE;\n}\nif (t == JsonToken.START_ARRAY) {\n_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n} else if (t == JsonToken.START_OBJECT) {\n_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n}\nreturn null;\n}\nJsonToken t = nextToken();\nif (t != null) {\nint id = t.id();\nif (id == ID_TRUE) return Boolean.TRUE;\nif (id == ID_FALSE) return Boolean.FALSE;\n}\nreturn null;\n}\n\n/*\n/**********************************************************\n/* Internal methods, number parsing\n/**********************************************************\n*/\n\n/**\n* Initial parsing method for number values. It needs to be able\n* to parse enough input to be able to determine whether the\n* value is to be considered a simple integer value, or a more\n* generic decimal value: latter of which needs to be expressed\n* as a floating point number. The basic rule is that if the number\n* has no fractional or exponential part, it is an integer; otherwise\n* a floating point number.\n*<p>\n* Because much of input has to be processed in any case, no partial\n* parsing is done: all input text will be stored for further\n* processing. However, actual numeric value conversion will be\n* deferred, since it is usually the most complicated and costliest\n* part of processing.\n*/\nprotected final JsonToken _parsePosNumber(int ch) throws IOException\n{\n/* Although we will always be complete with respect to textual\n* representation (that is, all characters will be parsed),\n* actual conversion to a number is deferred. Thus, need to\n* note that no representations are valid yet\n*/\nint ptr = _inputPtr;\nint startPtr = ptr-1; // to include digit already read\nfinal int inputLen = _inputEnd;\n\n// One special case, leading zero(es):\nif (ch == INT_0) {\nreturn _parseNumber2(false, startPtr);\n}\n\n/* First, let's see if the whole number is contained within\n* the input buffer unsplit. This should be the common case;\n* and to simplify processing, we will just reparse contents\n* in the alternative case (number split on buffer boundary)\n*/\n\nint intLen = 1; // already got one\n\n// First let's get the obligatory integer part:\nint_loop:\nwhile (true) {\nif (ptr >= inputLen) {\n_inputPtr = startPtr;\nreturn _parseNumber2(false, startPtr);\n}\nch = (int) _inputBuffer[ptr++];\nif (ch < INT_0 || ch > INT_9) {\nbreak int_loop;\n}\n++intLen;\n}\nif (ch == INT_PERIOD || ch == INT_e || ch == INT_E) {\n_inputPtr = ptr;\nreturn _parseFloat(ch, startPtr, ptr, false, intLen);\n}\n// Got it all: let's add to text buffer for parsing, access\n--ptr; // need to push back following separator\n_inputPtr = ptr;\n// As per #105, need separating space between root values; check here\nif (_parsingContext.inRoot()) {\n_verifyRootSpace(ch);\n}\nint len = ptr-startPtr;\n_textBuffer.resetWithShared(_inputBuffer, startPtr, len);\nreturn resetInt(false, intLen);\n}\n\nprivate final JsonToken _parseFloat(int ch, int startPtr, int ptr, boolean neg, int intLen)\nthrows IOException\n{\nfinal int inputLen = _inputEnd;\nint fractLen = 0;\n\n// And then see if we get other parts\nif (ch == '.') { // yes, fraction\nfract_loop:\nwhile (true) {\nif (ptr >= inputLen) {\nreturn _parseNumber2(neg, startPtr);\n}\nch = (int) _inputBuffer[ptr++];\nif (ch < INT_0 || ch > INT_9) {\nbreak fract_loop;\n}\n++fractLen;\n}\n// must be followed by sequence of ints, one minimum\nif (fractLen == 0) {\nreportUnexpectedNumberChar(ch, \"Decimal point not followed by a digit\");\n}\n}\nint expLen = 0;\nif (ch == 'e' || ch == 'E') { // and/or exponent\nif (ptr >= inputLen) {\n_inputPtr = startPtr;\nreturn _parseNumber2(neg, startPtr);\n}\n// Sign indicator?\nch = (int) _inputBuffer[ptr++];\nif (ch == INT_MINUS || ch == INT_PLUS) { // yup, skip for now\nif (ptr >= inputLen) {\n_inputPtr = startPtr;\nreturn _parseNumber2(neg, startPtr);\n}\nch = (int) _inputBuffer[ptr++];\n}\nwhile (ch <= INT_9 && ch >= INT_0) {\n++expLen;\nif (ptr >= inputLen) {\n_inputPtr = startPtr;\nreturn _parseNumber2(neg, startPtr);\n}\nch = (int) _inputBuffer[ptr++];\n}\n// must be followed by sequence of ints, one minimum\nif (expLen == 0) {\nreportUnexpectedNumberChar(ch, \"Exponent indicator not followed by a digit\");\n}\n}\n--ptr; // need to push back following separator\n_inputPtr = ptr;\n// As per #105, need separating space between root values; check here\nif (_parsingContext.inRoot()) {\n_verifyRootSpace(ch);\n}\nint len = ptr-startPtr;\n_textBuffer.resetWithShared(_inputBuffer, startPtr, len);\n// And there we have it!\nreturn resetFloat(neg, intLen, fractLen, expLen);\n}\n\nprotected final JsonToken _parseNegNumber() throws IOException\n{\nint ptr = _inputPtr;\nint startPtr = ptr-1; // to include sign/digit already read\nfinal int inputLen = _inputEnd;\n\nif (ptr >= inputLen) {\nreturn _parseNumber2(true, startPtr);\n}\nint ch = _inputBuffer[ptr++];\n// First check: must have a digit to follow minus sign\nif (ch > INT_9 || ch < INT_0) {\n_inputPtr = ptr;\nreturn _handleInvalidNumberStart(ch, true);\n}\n// One special case, leading zero(es):\nif (ch == INT_0) {\nreturn _parseNumber2(true, startPtr);\n}\nint intLen = 1; // already got one\n\n// First let's get the obligatory integer part:\nint_loop:\nwhile (true) {\nif (ptr >= inputLen) {\nreturn _parseNumber2(true, startPtr);\n}\nch = (int) _inputBuffer[ptr++];\nif (ch < INT_0 || ch > INT_9) {\nbreak int_loop;\n}\n++intLen;\n}\n\nif (ch == INT_PERIOD || ch == INT_e || ch == INT_E) {\n_inputPtr = ptr;\nreturn _parseFloat(ch, startPtr, ptr, true, intLen);\n}\n--ptr;\n_inputPtr = ptr;\nif (_parsingContext.inRoot()) {\n_verifyRootSpace(ch);\n}\nint len = ptr-startPtr;\n_textBuffer.resetWithShared(_inputBuffer, startPtr, len);\nreturn resetInt(true, intLen);\n}\n\n/**\n* Method called to parse a number, when the primary parse\n* method has failed to parse it, due to it being split on\n* buffer boundary. As a result code is very similar, except\n* that it has to explicitly copy contents to the text buffer\n* instead of just sharing the main input buffer.\n*/\nprivate final JsonToken _parseNumber2(boolean neg, int startPtr) throws IOException\n{\n_inputPtr = neg ? (startPtr+1) : startPtr;\nchar[] outBuf = _textBuffer.emptyAndGetCurrentSegment();\nint outPtr = 0;\n\n// Need to prepend sign?\nif (neg) {\noutBuf[outPtr++] = '-';\n}\n\n// This is the place to do leading-zero check(s) too:\nint intLen = 0;\nchar c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++] : getNextChar(\"No digit following minus sign\");\nif (c == '0') {\nc = _verifyNoLeadingZeroes();\n}\nboolean eof = false;\n\n// Ok, first the obligatory integer part:\nint_loop:\nwhile (c >= '0' && c <= '9') {\n++intLen;\nif (outPtr >= outBuf.length) {\noutBuf = _textBuffer.finishCurrentSegment();\noutPtr = 0;\n}\noutBuf[outPtr++] = c;\nif (_inputPtr >= _inputEnd && !loadMore()) {\n// EOF is legal for main level int values\nc = CHAR_NULL;\neof = true;\nbreak int_loop;\n}\nc = _inputBuffer[_inputPtr++];\n}\n// Also, integer part is not optional\nif (intLen == 0) {\nreturn _handleInvalidNumberStart(c, neg);\n}\n\nint fractLen = 0;\n// And then see if we get other parts\nif (c == '.') { // yes, fraction\noutBuf[outPtr++] = c;\n\nfract_loop:\nwhile (true) {\nif (_inputPtr >= _inputEnd && !loadMore()) {\neof = true;\nbreak fract_loop;\n}\nc = _inputBuffer[_inputPtr++];\nif (c < INT_0 || c > INT_9) {\nbreak fract_loop;\n}\n++fractLen;\nif (outPtr >= outBuf.length) {\noutBuf = _textBuffer.finishCurrentSegment();\noutPtr = 0;\n}\noutBuf[outPtr++] = c;\n}\n// must be followed by sequence of ints, one minimum\nif (fractLen == 0) {\nreportUnexpectedNumberChar(c, \"Decimal point not followed by a digit\");\n}\n}\n\nint expLen = 0;\nif (c == 'e' || c == 'E') { // exponent?\nif (outPtr >= outBuf.length) {\noutBuf = _textBuffer.finishCurrentSegment();\noutPtr = 0;\n}\noutBuf[outPtr++] = c;\n// Not optional, can require that we get one more char\nc = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++]\n: getNextChar(\"expected a digit for number exponent\");\n// Sign indicator?\nif (c == '-' || c == '+') {\nif (outPtr >= outBuf.length) {\noutBuf = _textBuffer.finishCurrentSegment();\noutPtr = 0;\n}\noutBuf[outPtr++] = c;\n// Likewise, non optional:\nc = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++]\n: getNextChar(\"expected a digit for number exponent\");\n}\n\nexp_loop:\nwhile (c <= INT_9 && c >= INT_0) {\n++expLen;\nif (outPtr >= outBuf.length) {\noutBuf = _textBuffer.finishCurrentSegment();\noutPtr = 0;\n}\noutBuf[outPtr++] = c;\nif (_inputPtr >= _inputEnd && !loadMore()) {\neof = true;\nbreak exp_loop;\n}\nc = _inputBuffer[_inputPtr++];\n}\n// must be followed by sequence of ints, one minimum\nif (expLen == 0) {\nreportUnexpectedNumberChar(c, \"Exponent indicator not followed by a digit\");\n}\n}\n\n// Ok; unless we hit end-of-input, need to push last char read back\nif (!eof) {\n--_inputPtr;\nif (_parsingContext.inRoot()) {\n_verifyRootSpace(c);\n}\n}\n_textBuffer.setCurrentLength(outPtr);\n// And there we have it!\nreturn reset(neg, intLen, fractLen, expLen);\n}\n\n/**\n* Method called when we have seen one zero, and want to ensure\n* it is not followed by another\n*/\nprivate final char _verifyNoLeadingZeroes() throws IOException\n{\n// Fast case first:\nif (_inputPtr < _inputEnd) {\nchar ch = _inputBuffer[_inputPtr];\n// if not followed by a number (probably '.'); return zero as is, to be included\nif (ch < '0' || ch > '9') {\nreturn '0';\n}\n}\n// and offline the less common case\nreturn _verifyNLZ2();\n}\n\nprivate char _verifyNLZ2() throws IOException\n{\nif (_inputPtr >= _inputEnd && !loadMore()) {\nreturn '0';\n}\nchar ch = _inputBuffer[_inputPtr];\nif (ch < '0' || ch > '9') {\nreturn '0';\n}\nif (!isEnabled(Feature.ALLOW_NUMERIC_LEADING_ZEROS)) {\nreportInvalidNumber(\"Leading zeroes not allowed\");\n}\n// if so, just need to skip either all zeroes (if followed by number); or all but one (if non-number)\n++_inputPtr; // Leading zero to be skipped\nif (ch == INT_0) {\nwhile (_inputPtr < _inputEnd || loadMore()) {\nch = _inputBuffer[_inputPtr];\nif (ch < '0' || ch > '9') { // followed by non-number; retain one zero\nreturn '0';\n}\n++_inputPtr; // skip previous zero\nif (ch != '0') { // followed by other number; return\nbreak;\n}\n}\n}\nreturn ch;\n}\n\n/**\n* Method called if expected numeric value (due to leading sign) does not\n* look like a number\n*/\nprotected JsonToken _handleInvalidNumberStart(int ch, boolean negative) throws IOException\n{\nif (ch == 'I') {\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) { _reportInvalidEOFInValue(); }\n}\nch = _inputBuffer[_inputPtr++];\nif (ch == 'N') {\nString match = negative ? \"-INF\" :\"+INF\";\n_matchToken(match, 3);\nif (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\nreturn resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);\n}\n_reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n} else if (ch == 'n') {\nString match = negative ? \"-Infinity\" :\"+Infinity\";\n_matchToken(match, 3);\nif (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\nreturn resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);\n}\n_reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n}\n}\nreportUnexpectedNumberChar(ch, \"expected digit (0-9) to follow minus sign, for valid numeric value\");\nreturn null;\n}\n\n/**\n* Method called to ensure that a root-value is followed by a space\n* token.\n*<p>\n* NOTE: caller MUST ensure there is at least one character available;\n* and that input pointer is AT given char (not past)\n*/\nprivate final void _verifyRootSpace(int ch) throws IOException\n{\n// caller had pushed it back, before calling; reset\n++_inputPtr;\nswitch (ch) {\ncase ' ':\ncase '\\t':\nreturn;\ncase '\\r':\n_skipCR();\nreturn;\ncase '\\n':\n++_currInputRow;\n_currInputRowStart = _inputPtr;\nreturn;\n}\n_reportMissingRootWS(ch);\n}\n\n/*\n/**********************************************************\n/* Internal methods, secondary parsing\n/**********************************************************\n*/\n\nprotected final String _parseName() throws IOException\n{\n// First: let's try to see if we have a simple name: one that does\n// not cross input buffer boundary, and does not contain escape sequences.\nint ptr = _inputPtr;\nint hash = _hashSeed;\nfinal int[] codes = _icLatin1;\n\nwhile (ptr < _inputEnd) {\nint ch = _inputBuffer[ptr];\nif (ch < codes.length && codes[ch] != 0) {\nif (ch == '\"') {\nint start = _inputPtr;\n_inputPtr = ptr+1; // to skip the quote\nreturn _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);\n}\nbreak;\n}\nhash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;\n++ptr;\n}\nint start = _inputPtr;\n_inputPtr = ptr;\nreturn _parseName2(start, hash, INT_QUOTE);\n}\n\nprivate String _parseName2(int startPtr, int hash, int endChar) throws IOException\n{\n_textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));\n\n/* Output pointers; calls will also ensure that the buffer is\n* not shared and has room for at least one more char.\n*/\nchar[] outBuf = _textBuffer.getCurrentSegment();\nint outPtr = _textBuffer.getCurrentSegmentSize();\n\nwhile (true) {\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) {\n_reportInvalidEOF(\": was expecting closing '\"+((char) endChar)+\"' for name\");\n}\n}\nchar c = _inputBuffer[_inputPtr++];\nint i = (int) c;\nif (i <= INT_BACKSLASH) {\nif (i == INT_BACKSLASH) {\n/* Although chars outside of BMP are to be escaped as\n* an UTF-16 surrogate pair, does that affect decoding?\n* For now let's assume it does not.\n*/\nc = _decodeEscaped();\n} else if (i <= endChar) {\nif (i == endChar) {\nbreak;\n}\nif (i < INT_SPACE) {\n_throwUnquotedSpace(i, \"name\");\n}\n}\n}\nhash = (hash * CharsToNameCanonicalizer.HASH_MULT) + c;\n// Ok, let's add char to output:\noutBuf[outPtr++] = c;\n\n// Need more room?\nif (outPtr >= outBuf.length) {\noutBuf = _textBuffer.finishCurrentSegment();\noutPtr = 0;\n}\n}\n_textBuffer.setCurrentLength(outPtr);\n{\nTextBuffer tb = _textBuffer;\nchar[] buf = tb.getTextBuffer();\nint start = tb.getTextOffset();\nint len = tb.size();\nreturn _symbols.findSymbol(buf, start, len, hash);\n}\n}\n\n/**\n* Method called when we see non-white space character other\n* than double quote, when expecting a field name.\n* In standard mode will just throw an expection; but\n* in non-standard modes may be able to parse name.\n*/\nprotected String _handleOddName(int i) throws IOException\n{\n// [JACKSON-173]: allow single quotes\nif (i == '\\'' && isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {\nreturn _parseAposName();\n}\n// [JACKSON-69]: allow unquoted names if feature enabled:\nif (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES)) {\n_reportUnexpectedChar(i, \"was expecting double-quote to start field name\");\n}\nfinal int[] codes = CharTypes.getInputCodeLatin1JsNames();\nfinal int maxCode = codes.length;\n\n// Also: first char must be a valid name char, but NOT be number\nboolean firstOk;\n\nif (i < maxCode) { // identifier, or a number ([Issue#102])\nfirstOk = (codes[i] == 0);\n} else {\nfirstOk = Character.isJavaIdentifierPart((char) i);\n}\nif (!firstOk) {\n_reportUnexpectedChar(i, \"was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name\");\n}\nint ptr = _inputPtr;\nint hash = _hashSeed;\nfinal int inputLen = _inputEnd;\n\nif (ptr < inputLen) {\ndo {\nint ch = _inputBuffer[ptr];\nif (ch < maxCode) {\nif (codes[ch] != 0) {\nint start = _inputPtr-1; // -1 to bring back first char\n_inputPtr = ptr;\nreturn _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);\n}\n} else if (!Character.isJavaIdentifierPart((char) ch)) {\nint start = _inputPtr-1; // -1 to bring back first char\n_inputPtr = ptr;\nreturn _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);\n}\nhash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;\n++ptr;\n} while (ptr < inputLen);\n}\nint start = _inputPtr-1;\n_inputPtr = ptr;\nreturn _handleOddName2(start, hash, codes);\n}\n\nprotected String _parseAposName() throws IOException\n{\n// Note: mostly copy of_parseFieldName\nint ptr = _inputPtr;\nint hash = _hashSeed;\nfinal int inputLen = _inputEnd;\n\nif (ptr < inputLen) {\nfinal int[] codes = _icLatin1;\nfinal int maxCode = codes.length;\n\ndo {\nint ch = _inputBuffer[ptr];\nif (ch == '\\'') {\nint start = _inputPtr;\n_inputPtr = ptr+1; // to skip the quote\nreturn _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);\n}\nif (ch < maxCode && codes[ch] != 0) {\nbreak;\n}\nhash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;\n++ptr;\n} while (ptr < inputLen);\n}\n\nint start = _inputPtr;\n_inputPtr = ptr;\n\nreturn _parseName2(start, hash, '\\'');\n}\n\n/**\n* Method for handling cases where first non-space character\n* of an expected value token is not legal for standard JSON content.\n*/\nprotected JsonToken _handleOddValue(int i) throws IOException\n{\n// Most likely an error, unless we are to allow single-quote-strings\nswitch (i) {\ncase '\\'':\n/* [JACKSON-173]: allow single quotes. Unlike with regular\n* Strings, we'll eagerly parse contents; this so that there's\n* no need to store information on quote char used.\n*\n* Also, no separation to fast/slow parsing; we'll just do\n* one regular (~= slowish) parsing, to keep code simple\n*/\nif (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {\nreturn _handleApos();\n}\nbreak;\ncase 'N':\n_matchToken(\"NaN\", 1);\nif (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\nreturn resetAsNaN(\"NaN\", Double.NaN);\n}\n_reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\nbreak;\ncase 'I':\n_matchToken(\"Infinity\", 1);\nif (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\nreturn resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);\n}\n_reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\nbreak;\ncase '+': // note: '-' is taken as number\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) {\n_reportInvalidEOFInValue();\n}\n}\nreturn _handleInvalidNumberStart(_inputBuffer[_inputPtr++], false);\n}\n// [Issue#77] Try to decode most likely token\nif (Character.isJavaIdentifierStart(i)) {\n_reportInvalidToken(\"\"+((char) i), \"('true', 'false' or 'null')\");\n}\n// but if it doesn't look like a token:\n_reportUnexpectedChar(i, \"expected a valid value (number, String, array, object, 'true', 'false' or 'null')\");\nreturn null;\n}\n\nprotected JsonToken _handleApos() throws IOException\n{\nchar[] outBuf = _textBuffer.emptyAndGetCurrentSegment();\nint outPtr = _textBuffer.getCurrentSegmentSize();\n\nwhile (true) {\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) {\n_reportInvalidEOF(\": was expecting closing quote for a string value\");\n}\n}\nchar c = _inputBuffer[_inputPtr++];\nint i = (int) c;\nif (i <= '\\\\') {\nif (i == '\\\\') {\n/* Although chars outside of BMP are to be escaped as\n* an UTF-16 surrogate pair, does that affect decoding?\n* For now let's assume it does not.\n*/\nc = _decodeEscaped();\n} else if (i <= '\\'') {\nif (i == '\\'') {\nbreak;\n}\nif (i < INT_SPACE) {\n_throwUnquotedSpace(i, \"string value\");\n}\n}\n}\n// Need more room?\nif (outPtr >= outBuf.length) {\noutBuf = _textBuffer.finishCurrentSegment();\noutPtr = 0;\n}\n// Ok, let's add char to output:\noutBuf[outPtr++] = c;\n}\n_textBuffer.setCurrentLength(outPtr);\nreturn JsonToken.VALUE_STRING;\n}\n\nprivate String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException\n{\n_textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));\nchar[] outBuf = _textBuffer.getCurrentSegment();\nint outPtr = _textBuffer.getCurrentSegmentSize();\nfinal int maxCode = codes.length;\n\nwhile (true) {\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) { // acceptable for now (will error out later)\nbreak;\n}\n}\nchar c = _inputBuffer[_inputPtr];\nint i = (int) c;\nif (i <= maxCode) {\nif (codes[i] != 0) {\nbreak;\n}\n} else if (!Character.isJavaIdentifierPart(c)) {\nbreak;\n}\n++_inputPtr;\nhash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i;\n// Ok, let's add char to output:\noutBuf[outPtr++] = c;\n\n// Need more room?\nif (outPtr >= outBuf.length) {\noutBuf = _textBuffer.finishCurrentSegment();\noutPtr = 0;\n}\n}\n_textBuffer.setCurrentLength(outPtr);\n{\nTextBuffer tb = _textBuffer;\nchar[] buf = tb.getTextBuffer();\nint start = tb.getTextOffset();\nint len = tb.size();\n\nreturn _symbols.findSymbol(buf, start, len, hash);\n}\n}\n\n@Override\nprotected final void _finishString() throws IOException\n{\n/* First: let's try to see if we have simple String value: one\n* that does not cross input buffer boundary, and does not\n* contain escape sequences.\n*/\nint ptr = _inputPtr;\nfinal int inputLen = _inputEnd;\n\nif (ptr < inputLen) {\nfinal int[] codes = _icLatin1;\nfinal int maxCode = codes.length;\n\ndo {\nint ch = _inputBuffer[ptr];\nif (ch < maxCode && codes[ch] != 0) {\nif (ch == '\"') {\n_textBuffer.resetWithShared(_inputBuffer, _inputPtr, (ptr-_inputPtr));\n_inputPtr = ptr+1;\n// Yes, we got it all\nreturn;\n}\nbreak;\n}\n++ptr;\n} while (ptr < inputLen);\n}\n\n/* Either ran out of input, or bumped into an escape\n* sequence...\n*/\n_textBuffer.resetWithCopy(_inputBuffer, _inputPtr, (ptr-_inputPtr));\n_inputPtr = ptr;\n_finishString2();\n}\n\nprotected void _finishString2() throws IOException\n{\nchar[] outBuf = _textBuffer.getCurrentSegment();\nint outPtr = _textBuffer.getCurrentSegmentSize();\nfinal int[] codes = _icLatin1;\nfinal int maxCode = codes.length;\n\nwhile (true) {\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) {\n_reportInvalidEOF(\": was expecting closing quote for a string value\");\n}\n}\nchar c = _inputBuffer[_inputPtr++];\nint i = (int) c;\nif (i < maxCode && codes[i] != 0) {\nif (i == INT_QUOTE) {\nbreak;\n} else if (i == INT_BACKSLASH) {\n/* Although chars outside of BMP are to be escaped as\n* an UTF-16 surrogate pair, does that affect decoding?\n* For now let's assume it does not.\n*/\nc = _decodeEscaped();\n} else if (i < INT_SPACE) {\n_throwUnquotedSpace(i, \"string value\");\n} // anything else?\n}\n// Need more room?\nif (outPtr >= outBuf.length) {\noutBuf = _textBuffer.finishCurrentSegment();\noutPtr = 0;\n}\n// Ok, let's add char to output:\noutBuf[outPtr++] = c;\n}\n_textBuffer.setCurrentLength(outPtr);\n}\n\n/**\n* Method called to skim through rest of unparsed String value,\n* if it is not needed. This can be done bit faster if contents\n* need not be stored for future access.\n*/\nprotected final void _skipString() throws IOException\n{\n_tokenIncomplete = false;\n\nint inPtr = _inputPtr;\nint inLen = _inputEnd;\nchar[] inBuf = _inputBuffer;\n\nwhile (true) {\nif (inPtr >= inLen) {\n_inputPtr = inPtr;\nif (!loadMore()) {\n_reportInvalidEOF(\": was expecting closing quote for a string value\");\n}\ninPtr = _inputPtr;\ninLen = _inputEnd;\n}\nchar c = inBuf[inPtr++];\nint i = (int) c;\nif (i <= INT_BACKSLASH) {\nif (i == INT_BACKSLASH) {\n// Although chars outside of BMP are to be escaped as an UTF-16 surrogate pair,\n// does that affect decoding? For now let's assume it does not.\n_inputPtr = inPtr;\n/*c = */ _decodeEscaped();\ninPtr = _inputPtr;\ninLen = _inputEnd;\n} else if (i <= INT_QUOTE) {\nif (i == INT_QUOTE) {\n_inputPtr = inPtr;\nbreak;\n}\nif (i < INT_SPACE) {\n_inputPtr = inPtr;\n_throwUnquotedSpace(i, \"string value\");\n}\n}\n}\n}\n}\n\n/*\n/**********************************************************\n/* Internal methods, other parsing\n/**********************************************************\n*/\n\n/**\n* We actually need to check the character value here\n* (to see if we have \\n following \\r).\n*/\nprotected final void _skipCR() throws IOException {\nif (_inputPtr < _inputEnd || loadMore()) {\nif (_inputBuffer[_inputPtr] == '\\n') {\n++_inputPtr;\n}\n}\n++_currInputRow;\n_currInputRowStart = _inputPtr;\n}\n\nprivate final int _skipColon() throws IOException\n{\nif ((_inputPtr + 4) >= _inputEnd) {\nreturn _skipColon2(false);\n}\nchar c = _inputBuffer[_inputPtr];\nif (c == ':') { // common case, no leading space\nint i = _inputBuffer[++_inputPtr];\nif (i > INT_SPACE) { // nor trailing\nif (i == INT_SLASH || i == INT_HASH) {\nreturn _skipColon2(true);\n}\n++_inputPtr;\nreturn i;\n}\nif (i == INT_SPACE || i == INT_TAB) {\ni = (int) _inputBuffer[++_inputPtr];\nif (i > INT_SPACE) {\nif (i == INT_SLASH || i == INT_HASH) {\nreturn _skipColon2(true);\n}\n++_inputPtr;\nreturn i;\n}\n}\nreturn _skipColon2(true); // true -> skipped colon\n}\nif (c == ' ' || c == '\\t') {\nc = _inputBuffer[++_inputPtr];\n}\nif (c == ':') {\nint i = _inputBuffer[++_inputPtr];\nif (i > INT_SPACE) {\nif (i == INT_SLASH || i == INT_HASH) {\nreturn _skipColon2(true);\n}\n++_inputPtr;\nreturn i;\n}\nif (i == INT_SPACE || i == INT_TAB) {\ni = (int) _inputBuffer[++_inputPtr];\nif (i > INT_SPACE) {\nif (i == INT_SLASH || i == INT_HASH) {\nreturn _skipColon2(true);\n}\n++_inputPtr;\nreturn i;\n}\n}\nreturn _skipColon2(true);\n}\nreturn _skipColon2(false);\n}\n\nprivate final int _skipColon2(boolean gotColon) throws IOException\n{\nwhile (true) {\nif (_inputPtr >= _inputEnd) {\nloadMoreGuaranteed();\n}\nint i = (int) _inputBuffer[_inputPtr++];\nif (i > INT_SPACE) {\nif (i == INT_SLASH) {\n_skipComment();\ncontinue;\n}\nif (i == INT_HASH) {\nif (_skipYAMLComment()) {\ncontinue;\n}\n}\nif (gotColon) {\nreturn i;\n}\nif (i != INT_COLON) {\n_reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");\n}\ngotColon = true;\ncontinue;\n}\nif (i < INT_SPACE) {\nif (i == INT_LF) {\n++_currInputRow;\n_currInputRowStart = _inputPtr;\n} else if (i == INT_CR) {\n_skipCR();\n} else if (i != INT_TAB) {\n_throwInvalidSpace(i);\n}\n}\n}\n}\n\n// Variant called when we know there's at least 4 more bytes available\nprivate final int _skipColonFast(int ptr) throws IOException\n{\nint i = (int) _inputBuffer[ptr++];\nif (i == INT_COLON) { // common case, no leading space\ni = _inputBuffer[ptr++];\nif (i > INT_SPACE) { // nor trailing\nif (i != INT_SLASH && i != INT_HASH) {\n_inputPtr = ptr;\nreturn i;\n}\n} else if (i == INT_SPACE || i == INT_TAB) {\ni = (int) _inputBuffer[ptr++];\nif (i > INT_SPACE) {\nif (i != INT_SLASH && i != INT_HASH) {\n_inputPtr = ptr;\nreturn i;\n}\n}\n}\n_inputPtr = ptr-1;\nreturn _skipColon2(true); // true -> skipped colon\n}\nif (i == INT_SPACE || i == INT_TAB) {\ni = _inputBuffer[ptr++];\n}\nboolean gotColon = (i == INT_COLON);\nif (gotColon) {\ni = _inputBuffer[ptr++];\nif (i > INT_SPACE) {\nif (i != INT_SLASH && i != INT_HASH) {\n_inputPtr = ptr;\nreturn i;\n}\n} else if (i == INT_SPACE || i == INT_TAB) {\ni = (int) _inputBuffer[ptr++];\nif (i > INT_SPACE) {\nif (i != INT_SLASH && i != INT_HASH) {\n_inputPtr = ptr;\nreturn i;\n}\n}\n}\n}\n_inputPtr = ptr-1;\nreturn _skipColon2(gotColon);\n}\n\n// Primary loop: no reloading, comment handling\nprivate final int _skipComma(int i) throws IOException\n{\nif (i != INT_COMMA) {\n_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");\n}\nwhile (_inputPtr < _inputEnd) {\ni = (int) _inputBuffer[_inputPtr++];\nif (i > INT_SPACE) {\nif (i == INT_SLASH || i == INT_HASH) {\n--_inputPtr;\nreturn _skipAfterComma2();\n}\nreturn i;\n}\nif (i < INT_SPACE) {\nif (i == INT_LF) {\n++_currInputRow;\n_currInputRowStart = _inputPtr;\n} else if (i == INT_CR) {\n_skipCR();\n} else if (i != INT_TAB) {\n_throwInvalidSpace(i);\n}\n}\n}\nreturn _skipAfterComma2();\n}\n\nprivate final int _skipAfterComma2() throws IOException\n{\nwhile (_inputPtr < _inputEnd || loadMore()) {\nint i = (int) _inputBuffer[_inputPtr++];\nif (i > INT_SPACE) {\nif (i == INT_SLASH) {\n_skipComment();\ncontinue;\n}\nif (i == INT_HASH) {\nif (_skipYAMLComment()) {\ncontinue;\n}\n}\nreturn i;\n}\nif (i < INT_SPACE) {\nif (i == INT_LF) {\n++_currInputRow;\n_currInputRowStart = _inputPtr;\n} else if (i == INT_CR) {\n_skipCR();\n} else if (i != INT_TAB) {\n_throwInvalidSpace(i);\n}\n}\n}\nthrow _constructError(\"Unexpected end-of-input within/between \"+_parsingContext.getTypeDesc()+\" entries\");\n}\n\nprivate final int _skipWSOrEnd() throws IOException\n{\n// Let's handle first character separately since it is likely that\n// it is either non-whitespace; or we have longer run of white space\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) {\nreturn _eofAsNextChar();\n}\n}\nint i = _inputBuffer[_inputPtr++];\nif (i > INT_SPACE) {\nif (i == INT_SLASH || i == INT_HASH) {\n--_inputPtr;\nreturn _skipWSOrEnd2();\n}\nreturn i;\n}\nif (i != INT_SPACE) {\nif (i == INT_LF) {\n++_currInputRow;\n_currInputRowStart = _inputPtr;\n} else if (i == INT_CR) {\n_skipCR();\n} else if (i != INT_TAB) {\n_throwInvalidSpace(i);\n}\n}\n\nwhile (_inputPtr < _inputEnd) {\ni = (int) _inputBuffer[_inputPtr++];\nif (i > INT_SPACE) {\nif (i == INT_SLASH || i == INT_HASH) {\n--_inputPtr;\nreturn _skipWSOrEnd2();\n}\nreturn i;\n}\nif (i != INT_SPACE) {\nif (i == INT_LF) {\n++_currInputRow;\n_currInputRowStart = _inputPtr;\n} else if (i == INT_CR) {\n_skipCR();\n} else if (i != INT_TAB) {\n_throwInvalidSpace(i);\n}\n}\n}\nreturn _skipWSOrEnd2();\n}\n\nprivate int _skipWSOrEnd2() throws IOException\n{\nwhile (true) {\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) { // We ran out of input...\nreturn _eofAsNextChar();\n}\n}\nint i = (int) _inputBuffer[_inputPtr++];\nif (i > INT_SPACE) {\nif (i == INT_SLASH) {\n_skipComment();\ncontinue;\n}\nif (i == INT_HASH) {\nif (_skipYAMLComment()) {\ncontinue;\n}\n}\nreturn i;\n} else if (i != INT_SPACE) {\nif (i == INT_LF) {\n++_currInputRow;\n_currInputRowStart = _inputPtr;\n} else if (i == INT_CR) {\n_skipCR();\n} else if (i != INT_TAB) {\n_throwInvalidSpace(i);\n}\n}\n}\n}\n\nprivate void _skipComment() throws IOException\n{\nif (!isEnabled(Feature.ALLOW_COMMENTS)) {\n_reportUnexpectedChar('/', \"maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)\");\n}\n// First: check which comment (if either) it is:\nif (_inputPtr >= _inputEnd && !loadMore()) {\n_reportInvalidEOF(\" in a comment\");\n}\nchar c = _inputBuffer[_inputPtr++];\nif (c == '/') {\n_skipLine();\n} else if (c == '*') {\n_skipCComment();\n} else {\n_reportUnexpectedChar(c, \"was expecting either '*' or '/' for a comment\");\n}\n}\n\nprivate void _skipCComment() throws IOException\n{\n// Ok: need the matching '*/'\nwhile ((_inputPtr < _inputEnd) || loadMore()) {\nint i = (int) _inputBuffer[_inputPtr++];\nif (i <= '*') {\nif (i == '*') { // end?\nif ((_inputPtr >= _inputEnd) && !loadMore()) {\nbreak;\n}\nif (_inputBuffer[_inputPtr] == INT_SLASH) {\n++_inputPtr;\nreturn;\n}\ncontinue;\n}\nif (i < INT_SPACE) {\nif (i == INT_LF) {\n++_currInputRow;\n_currInputRowStart = _inputPtr;\n} else if (i == INT_CR) {\n_skipCR();\n} else if (i != INT_TAB) {\n_throwInvalidSpace(i);\n}\n}\n}\n}\n_reportInvalidEOF(\" in a comment\");\n}\n\nprivate boolean _skipYAMLComment() throws IOException\n{\nif (!isEnabled(Feature.ALLOW_YAML_COMMENTS)) {\nreturn false;\n}\n_skipLine();\nreturn true;\n}\n\nprivate void _skipLine() throws IOException\n{\n// Ok: need to find EOF or linefeed\nwhile ((_inputPtr < _inputEnd) || loadMore()) {\nint i = (int) _inputBuffer[_inputPtr++];\nif (i < INT_SPACE) {\nif (i == INT_LF) {\n++_currInputRow;\n_currInputRowStart = _inputPtr;\nbreak;\n} else if (i == INT_CR) {\n_skipCR();\nbreak;\n} else if (i != INT_TAB) {\n_throwInvalidSpace(i);\n}\n}\n}\n}\n\n@Override\nprotected char _decodeEscaped() throws IOException\n{\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) {\n_reportInvalidEOF(\" in character escape sequence\");\n}\n}\nchar c = _inputBuffer[_inputPtr++];\n\nswitch ((int) c) {\n// First, ones that are mapped\ncase 'b':\nreturn '\\b';\ncase 't':\nreturn '\\t';\ncase 'n':\nreturn '\\n';\ncase 'f':\nreturn '\\f';\ncase 'r':\nreturn '\\r';\n\n// And these are to be returned as they are\ncase '\"':\ncase '/':\ncase '\\\\':\nreturn c;\n\ncase 'u': // and finally hex-escaped\nbreak;\n\ndefault:\nreturn _handleUnrecognizedCharacterEscape(c);\n}\n\n// Ok, a hex escape. Need 4 characters\nint value = 0;\nfor (int i = 0; i < 4; ++i) {\nif (_inputPtr >= _inputEnd) {\nif (!loadMore()) {\n_reportInvalidEOF(\" in character escape sequence\");\n}\n}\nint ch = (int) _inputBuffer[_inputPtr++];\nint digit = CharTypes.charToHex(ch);\nif (digit < 0) {\n_reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n}\nvalue = (value << 4) | digit;\n}\nreturn (char) value;\n}\n\nprivate final void _matchTrue() throws IOException {\nint ptr = _inputPtr;\nif ((ptr + 3) < _inputEnd) {\nfinal char[] b = _inputBuffer;\nif (b[ptr] == 'r' && b[++ptr] == 'u' && b[++ptr] == 'e') {\nchar c = b[++ptr];\nif (c < '0' || c == ']' || c == '}') { // expected/allowed chars\n_inputPtr = ptr;\nreturn;\n}\n}\n}\n// buffer boundary, or problem, offline\n_matchToken(\"true\", 1);\n}\n\nprivate final void _matchFalse() throws IOException {\nint ptr = _inputPtr;\nif ((ptr + 4) < _inputEnd) {\nfinal char[] b = _inputBuffer;\nif (b[ptr] == 'a' && b[++ptr] == 'l' && b[++ptr] == 's' && b[++ptr] == 'e') {\nchar c = b[++ptr];\nif (c < '0' || c == ']' || c == '}') { // expected/allowed chars\n_inputPtr = ptr;\nreturn;\n}\n}\n}\n// buffer boundary, or problem, offline\n_matchToken(\"false\", 1);\n}\n\nprivate final void _matchNull() throws IOException {\nint ptr = _inputPtr;\nif ((ptr + 3) < _inputEnd) {\nfinal char[] b = _inputBuffer;\nif (b[ptr] == 'u' && b[++ptr] == 'l' && b[++ptr] == 'l') {\nchar c = b[++ptr];\nif (c < '0' || c == ']' || c == '}') { // expected/allowed chars\n_inputPtr = ptr;\nreturn;\n}\n}\n}\n// buffer boundary, or problem, offline\n_matchToken(\"null\", 1);\n}",
            "method_id": 77
        }
    ]
}
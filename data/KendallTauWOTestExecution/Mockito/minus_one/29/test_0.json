{
    "bug_id": 29,
    "test_id": 0,
    "test_name": "org.mockitousage.bugs.NPEWithCertainMatchersTest.shouldNotThrowNPEWhenNullPassedToSame",
    "test_body": "public void shouldNotThrowNPEWhenNullPassedToSame() {\nmock.objectArgMethod(\"not null\");\nverify(mock).objectArgMethod(same(null));\n}\n",
    "stack_trace": "java.lang.Exception: Unexpected exception, expected<java.lang.AssertionError> but was<java.lang.NullPointerException>\nat org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:28)\nat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\nat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\nat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\nat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\nat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\nat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\nat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\nat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\nat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\nat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\nat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\nat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:534)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1617)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:1039)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:2162)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:853)\nat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:292)\nat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\nat java.lang.reflect.Method.invoke(Method.java:498)\nat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:99)\nat org.apache.tools.ant.Task.perform(Task.java:350)\nat org.apache.tools.ant.Target.execute(Target.java:449)\nat org.apache.tools.ant.Target.performTasks(Target.java:470)\nat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1388)\nat org.apache.tools.ant.Project.executeTarget(Project.java:1361)\nat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\nat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\nat org.apache.tools.ant.Main.runBuild(Main.java:834)\nat org.apache.tools.ant.Main.startAnt(Main.java:223)\nat org.apache.tools.ant.launch.Launcher.run(Launcher.java:284)\nat org.apache.tools.ant.launch.Launcher.main(Launcher.java:101)\nCaused by: java.lang.NullPointerException\nat org.mockito.internal.matchers.Same.describeTo(Same.java:29)\nat org.mockito.internal.matchers.LocalizedMatcher.describeTo(LocalizedMatcher.java:33)\nat org.hamcrest.BaseDescription.appendDescriptionOf(BaseDescription.java:24)\nat org.hamcrest.StringDescription.toString(StringDescription.java:28)\nat org.mockito.internal.verification.argumentmatching.ArgumentMatchingTool.toStringEquals(ArgumentMatchingTool.java:48)\nat org.mockito.internal.verification.argumentmatching.ArgumentMatchingTool.getSuspiciouslyNotMatchingArgsIndexes(ArgumentMatchingTool.java:30)\nat org.mockito.internal.verification.checkers.MissingInvocationChecker.check(MissingInvocationChecker.java:37)\nat org.mockito.internal.verification.Times.verify(Times.java:35)\nat org.mockito.internal.verification.MockAwareVerificationMode.verify(MockAwareVerificationMode.java:21)\nat org.mockito.internal.MockHandler.handle(MockHandler.java:80)\nat org.mockito.internal.creation.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:47)\nat org.mockitousage.IMethods$$EnhancerByMockitoWithCGLIB$$d2e39603.objectArgMethod(<generated>)\nat org.mockitousage.bugs.NPEWithCertainMatchersTest.shouldNotThrowNPEWhenNullPassedToSame(NPEWithCertainMatchersTest.java:65)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.creation.MethodInterceptorFilter:createMockitoMethodProxy(Lorg/mockito/cglib/proxy/MethodProxy;)Lorg/mockito/internal/creation/MockitoMethodProxy;",
            "method_body": "public MockitoMethodProxy createMockitoMethodProxy(MethodProxy methodProxy) {\nif (mockSettings.isSerializable())\nreturn new SerializableMockitoMethodProxy(methodProxy);\nreturn new DelegatingMockitoMethodProxy(methodProxy);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.mockito.internal.verification.RegisteredInvocations:getAll()Ljava/util/List;",
            "method_body": "public List<Invocation> getAll() {\nreturn ListUtil.filter(new LinkedList<Invocation>(invocations), new RemoveToString());\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.mockito.Mockito:mock(Ljava/lang/Class;Lorg/mockito/MockSettings;)Ljava/lang/Object;",
            "method_body": "public static <T> T mock(Class<T> classToMock, MockSettings mockSettings) {\nreturn MOCKITO_CORE.mock(classToMock, mockSettings);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.SearchingClassLoader:addIfNewElement(Ljava/util/List;Ljava/lang/ClassLoader;)V",
            "method_body": "private static void addIfNewElement(List<ClassLoader> loaders, ClassLoader c) {\nif (c != null && !loaders.contains(c)) {\nloaders.add(c);\n}\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.mockito.Mockito:withSettings()Lorg/mockito/MockSettings;",
            "method_body": "public static MockSettings withSettings() {\nreturn new MockSettingsImpl().defaultAnswer(RETURNS_DEFAULTS);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.mockito.internal.creation.MethodInterceptorFilter:<init>(Lorg/mockito/internal/MockitoInvocationHandler;Lorg/mockito/internal/creation/MockSettingsImpl;)V",
            "method_body": "public MethodInterceptorFilter(MockitoInvocationHandler handler, MockSettingsImpl mockSettings) {\nthis.handler = handler;\nthis.mockSettings = mockSettings;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.mockito.internal.invocation.MatchersBinder:bindMatchers(Lorg/mockito/internal/progress/ArgumentMatcherStorage;Lorg/mockito/internal/invocation/Invocation;)Lorg/mockito/internal/invocation/InvocationMatcher;",
            "method_body": "public InvocationMatcher bindMatchers(ArgumentMatcherStorage argumentMatcherStorage, Invocation invocation) {\nList<Matcher> lastMatchers = argumentMatcherStorage.pullMatchers();\nvalidateMatchers(invocation, lastMatchers);\n\nInvocationMatcher invocationWithMatchers = new InvocationMatcher(invocation, lastMatchers);\nreturn invocationWithMatchers;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:validateState()V",
            "method_body": "public void validateState() {\nvalidateMostStuff();\n\n//validate stubbing:\nif (stubbingInProgress != null) {\nLocation temp = stubbingInProgress;\nstubbingInProgress = null;\nreporter.unfinishedStubbing(temp);\n}\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.mockito.internal.debugging.Location:<init>()V",
            "method_body": "public Location() {\nthis(new StackTraceFilter());\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.mockito.internal.verification.MockAwareVerificationMode:<init>(Ljava/lang/Object;Lorg/mockito/verification/VerificationMode;)V",
            "method_body": "public MockAwareVerificationMode(Object mock, VerificationMode mode) {\nthis.mock = mock;\nthis.mode = mode;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.mockito.internal.verification.VerificationDataImpl:assertWantedIsVerifiable()V",
            "method_body": "void assertWantedIsVerifiable() {\nif (wanted == null) {\nreturn;\n}\nObjectMethodsGuru o = new ObjectMethodsGuru();\nif (o.isToString(wanted.getMethod())) {\nnew Reporter().cannotVerifyToString();\n}\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:mockingStarted(Ljava/lang/Object;Ljava/lang/Class;Lorg/mockito/MockSettings;)V",
            "method_body": "public void mockingStarted(Object mock, Class classToMock, MockSettings mockSettings) {\nthreadSafely().mockingStarted(mock, classToMock, mockSettings);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:getInvocations()Ljava/util/List;",
            "method_body": "public List<Invocation> getInvocations() {\nreturn registeredInvocations.getAll();\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:threadSafely()Lorg/mockito/internal/progress/MockingProgress;",
            "method_body": "static MockingProgress threadSafely() {\nif (mockingProgress.get() == null) {\nmockingProgress.set(new MockingProgressImpl());\n}\nreturn mockingProgress.get();\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.mockito.internal.invocation.Invocation:isVerified()Z",
            "method_body": "public boolean isVerified() {\nreturn verified;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.mockito.internal.stubbing.defaultanswers.GloballyConfiguredAnswer:answer(Lorg/mockito/invocation/InvocationOnMock;)Ljava/lang/Object;",
            "method_body": "public Object answer(InvocationOnMock invocation) throws Throwable {\nreturn new GlobalConfiguration().getDefaultAnswer().answer(invocation);\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.mockito.internal.progress.SequenceNumber:next()I",
            "method_body": "public static synchronized int next() {\nreturn sequenceNumber++;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:validateMostStuff()V",
            "method_body": "private void validateMostStuff() {\n//State is cool when GlobalConfiguration is already loaded\n//this cannot really be tested functionally because I cannot dynamically mess up org.mockito.configuration.MockitoConfiguration class\nGlobalConfiguration.validate();\n\nif (verificationMode != null) {\nLocation location = verificationMode.getLocation();\nverificationMode = null;\nreporter.unfinishedVerificationException(location);\n}\n\ngetArgumentMatcherStorage().validateState();\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:<init>()V",
            "method_body": "public GlobalConfiguration() {\n//Configuration should be loaded only once but I cannot really test it\nif (globalConfiguration.get() == null) {\nglobalConfiguration.set(createConfig());\n}\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:mockingStarted(Ljava/lang/Object;Ljava/lang/Class;Lorg/mockito/MockSettings;)V",
            "method_body": "public void mockingStarted(Object mock, Class classToMock, MockSettings mockSettings) {\nif (listener != null && listener instanceof MockingStartedListener) {\n((MockingStartedListener) listener).mockingStarted(mock, classToMock, mockSettings);\n}\nvalidateMostStuff();\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.mockito.internal.MockHandler:handle(Lorg/mockito/internal/invocation/Invocation;)Ljava/lang/Object;",
            "method_body": "public Object handle(Invocation invocation) throws Throwable {\nif (invocationContainerImpl.hasAnswersForStubbing()) {\n// stubbing voids with stubVoid() or doAnswer() style\nInvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress\n.getArgumentMatcherStorage(), invocation);\ninvocationContainerImpl.setMethodForStubbing(invocationMatcher);\nreturn null;\n}\nVerificationMode verificationMode = mockingProgress.pullVerificationMode();\n\nInvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),\ninvocation);\n\nmockingProgress.validateState();\n\n//if verificationMode is not null then someone is doing verify()\nif (verificationMode != null) {\n//We need to check if verification was started on the correct mock\n// - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)\n//TODO: can I avoid this cast here?\nif (((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {\nVerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);\nverificationMode.verify(data);\nreturn null;\n} else {\n// this means there is an invocation on a different mock. Re-adding verification mode\n// - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)\nmockingProgress.verificationStarted(verificationMode);\n}\n}\n\ninvocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);\nOngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);\nmockingProgress.reportOngoingStubbing(ongoingStubbing);\n\nStubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);\n\nif (stubbedInvocation != null) {\nstubbedInvocation.captureArgumentsFrom(invocation);\nreturn stubbedInvocation.answer(invocation);\n} else {\nObject ret = mockSettings.getDefaultAnswer().answer(invocation);\n\n// redo setting invocation for potential stubbing in case of partial\n// mocks / spies.\n// Without it, the real method inside 'when' might have delegated\n// to other self method and overwrite the intended stubbed method\n// with a different one. The reset is required to avoid runtime exception that validates return type with stubbed method signature.\ninvocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);\nreturn ret;\n}\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.mockito.internal.verification.VerificationDataImpl:<init>(Lorg/mockito/internal/stubbing/InvocationContainer;Lorg/mockito/internal/invocation/InvocationMatcher;)V",
            "method_body": "public VerificationDataImpl(InvocationContainer invocations, InvocationMatcher wanted) {\nthis.invocations = invocations;\nthis.wanted = wanted;\nthis.assertWantedIsVerifiable();\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.SearchingClassLoader:combine(Ljava/util/List;)Ljava/lang/ClassLoader;",
            "method_body": "private static ClassLoader combine(List<ClassLoader> parentLoaders) {\nClassLoader loader = parentLoaders.get(parentLoaders.size()-1);\n\nfor (int i = parentLoaders.size()-2; i >= 0; i--) {\nloader = new SearchingClassLoader(parentLoaders.get(i), loader);\n}\n\nreturn loader;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:verificationStarted(Lorg/mockito/verification/VerificationMode;)V",
            "method_body": "public void verificationStarted(VerificationMode verify) {\nthreadSafely().verificationStarted(verify);\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:verificationStarted(Lorg/mockito/verification/VerificationMode;)V",
            "method_body": "public void verificationStarted(VerificationMode verify) {\nvalidateState();\nresetOngoingStubbing();\nverificationMode = new Localized(verify);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingTool:getSuspiciouslyNotMatchingArgsIndexes(Ljava/util/List;[Ljava/lang/Object;)[Ljava/lang/Integer;",
            "method_body": "public Integer[] getSuspiciouslyNotMatchingArgsIndexes(List<Matcher> matchers, Object[] arguments) {\nif (matchers.size() != arguments.length) {\nreturn new Integer[0];\n}\n\nList<Integer> suspicious = new LinkedList<Integer>();\nint i = 0;\nfor (Matcher m : matchers) {\nif (m instanceof ContainsExtraTypeInformation\n&& !safelyMatches(m, arguments[i])\n&& toStringEquals(m, arguments[i])\n&& !((ContainsExtraTypeInformation) m).typeMatches(arguments[i])) {\nsuspicious.add(i);\n}\ni++;\n}\nreturn suspicious.toArray(new Integer[0]);\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.mockito.internal.invocation.Invocation:getArgumentsCount()I",
            "method_body": "public int getArgumentsCount() {\nreturn arguments.length;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.mockito.internal.matchers.LocalizedMatcher:<init>(Lorg/hamcrest/Matcher;)V",
            "method_body": "public LocalizedMatcher(Matcher actualMatcher) {\nthis.actualMatcher = actualMatcher;\nthis.location = new Location();\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:createProxyClass(Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/Class;",
            "method_body": "private Class<?> createProxyClass(Class<?> mockedType, Class<?>...interfaces) {\nif (mockedType == Object.class) {\nmockedType = ClassWithSuperclassToWorkAroundCglibBug.class;\n}\n\nEnhancer enhancer = new Enhancer() {\n@Override\n@SuppressWarnings(\"unchecked\")\nprotected void filterConstructors(Class sc, List constructors) {\n// Don't filter\n}\n};\nenhancer.setClassLoader(SearchingClassLoader.combineLoadersOf(mockedType));\nenhancer.setUseFactory(true);\nif (mockedType.isInterface()) {\nenhancer.setSuperclass(Object.class);\nenhancer.setInterfaces(prepend(mockedType, interfaces));\n} else {\nenhancer.setSuperclass(mockedType);\nenhancer.setInterfaces(interfaces);\n}\nenhancer.setCallbackTypes(new Class[]{MethodInterceptor.class, NoOp.class});\nenhancer.setCallbackFilter(IGNORE_BRIDGE_METHODS);\nif (mockedType.getSigners() != null) {\nenhancer.setNamingPolicy(NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES);\n} else {\nenhancer.setNamingPolicy(MockitoNamingPolicy.INSTANCE);\n}\n\ntry {\nreturn enhancer.createClass();\n} catch (CodeGenerationException e) {\nif (Modifier.isPrivate(mockedType.getModifiers())) {\nthrow new MockitoException(\"\\n\"\n+ \"Mockito cannot mock this class: \" + mockedType\n+ \".\\n\"\n+ \"Most likely it is a private class that is not visible by Mockito\");\n}\nthrow new MockitoException(\"\\n\"\n+ \"Mockito cannot mock this class: \" + mockedType\n+ \"\\n\"\n+ \"Mockito can only mock visible & non-final classes.\"\n+ \"\\n\"\n+ \"If you're not sure why you're getting this error, please report to the mailing list.\", e);\n}\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.mockito.internal.invocation.InvocationMatcher:<init>(Lorg/mockito/internal/invocation/Invocation;Ljava/util/List;)V",
            "method_body": "public InvocationMatcher(Invocation invocation, List<Matcher> matchers) {\nthis.invocation = invocation;\nif (matchers.isEmpty()) {\nthis.matchers = invocation.argumentsToMatchers();\n} else {\nthis.matchers = matchers;\n}\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.mockito.internal.verification.checkers.MissingInvocationChecker:<init>(Lorg/mockito/internal/invocation/InvocationsFinder;Lorg/mockito/exceptions/Reporter;)V",
            "method_body": "MissingInvocationChecker(InvocationsFinder finder, Reporter reporter) {\nthis.finder = finder;\nthis.reporter = reporter;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.mockito.Answers:get()Lorg/mockito/stubbing/Answer;",
            "method_body": "public Answer<Object> get() {\nreturn implementation;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.mockito.internal.util.MockName:<init>(Ljava/lang/String;Ljava/lang/Class;)V",
            "method_body": "public MockName(String mockName, Class classToMock) {\nif (mockName == null) {\nthis.mockName = toInstanceName(classToMock);\nthis.surrogate = true;\n} else {\nthis.mockName = mockName;\n}\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.mockito.internal.debugging.Location:<init>(Lorg/mockito/internal/exceptions/base/StackTraceFilter;)V",
            "method_body": "public Location(StackTraceFilter stackTraceFilter) {\nthis.stackTraceFilter = stackTraceFilter;\nstackTraceHolder = new Throwable();\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:prepend(Ljava/lang/Class;[Ljava/lang/Class;)[Ljava/lang/Class;",
            "method_body": "private Class<?>[] prepend(Class<?> first, Class<?>... rest) {\nClass<?>[] all = new Class<?>[rest.length+1];\nall[0] = first;\nSystem.arraycopy(rest, 0, all, 1, rest.length);\nreturn all;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.mockito.internal.matchers.Same:matches(Ljava/lang/Object;)Z",
            "method_body": "public boolean matches(Object actual) {\nreturn wanted == actual;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:getArgumentMatcherStorage()Lorg/mockito/internal/progress/ArgumentMatcherStorage;",
            "method_body": "public ArgumentMatcherStorage getArgumentMatcherStorage() {\nreturn argumentMatcherStorage;\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:getAnnotationEngine()Lorg/mockito/configuration/AnnotationEngine;",
            "method_body": "public AnnotationEngine getAnnotationEngine() {\nreturn globalConfiguration.get().getAnnotationEngine();\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:hasAnswersForStubbing()Z",
            "method_body": "public boolean hasAnswersForStubbing() {\nreturn !answersForStubbing.isEmpty();\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.mockito.internal.creation.cglib.CGLIBHacker:reflectOnCreateInfo(Lorg/mockito/cglib/proxy/MethodProxy;)Ljava/lang/reflect/Field;",
            "method_body": "private Field reflectOnCreateInfo(MethodProxy methodProxy) throws SecurityException, NoSuchFieldException {\n\nClass cglibMethodProxyClass = methodProxy.getClass();\n// in case methodProxy was extended by user, let's traverse the object\n// graph to find the cglib methodProxy\n// with all the fields we would like to change\nwhile (cglibMethodProxyClass != MethodProxy.class) {\ncglibMethodProxyClass = methodProxy.getClass().getSuperclass();\n}\nreturn cglibMethodProxyClass.getDeclaredField(\"createInfo\");\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.mockito.internal.invocation.Invocation:argumentsToMatchers()Ljava/util/List;",
            "method_body": "protected List<Matcher> argumentsToMatchers() {\nList<Matcher> matchers = new ArrayList<Matcher>(arguments.length);\nfor (Object arg : arguments) {\nif (arg != null && arg.getClass().isArray()) {\nmatchers.add(new ArrayEquals(arg));\n} else {\nmatchers.add(new Equals(arg));\n}\n}\nreturn matchers;\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.mockito.internal.creation.MethodInterceptorFilter:intercept(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;Lorg/mockito/cglib/proxy/MethodProxy;)Ljava/lang/Object;",
            "method_body": "public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy)\nthrows Throwable {\nif (objectMethodsGuru.isEqualsMethod(method)) {\nreturn proxy == args[0];\n} else if (objectMethodsGuru.isHashCodeMethod(method)) {\nreturn hashCodeForMock(proxy);\n}\n\nMockitoMethodProxy mockitoMethodProxy = createMockitoMethodProxy(methodProxy);\ncglibHacker.setMockitoNamingPolicy(mockitoMethodProxy);\n\nMockitoMethod mockitoMethod = createMockitoMethod(method);\n\nFilteredCGLIBProxyRealMethod realMethod = new FilteredCGLIBProxyRealMethod(mockitoMethodProxy);\nInvocation invocation = new Invocation(proxy, mockitoMethod, args, SequenceNumber.next(), realMethod);\nreturn handler.handle(invocation);\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.mockito.MockitoAnnotations:initMocks(Ljava/lang/Object;)V",
            "method_body": "public static void initMocks(Object testClass) {\nif (testClass == null) {\nthrow new MockitoException(\"testClass cannot be null. For info how to use @Mock annotations see examples in javadoc for MockitoAnnotations class\");\n}\n\nClass<?> clazz = testClass.getClass();\nwhile (clazz != Object.class) {\nscan(testClass, clazz);\nclazz = clazz.getSuperclass();\n}\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:reportOngoingStubbing(Lorg/mockito/internal/progress/IOngoingStubbing;)V",
            "method_body": "public void reportOngoingStubbing(IOngoingStubbing iOngoingStubbing) {\nthis.iOngoingStubbing = iOngoingStubbing;\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.mockito.internal.invocation.Invocation:expandVarArgs(Z[Ljava/lang/Object;)[Ljava/lang/Object;",
            "method_body": "private static Object[] expandVarArgs(final boolean isVarArgs, final Object[] args) {\nif (!isVarArgs || args[args.length - 1] != null && !args[args.length - 1].getClass().isArray()) {\nreturn args == null ? new Object[0] : args;\n}\n\nfinal int nonVarArgsCount = args.length - 1;\nObject[] varArgs;\nif (args[nonVarArgsCount] == null) {\n// in case someone deliberately passed null varArg array\nvarArgs = new Object[] { null };\n} else {\nvarArgs = ArrayEquals.createObjectArray(args[nonVarArgsCount]);\n}\nfinal int varArgsCount = varArgs.length;\nObject[] newArgs = new Object[nonVarArgsCount + varArgsCount];\nSystem.arraycopy(args, 0, newArgs, 0, nonVarArgsCount);\nSystem.arraycopy(varArgs, 0, newArgs, nonVarArgsCount, varArgsCount);\nreturn newArgs;\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.mockito.Matchers:reportMatcher(Lorg/hamcrest/Matcher;)Lorg/mockito/internal/progress/HandyReturnValues;",
            "method_body": "private static HandyReturnValues reportMatcher(Matcher<?> matcher) {\nreturn mockingProgress.getArgumentMatcherStorage().reportMatcher(matcher);\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.mockito.internal.invocation.ArgumentsComparator:argumentsMatch(Lorg/mockito/internal/invocation/InvocationMatcher;Lorg/mockito/internal/invocation/Invocation;)Z",
            "method_body": "public boolean argumentsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\nObject[] actualArgs = actual.getArguments();\nreturn argumentsMatch(invocationMatcher, actualArgs) || varArgsMatch(invocationMatcher, actual);\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl:validateState()V",
            "method_body": "public void validateState() {\nif (!matcherStack.isEmpty()) {\nLocalizedMatcher lastMatcher = matcherStack.lastElement();\nmatcherStack.clear();\nnew Reporter().misplacedArgumentMatcher(lastMatcher.getLocation());\n}\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.mockito.internal.util.ObjectMethodsGuru:isToString(Lorg/mockito/internal/invocation/MockitoMethod;)Z",
            "method_body": "public boolean isToString(MockitoMethod method) {\nreturn method.getReturnType() == String.class && method.getParameterTypes().length == 0\n&& method.getName().equals(\"toString\");\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.mockito.internal.invocation.InvocationsFinder$RemoveNotMatching:isOut(Lorg/mockito/internal/invocation/Invocation;)Z",
            "method_body": "public boolean isOut(Invocation invocation) {\nreturn !wanted.matches(invocation);\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues:returnValueFor(Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "Object returnValueFor(Class<?> type) {\nif (type.isPrimitive()) {\nreturn primitiveOf(type);\n} else if (Primitives.isPrimitiveWrapper(type)) {\nreturn Primitives.primitiveWrapperOf(type);\n//new instances are used instead of Collections.emptyList(), etc.\n//to avoid UnsupportedOperationException if code under test modifies returned collection\n} else if (type == Collection.class) {\nreturn new LinkedList<Object>();\n} else if (type == Set.class) {\nreturn new HashSet<Object>();\n} else if (type == HashSet.class) {\nreturn new HashSet<Object>();\n} else if (type == SortedSet.class) {\nreturn new TreeSet<Object>();\n} else if (type == TreeSet.class) {\nreturn new TreeSet<Object>();\n} else if (type == LinkedHashSet.class) {\nreturn new LinkedHashSet<Object>();\n} else if (type == List.class) {\nreturn new LinkedList<Object>();\n} else if (type == LinkedList.class) {\nreturn new LinkedList<Object>();\n} else if (type == ArrayList.class) {\nreturn new ArrayList<Object>();\n} else if (type == Map.class) {\nreturn new HashMap<Object, Object>();\n} else if (type == HashMap.class) {\nreturn new HashMap<Object, Object>();\n} else if (type == SortedMap.class) {\nreturn new TreeMap<Object, Object>();\n} else if (type == TreeMap.class) {\nreturn new TreeMap<Object, Object>();\n} else if (type == LinkedHashMap.class) {\nreturn new LinkedHashMap<Object, Object>();\n}\n//Let's not care about the rest of collections.\nreturn null;\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.mockito.MockitoAnnotations:throwIfAlreadyAssigned(Ljava/lang/reflect/Field;Z)V",
            "method_body": "static void throwIfAlreadyAssigned(Field field, boolean alreadyAssigned) {\nif (alreadyAssigned) {\nnew Reporter().moreThanOneAnnotationNotAllowed(field.getName());\n}\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:getIt()Lorg/mockito/configuration/IMockitoConfiguration;",
            "method_body": "IMockitoConfiguration getIt() {\nreturn globalConfiguration.get();\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.mockito.internal.invocation.Invocation:<init>(Ljava/lang/Object;Lorg/mockito/internal/invocation/MockitoMethod;[Ljava/lang/Object;ILorg/mockito/internal/invocation/realmethod/RealMethod;)V",
            "method_body": "public Invocation(Object mock, MockitoMethod mockitoMethod, Object[] args, int sequenceNumber, RealMethod realMethod) {\nthis.method = mockitoMethod;\nthis.mock = mock;\nthis.realMethod = realMethod;\nthis.arguments = expandVarArgs(mockitoMethod.isVarArgs(), args);\nthis.rawArguments = args;\nthis.sequenceNumber = sequenceNumber;\nthis.location = new Location();\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.mockito.internal.invocation.InvocationMatcher:hasSimilarMethod(Lorg/mockito/internal/invocation/Invocation;)Z",
            "method_body": "public boolean hasSimilarMethod(Invocation candidate) {\nString wantedMethodName = getMethod().getName();\nString currentMethodName = candidate.getMethod().getName();\n\nfinal boolean methodNameEquals = wantedMethodName.equals(currentMethodName);\nfinal boolean isUnverified = !candidate.isVerified();\nfinal boolean mockIsTheSame = getInvocation().getMock() == candidate.getMock();\nfinal boolean methodEquals = hasSameMethod(candidate);\n\nif (!methodNameEquals || !isUnverified || !mockIsTheSame) {\nreturn false;\n}\n\nfinal boolean overloadedButSameArgs = !methodEquals && safelyArgumentsMatch(candidate.getArguments());\n\nreturn !overloadedButSameArgs;\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:name(Ljava/lang/String;)Lorg/mockito/MockSettings;",
            "method_body": "public MockSettings name(String name) {\nthis.name = name;\nreturn this;\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMethod:<init>(Ljava/lang/reflect/Method;)V",
            "method_body": "public DelegatingMethod(Method method) {\nassert method != null : \"Method cannot be null\";\nthis.method = method;\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.mockito.configuration.DefaultMockitoConfiguration:getDefaultAnswer()Lorg/mockito/stubbing/Answer;",
            "method_body": "public Answer<Object> getDefaultAnswer() {\nreturn new ReturnsEmptyValues();\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.AccessibilityChanger:enableAccess(Ljava/lang/reflect/AccessibleObject;)V",
            "method_body": "public void enableAccess(AccessibleObject accessibleObject) {\nwasAccessible = accessibleObject.isAccessible();\naccessibleObject.setAccessible(true);\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.mockito.internal.invocation.realmethod.FilteredCGLIBProxyRealMethod:<init>(Lorg/mockito/internal/creation/MockitoMethodProxy;)V",
            "method_body": "public FilteredCGLIBProxyRealMethod(MockitoMethodProxy methodProxy) {\nthis(new CGLIBProxyRealMethod(methodProxy));\n}",
            "method_id": 59
        },
        {
            "method_signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl:reset()V",
            "method_body": "public void reset() {\nmatcherStack.clear();\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.mockito.internal.matchers.Equals:<init>(Ljava/lang/Object;)V",
            "method_body": "public Equals(Object wanted) {\nthis.wanted = wanted;\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:reset()V",
            "method_body": "public void reset() {\nthreadSafely().reset();\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.mockito.internal.verification.checkers.MissingInvocationChecker:<init>()V",
            "method_body": "public MissingInvocationChecker() {\nthis(new InvocationsFinder(), new Reporter());\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.mockito.internal.configuration.DefaultAnnotationEngine:createMockFor(Ljava/lang/annotation/Annotation;Ljava/lang/reflect/Field;)Ljava/lang/Object;",
            "method_body": "public Object createMockFor(Annotation annotation, Field field) {\nif (annotation instanceof Mock) {\nreturn processAnnotationOn((Mock) annotation, field);\n}\nif (annotation instanceof MockitoAnnotations.Mock) {\nreturn processAnnotationOn((MockitoAnnotations.Mock) annotation, field);\n}\nif (annotation instanceof Captor) {\nreturn processAnnotationOn((Captor) annotation, field);\n}\n\nreturn null;\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.mockito.internal.invocation.realmethod.FilteredCGLIBProxyRealMethod:<init>(Lorg/mockito/internal/invocation/realmethod/RealMethod;)V",
            "method_body": "public FilteredCGLIBProxyRealMethod(RealMethod realMethod) {\nthis.realMethod = realMethod;\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.mockito.internal.invocation.ArgumentsComparator:varArgsMatch(Lorg/mockito/internal/invocation/InvocationMatcher;Lorg/mockito/internal/invocation/Invocation;)Z",
            "method_body": "private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\nif (!actual.getMethod().isVarArgs()) {\n//if the method is not vararg forget about it\nreturn false;\n}\n\n//we must use raw arguments, not arguments...\nObject[] rawArgs = actual.getRawArguments();\nList<Matcher> matchers = invocationMatcher.getMatchers();\n\nif (rawArgs.length != matchers.size()) {\nreturn false;\n}\n\nfor (int i = 0; i < rawArgs.length; i++) {\nMatcher m = matchers.get(i);\n//it's a vararg because it's the last array in the arg list\nif (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\nMatcher actualMatcher;\n//this is necessary as the framework often decorates matchers\nif (m instanceof MatcherDecorator) {\nactualMatcher = ((MatcherDecorator)m).getActualMatcher();\n} else {\nactualMatcher = m;\n}\n//this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\nif (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\nreturn false;\n}\n//it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n} else if (!m.matches(rawArgs[i])){\nreturn false;\n}\n}\n\nreturn true;\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:defaultAnswer(Lorg/mockito/stubbing/Answer;)Lorg/mockito/MockSettings;",
            "method_body": "public MockSettings defaultAnswer(Answer defaultAnswer) {\nthis.defaultAnswer = defaultAnswer;\nreturn this;\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.mockito.internal.invocation.InvocationsFinder:findSimilarInvocation(Ljava/util/List;Lorg/mockito/internal/invocation/InvocationMatcher;)Lorg/mockito/internal/invocation/Invocation;",
            "method_body": "public Invocation findSimilarInvocation(List<Invocation> invocations, InvocationMatcher wanted) {\nInvocation firstSimilar = null;\nfor (Invocation invocation : invocations) {\nif (!wanted.hasSimilarMethod(invocation)) {\ncontinue;\n}\nif (firstSimilar == null) {\nfirstSimilar = invocation;\n}\nif (wanted.hasSameMethod(invocation)) {\nreturn invocation;\n}\n}\n\nreturn firstSimilar;\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.mockito.internal.matchers.LocalizedMatcher:describeTo(Lorg/hamcrest/Description;)V",
            "method_body": "public void describeTo(Description description) {\nactualMatcher.describeTo(description);\n}",
            "method_id": 69
        },
        {
            "method_signature": "org.mockito.MockitoAnnotations:processAnnotationDeprecatedWay(Lorg/mockito/configuration/AnnotationEngine;Ljava/lang/Object;Ljava/lang/reflect/Field;)V",
            "method_body": "static void processAnnotationDeprecatedWay(AnnotationEngine annotationEngine, Object testClass, Field field) {\nboolean alreadyAssigned = false;\nfor(Annotation annotation : field.getAnnotations()) {\nObject mock = annotationEngine.createMockFor(annotation, field);\nif (mock != null) {\nthrowIfAlreadyAssigned(field, alreadyAssigned);\nalreadyAssigned = true;\ntry {\nnew FieldSetter(testClass, field).set(mock);\n} catch (Exception e) {\nthrow new MockitoException(\"Problems setting field \" + field.getName() + \" annotated with \"\n+ annotation, e);\n}\n}\n}\n}",
            "method_id": 70
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.SearchingClassLoader:combineLoadersOf(Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/ClassLoader;",
            "method_body": "private static ClassLoader combineLoadersOf(Class<?> first, Class<?>... others) {\nList<ClassLoader> loaders = new ArrayList<ClassLoader>();\n\naddIfNewElement(loaders, first.getClassLoader());\nfor (Class<?> c : others) {\naddIfNewElement(loaders, c.getClassLoader());\n}\n\n// To support Eclipse Plug-in tests.\n// In an Eclipse plug-in, jMock itself will not be on the system class loader\n// but in the class loader of the plug-in.\n//\n// Note: I've been unable to reproduce the error in jMock's test suite.\naddIfNewElement(loaders, SearchingClassLoader.class.getClassLoader());\n\n// To support the Maven Surefire plugin.\n// Note: I've been unable to reproduce the error in jMock's test suite.\naddIfNewElement(loaders, currentThread().getContextClassLoader());\n\n//Had to comment that out because it didn't work with in-container Spring tests\n//addIfNewElement(loaders, ClassLoader.getSystemClassLoader());\n\nreturn combine(loaders);\n}",
            "method_id": 71
        },
        {
            "method_signature": "org.mockito.internal.invocation.ArgumentsComparator:argumentsMatch(Lorg/mockito/internal/invocation/InvocationMatcher;[Ljava/lang/Object;)Z",
            "method_body": "public boolean argumentsMatch(InvocationMatcher invocationMatcher, Object[] actualArgs) {\nif (actualArgs.length != invocationMatcher.getMatchers().size()) {\nreturn false;\n}\nfor (int i = 0; i < actualArgs.length; i++) {\nif (!invocationMatcher.getMatchers().get(i).matches(actualArgs[i])) {\nreturn false;\n}\n}\nreturn true;\n}",
            "method_id": 72
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:isSerializable()Z",
            "method_body": "public boolean isSerializable() {\nreturn serializable;\n}",
            "method_id": 73
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:resetInvocationForPotentialStubbing(Lorg/mockito/internal/invocation/InvocationMatcher;)V",
            "method_body": "public void resetInvocationForPotentialStubbing(InvocationMatcher invocationMatcher) {\nthis.invocationForStubbing = invocationMatcher;\n}",
            "method_id": 74
        },
        {
            "method_signature": "org.mockito.internal.matchers.LocalizedMatcher:matches(Ljava/lang/Object;)Z",
            "method_body": "public boolean matches(Object item) {\nreturn actualMatcher.matches(item);\n}",
            "method_id": 75
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMethod:getJavaMethod()Ljava/lang/reflect/Method;",
            "method_body": "public Method getJavaMethod() {\nreturn method;\n}",
            "method_id": 76
        },
        {
            "method_signature": "org.mockito.internal.verification.VerificationDataImpl:getWanted()Lorg/mockito/internal/invocation/InvocationMatcher;",
            "method_body": "public InvocationMatcher getWanted() {\nreturn wanted;\n}",
            "method_id": 77
        },
        {
            "method_signature": "org.mockito.internal.debugging.Localized:<init>(Ljava/lang/Object;)V",
            "method_body": "public Localized(T object) {\nthis.object = object;\nlocation = new Location();\n}",
            "method_id": 78
        },
        {
            "method_signature": "org.mockito.internal.invocation.InvocationMatcher:hasSameMethod(Lorg/mockito/internal/invocation/Invocation;)Z",
            "method_body": "public boolean hasSameMethod(Invocation candidate) {\n//not using method.equals() for 1 good reason:\n//sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest\nMethod m1 = invocation.getMethod();\nMethod m2 = candidate.getMethod();\n\nif (m1.getName() != null && m1.getName().equals(m2.getName())) {\n/* Avoid unnecessary cloning */\nClass[] params1 = m1.getParameterTypes();\nClass[] params2 = m2.getParameterTypes();\nif (params1.length == params2.length) {\nfor (int i = 0; i < params1.length; i++) {\nif (params1[i] != params2[i])\nreturn false;\n}\nreturn true;\n}\n}\nreturn false;\n}",
            "method_id": 79
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:validateState()V",
            "method_body": "public void validateState() {\nthreadSafely().validateState();\n}",
            "method_id": 80
        },
        {
            "method_signature": "org.mockito.internal.verification.MockAwareVerificationMode:getMock()Ljava/lang/Object;",
            "method_body": "public Object getMock() {\nreturn mock;\n}",
            "method_id": 81
        },
        {
            "method_signature": "org.mockito.internal.matchers.Same:appendQuoting(Lorg/hamcrest/Description;)V",
            "method_body": "private void appendQuoting(Description description) {\nif (wanted instanceof String) {\ndescription.appendText(\"\\\"\");\n} else if (wanted instanceof Character) {\ndescription.appendText(\"'\");\n}\n}",
            "method_id": 82
        },
        {
            "method_signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingTool:toStringEquals(Lorg/hamcrest/Matcher;Ljava/lang/Object;)Z",
            "method_body": "private boolean toStringEquals(Matcher m, Object arg) {\nreturn StringDescription.toString(m).equals(arg == null? \"null\" : arg.toString());\n}",
            "method_id": 83
        },
        {
            "method_signature": "org.mockito.internal.util.ListUtil:filter(Ljava/util/Collection;Lorg/mockito/internal/util/ListUtil$Filter;)Ljava/util/LinkedList;",
            "method_body": "public static <T> LinkedList<T> filter(Collection<T> collection, Filter<T> filter) {\nLinkedList<T> filtered = new LinkedList<T>();\nfor (T t : collection) {\nif (!filter.isOut(t)) {\nfiltered.add(t);\n}\n}\nreturn filtered;\n}",
            "method_id": 84
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:canImposterise(Ljava/lang/Class;)Z",
            "method_body": "public boolean canImposterise(Class<?> type) {\nreturn !type.isPrimitive() && !Modifier.isFinal(type.getModifiers());\n}",
            "method_id": 85
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:getExtraInterfaces()[Ljava/lang/Class;",
            "method_body": "public Class<?>[] getExtraInterfaces() {\nreturn extraInterfaces;\n}",
            "method_id": 86
        },
        {
            "method_signature": "org.mockito.internal.verification.checkers.MissingInvocationChecker:check(Ljava/util/List;Lorg/mockito/internal/invocation/InvocationMatcher;)V",
            "method_body": "public void check(List<Invocation> invocations, InvocationMatcher wanted) {\nList<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n\nif (actualInvocations.isEmpty()) {\nInvocation similar = finder.findSimilarInvocation(invocations, wanted);\nif (similar != null) {\nArgumentMatchingTool argumentMatchingTool = new ArgumentMatchingTool();\nInteger[] indexesOfSuspiciousArgs = argumentMatchingTool.getSuspiciouslyNotMatchingArgsIndexes(wanted.getMatchers(), similar.getArguments());\nSmartPrinter smartPrinter = new SmartPrinter(wanted, similar, indexesOfSuspiciousArgs);\nreporter.argumentsAreDifferent(smartPrinter.getWanted(), smartPrinter.getActual(), similar.getLocation());\n} else {\nreporter.wantedButNotInvoked(wanted, invocations);\n}\n}\n}",
            "method_id": 87
        },
        {
            "method_signature": "org.mockito.internal.util.MockUtil:createMock(Ljava/lang/Class;Lorg/mockito/internal/creation/MockSettingsImpl;)Ljava/lang/Object;",
            "method_body": "public <T> T createMock(Class<T> classToMock, MockSettingsImpl settings) {\ncreationValidator.validateType(classToMock);\ncreationValidator.validateExtraInterfaces(classToMock, settings.getExtraInterfaces());\ncreationValidator.validateMockedType(classToMock, settings.getSpiedInstance());\n\nsettings.initiateMockName(classToMock);\n\nMockHandler<T> mockHandler = new MockHandler<T>(settings);\nMethodInterceptorFilter filter = new MethodInterceptorFilter(mockHandler, settings);\nClass<?>[] interfaces = settings.getExtraInterfaces();\n\nClass<?>[] ancillaryTypes;\nif (settings.isSerializable()) {\nancillaryTypes = interfaces == null ? new Class<?>[] {Serializable.class} : new ArrayUtils().concat(interfaces, Serializable.class);\n} else {\nancillaryTypes = interfaces == null ? new Class<?>[0] : interfaces;\n}\n\nObject spiedInstance = settings.getSpiedInstance();\n\nT mock = ClassImposterizer.INSTANCE.imposterise(filter, classToMock, ancillaryTypes);\n\nif (spiedInstance != null) {\nnew LenientCopyTool().copyToMock(spiedInstance, mock);\n}\n\nreturn mock;\n}",
            "method_id": 88
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:setConstructorsAccessible(Ljava/lang/Class;Z)V",
            "method_body": "private void setConstructorsAccessible(Class<?> mockedType, boolean accessible) {\nfor (Constructor<?> constructor : mockedType.getDeclaredConstructors()) {\nconstructor.setAccessible(accessible);\n}\n}",
            "method_id": 89
        },
        {
            "method_signature": "org.mockito.internal.invocation.Invocation:getArguments()[Ljava/lang/Object;",
            "method_body": "public Object[] getArguments() {\nreturn arguments;\n}",
            "method_id": 90
        },
        {
            "method_signature": "org.mockito.internal.invocation.InvocationMatcher:matches(Lorg/mockito/internal/invocation/Invocation;)Z",
            "method_body": "public boolean matches(Invocation actual) {\nreturn invocation.getMock().equals(actual.getMock())\n&& hasSameMethod(actual)\n&& new ArgumentsComparator().argumentsMatch(this, actual);\n}",
            "method_id": 91
        },
        {
            "method_signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingTool:safelyMatches(Lorg/hamcrest/Matcher;Ljava/lang/Object;)Z",
            "method_body": "private boolean safelyMatches(Matcher m, Object arg) {\ntry {\nreturn m.matches(arg);\n} catch (Throwable t) {\nreturn false;\n}\n}",
            "method_id": 92
        },
        {
            "method_signature": "org.mockito.internal.util.MockCreationValidator:validateMockedType(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "public void validateMockedType(Class classToMock, Object spiedInstance) {\nif (classToMock == null || spiedInstance == null) {\nreturn;\n}\nif (!classToMock.equals(spiedInstance.getClass())) {\nnew Reporter().mockedTypeIsInconsistentWithSpiedInstanceType(classToMock, spiedInstance);\n}\n}",
            "method_id": 93
        },
        {
            "method_signature": "org.mockito.internal.invocation.realmethod.CGLIBProxyRealMethod:<init>(Lorg/mockito/internal/creation/MockitoMethodProxy;)V",
            "method_body": "public CGLIBProxyRealMethod(MockitoMethodProxy methodProxy) {\nthis.methodProxy = methodProxy;\n}",
            "method_id": 94
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:getDefaultAnswer()Lorg/mockito/stubbing/Answer;",
            "method_body": "public Answer<Object> getDefaultAnswer() {\nreturn globalConfiguration.get().getDefaultAnswer();\n}",
            "method_id": 95
        },
        {
            "method_signature": "org.mockito.internal.creation.cglib.CGLIBHacker:setMockitoNamingPolicy(Lorg/mockito/internal/creation/MockitoMethodProxy;)V",
            "method_body": "public void setMockitoNamingPolicy(MockitoMethodProxy mockitoMethodProxy) {\ntry {\nMethodProxy methodProxy = mockitoMethodProxy.getMethodProxy();\nField createInfoField = reflectOnCreateInfo(methodProxy);\ncreateInfoField.setAccessible(true);\nObject createInfo = createInfoField.get(methodProxy);\nField namingPolicyField = createInfo.getClass().getDeclaredField(\"namingPolicy\");\nnamingPolicyField.setAccessible(true);\nif (namingPolicyField.get(createInfo) == null) {\nnamingPolicyField.set(createInfo, MockitoNamingPolicy.INSTANCE);\n}\n} catch (Exception e) {\nthrow new RuntimeException(\n\"Unable to set MockitoNamingPolicy on cglib generator which creates FastClasses\", e);\n}\n}",
            "method_id": 96
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMethod:isVarArgs()Z",
            "method_body": "public boolean isVarArgs() {\nreturn method.isVarArgs();\n}",
            "method_id": 97
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:findAnswerFor(Lorg/mockito/internal/invocation/Invocation;)Lorg/mockito/internal/stubbing/StubbedInvocationMatcher;",
            "method_body": "public StubbedInvocationMatcher findAnswerFor(Invocation invocation) {\nsynchronized (stubbed) {\nfor (StubbedInvocationMatcher s : stubbed) {\nif (s.matches(invocation)) {\ns.markStubUsed(invocation);\ninvocation.markStubbed(new StubInfo(s));\nreturn s;\n}\n}\n}\n\nreturn null;\n}",
            "method_id": 98
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.AccessibilityChanger:safelyDisableAccess(Ljava/lang/reflect/AccessibleObject;)V",
            "method_body": "public void safelyDisableAccess(AccessibleObject accessibleObject) {\nassert wasAccessible != null;\ntry {\naccessibleObject.setAccessible(wasAccessible);\n} catch (Throwable t) {\n//ignore\n}\n}",
            "method_id": 99
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:getDefaultAnswer()Lorg/mockito/stubbing/Answer;",
            "method_body": "public Answer<Object> getDefaultAnswer() {\nreturn defaultAnswer;\n}",
            "method_id": 100
        },
        {
            "method_signature": "org.mockito.internal.creation.MethodInterceptorFilter:createMockitoMethod(Ljava/lang/reflect/Method;)Lorg/mockito/internal/invocation/MockitoMethod;",
            "method_body": "public MockitoMethod createMockitoMethod(Method method) {\nif (mockSettings.isSerializable()) {\nreturn new SerializableMethod(method);\n} else {\nreturn new DelegatingMethod(method);\n}\n}",
            "method_id": 101
        },
        {
            "method_signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues:answer(Lorg/mockito/invocation/InvocationOnMock;)Ljava/lang/Object;",
            "method_body": "public Object answer(InvocationOnMock invocation) {\nif (methodsGuru.isToString(invocation.getMethod())) {\nObject mock = invocation.getMock();\nMockName name = new MockUtil().getMockName(mock);\nif (name.isSurrogate()) {\nreturn \"Mock for \" + ClassNameFinder.classNameForMock(mock) + \", hashCode: \" + mock.hashCode();\n} else {\nreturn name.toString();\n}\n} else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {\n//see issue 184.\n//mocks by default should not return 0 for compareTo because they are not the same. Hence we return 1 (anything but 0 is good).\n//Only for compareTo() method by the Comparable interface\nreturn 1;\n}\n\nClass<?> returnType = invocation.getMethod().getReturnType();\nreturn returnValueFor(returnType);\n}",
            "method_id": 102
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldSetter:<init>(Ljava/lang/Object;Ljava/lang/reflect/Field;)V",
            "method_body": "public FieldSetter(Object target, Field field) {\nthis.target = target;\nthis.field = field;\n}",
            "method_id": 103
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:<init>(Lorg/mockito/internal/progress/MockingProgress;)V",
            "method_body": "public InvocationContainerImpl(MockingProgress mockingProgress) {\nthis.mockingProgress = mockingProgress;\n}",
            "method_id": 104
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:validate()V",
            "method_body": "public static void validate() {\nnew GlobalConfiguration();\n}",
            "method_id": 105
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:getSpiedInstance()Ljava/lang/Object;",
            "method_body": "public Object getSpiedInstance() {\nreturn spiedInstance;\n}",
            "method_id": 106
        },
        {
            "method_signature": "org.mockito.internal.util.MockCreationValidator:isTypeMockable(Ljava/lang/Class;)Z",
            "method_body": "public boolean isTypeMockable(Class<?> clz) {\nreturn ClassImposterizer.INSTANCE.canImposterise(clz);\n}",
            "method_id": 107
        },
        {
            "method_signature": "org.mockito.internal.debugging.Localized:getObject()Ljava/lang/Object;",
            "method_body": "public T getObject() {\nreturn object;\n}",
            "method_id": 108
        },
        {
            "method_signature": "org.mockito.internal.verification.VerificationDataImpl:getAllInvocations()Ljava/util/List;",
            "method_body": "public List<Invocation> getAllInvocations() {\nreturn invocations.getInvocations();\n}",
            "method_id": 109
        },
        {
            "method_signature": "org.mockito.internal.verification.MockAwareVerificationMode:verify(Lorg/mockito/internal/verification/api/VerificationData;)V",
            "method_body": "public void verify(VerificationData data) {\nmode.verify(data);\n}",
            "method_id": 110
        },
        {
            "method_signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl:reportMatcher(Lorg/hamcrest/Matcher;)Lorg/mockito/internal/progress/HandyReturnValues;",
            "method_body": "public HandyReturnValues reportMatcher(Matcher matcher) {\nmatcherStack.push(new LocalizedMatcher(matcher));\nreturn new HandyReturnValues();\n}",
            "method_id": 111
        },
        {
            "method_signature": "org.mockito.internal.invocation.Invocation:isToString()Z",
            "method_body": "public boolean isToString() {\nreturn new ObjectMethodsGuru().isToString(getMethod());\n}",
            "method_id": 112
        },
        {
            "method_signature": "org.mockito.internal.verification.RegisteredInvocations:add(Lorg/mockito/internal/invocation/Invocation;)V",
            "method_body": "public void add(Invocation invocation) {\ninvocations.add(invocation);\n}",
            "method_id": 113
        },
        {
            "method_signature": "org.mockito.MockitoAnnotations:scan(Ljava/lang/Object;Ljava/lang/Class;)V",
            "method_body": "static void scan(Object testClass, Class<?> clazz) {\nAnnotationEngine annotationEngine = new GlobalConfiguration().getAnnotationEngine();\nField[] fields = clazz.getDeclaredFields();\nfor (Field field : fields) {\n//below can be removed later, when we get rid of deprecated stuff\nif (annotationEngine.getClass() != new DefaultMockitoConfiguration().getAnnotationEngine().getClass()) {\n//this means user has his own annotation engine and we have to respect that.\n//we will do annotation processing the old way so that we are backwards compatible\nprocessAnnotationDeprecatedWay(annotationEngine, testClass, field);\n}\n}\n//act 'the new' way\nannotationEngine.process(clazz, testClass);\n}",
            "method_id": 114
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:getArgumentMatcherStorage()Lorg/mockito/internal/progress/ArgumentMatcherStorage;",
            "method_body": "public ArgumentMatcherStorage getArgumentMatcherStorage() {\nreturn threadSafely().getArgumentMatcherStorage();\n}",
            "method_id": 115
        },
        {
            "method_signature": "org.mockito.internal.util.ObjectMethodsGuru:isHashCodeMethod(Ljava/lang/reflect/Method;)Z",
            "method_body": "public boolean isHashCodeMethod(Method method) {\nreturn method.getName().equals(\"hashCode\") && method.getParameterTypes().length == 0;\n}",
            "method_id": 116
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:resetOngoingStubbing()V",
            "method_body": "public void resetOngoingStubbing() {\niOngoingStubbing = null;\n}",
            "method_id": 117
        },
        {
            "method_signature": "org.mockito.internal.invocation.InvocationMatcher:getMethod()Ljava/lang/reflect/Method;",
            "method_body": "public Method getMethod() {\nreturn invocation.getMethod();\n}",
            "method_id": 118
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:reset()V",
            "method_body": "public void reset() {\nstubbingInProgress = null;\nverificationMode = null;\ngetArgumentMatcherStorage().reset();\n}",
            "method_id": 119
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMethod:getReturnType()Ljava/lang/Class;",
            "method_body": "public Class<?> getReturnType() {\nreturn method.getReturnType();\n}",
            "method_id": 120
        },
        {
            "method_signature": "org.mockito.internal.verification.Times:verify(Lorg/mockito/internal/verification/api/VerificationData;)V",
            "method_body": "public void verify(VerificationData data) {\nif (wantedCount > 0) {\nMissingInvocationChecker missingInvocation = new MissingInvocationChecker();\nmissingInvocation.check(data.getAllInvocations(), data.getWanted());\n}\nNumberOfInvocationsChecker numberOfInvocations = new NumberOfInvocationsChecker();\nnumberOfInvocations.check(data.getAllInvocations(), data.getWanted(), wantedCount);\n}",
            "method_id": 121
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:pullVerificationMode()Lorg/mockito/verification/VerificationMode;",
            "method_body": "public VerificationMode pullVerificationMode() {\nreturn threadSafely().pullVerificationMode();\n}",
            "method_id": 122
        },
        {
            "method_signature": "org.mockito.internal.configuration.InjectingAnnotationEngine:createMockFor(Ljava/lang/annotation/Annotation;Ljava/lang/reflect/Field;)Ljava/lang/Object;",
            "method_body": "public Object createMockFor(Annotation annotation, Field field) {\nreturn delegate.createMockFor(annotation, field);\n}",
            "method_id": 123
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer$3:<init>(Lorg/mockito/internal/creation/jmock/ClassImposterizer;)V",
            "method_body": "private Class<?> createProxyClass(Class<?> mockedType, Class<?>...interfaces) {\nif (mockedType == Object.class) {\nEnhancer enhancer = new Enhancer() {\nenhancer.setClassLoader(SearchingClassLoader.combineLoadersOf(mockedType));\nenhancer.setUseFactory(true);\nif (mockedType.isInterface()) {\nenhancer.setSuperclass(Object.class);\nenhancer.setInterfaces(prepend(mockedType, interfaces));\nenhancer.setCallbackTypes(new Class[]{MethodInterceptor.class, NoOp.class});\nenhancer.setCallbackFilter(IGNORE_BRIDGE_METHODS);\nif (mockedType.getSigners() != null) {\nenhancer.setNamingPolicy(MockitoNamingPolicy.INSTANCE);\nreturn enhancer.createClass();\n}",
            "method_id": 124
        },
        {
            "method_signature": "org.mockito.internal.configuration.DefaultAnnotationEngine:processAnnotationOn(Lorg/mockito/Mock;Ljava/lang/reflect/Field;)Ljava/lang/Object;",
            "method_body": "private Object processAnnotationOn(Mock annotation, Field field) {\nMockSettings mockSettings = Mockito.withSettings();\nif (annotation.extraInterfaces().length > 0) { // never null\nmockSettings.extraInterfaces(annotation.extraInterfaces());\n}\nif (\"\".equals(annotation.name())) {\nmockSettings.name(field.getName());\n} else {\nmockSettings.name(annotation.name());\n}\n\n// see @Mock answer default value\nmockSettings.defaultAnswer(annotation.answer().get());\nreturn Mockito.mock(field.getType(), mockSettings);\n}",
            "method_id": 125
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMockitoMethodProxy:<init>(Lorg/mockito/cglib/proxy/MethodProxy;)V",
            "method_body": "public DelegatingMockitoMethodProxy(MethodProxy methodProxy) {\nthis.methodProxy = methodProxy;\n}",
            "method_id": 126
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:reportOngoingStubbing(Lorg/mockito/internal/progress/IOngoingStubbing;)V",
            "method_body": "public void reportOngoingStubbing(IOngoingStubbing iOngoingStubbing) {\nthreadSafely().reportOngoingStubbing(iOngoingStubbing);\n}",
            "method_id": 127
        },
        {
            "method_signature": "org.mockito.internal.util.ObjectMethodsGuru:isToString(Ljava/lang/reflect/Method;)Z",
            "method_body": "public boolean isToString(Method method) {\nreturn isToString(new DelegatingMethod(method));\n}",
            "method_id": 128
        },
        {
            "method_signature": "org.mockito.internal.configuration.SpyAnnotationEngine:process(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "public void process(Class<?> context, Object testClass) {\nField[] fields = context.getDeclaredFields();\nfor (Field field : fields) {\nif (field.isAnnotationPresent(Spy.class)) {\nassertNoAnnotations(Spy.class, field, Mock.class, org.mockito.MockitoAnnotations.Mock.class, Captor.class);\nObject instance = null;\ntry {\ninstance = new FieldInitializer(testClass, field).initialize();\n} catch (MockitoException e) {\nnew Reporter().cannotInitializeForSpyAnnotation(field.getName(), e);\n}\ntry {\nif (new MockUtil().isMock(instance)) {\n// instance has been spied earlier\nMockito.reset(instance);\n} else {\nfield.setAccessible(true);\nfield.set(testClass, Mockito.mock(instance.getClass(), withSettings()\n.spiedInstance(instance)\n.defaultAnswer(Mockito.CALLS_REAL_METHODS)\n.name(field.getName())));\n}\n} catch (IllegalAccessException e) {\nthrow new MockitoException(\"Problems initiating spied field \" + field.getName(), e);\n}\n}\n}\n}",
            "method_id": 129
        },
        {
            "method_signature": "org.mockito.internal.invocation.InvocationsFinder:findInvocations(Ljava/util/List;Lorg/mockito/internal/invocation/InvocationMatcher;)Ljava/util/List;",
            "method_body": "public List<Invocation> findInvocations(List<Invocation> invocations, InvocationMatcher wanted) {\nreturn ListUtil.filter(invocations, new RemoveNotMatching(wanted));\n}",
            "method_id": 130
        },
        {
            "method_signature": "org.mockito.internal.util.ObjectMethodsGuru:isCompareToMethod(Ljava/lang/reflect/Method;)Z",
            "method_body": "public boolean isCompareToMethod(Method method) {\nreturn Comparable.class.isAssignableFrom(method.getDeclaringClass()) && method.getName().equals(\"compareTo\")\n&& method.getParameterTypes().length == 1 && method.getParameterTypes()[0] == method.getDeclaringClass();\n}",
            "method_id": 131
        },
        {
            "method_signature": "org.mockito.internal.util.MockCreationValidator:validateType(Ljava/lang/Class;)V",
            "method_body": "public void validateType(Class classToMock) {\nif (!isTypeMockable(classToMock)) {\nnew Reporter().cannotMockFinalClass(classToMock);\n}\n}",
            "method_id": 132
        },
        {
            "method_signature": "org.mockito.internal.invocation.InvocationsFinder$RemoveNotMatching:<init>(Lorg/mockito/internal/invocation/InvocationsFinder;Lorg/mockito/internal/invocation/InvocationMatcher;)V",
            "method_body": "private RemoveNotMatching(InvocationMatcher wanted) {\nthis.wanted = wanted;\n}",
            "method_id": 133
        },
        {
            "method_signature": "org.mockito.internal.util.Primitives:isPrimitiveWrapper(Ljava/lang/Class;)Z",
            "method_body": "public static boolean isPrimitiveWrapper(Class<?> type) {\nreturn wrapperReturnValues.containsKey(type);\n}",
            "method_id": 134
        },
        {
            "method_signature": "org.mockito.internal.invocation.Invocation:getMock()Ljava/lang/Object;",
            "method_body": "public Object getMock() {\nreturn mock;\n}",
            "method_id": 135
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:pullVerificationMode()Lorg/mockito/verification/VerificationMode;",
            "method_body": "public VerificationMode pullVerificationMode() {\nif (verificationMode == null) {\nreturn null;\n}\n\nVerificationMode temp = verificationMode.getObject();\nverificationMode = null;\nreturn temp;\n}",
            "method_id": 136
        },
        {
            "method_signature": "org.mockito.internal.verification.RegisteredInvocations$RemoveToString:isOut(Lorg/mockito/internal/invocation/Invocation;)Z",
            "method_body": "public boolean isOut(Invocation invocation) {\nreturn invocation.isToString();\n}",
            "method_id": 137
        },
        {
            "method_signature": "org.mockito.internal.stubbing.OngoingStubbingImpl:<init>(Lorg/mockito/internal/stubbing/InvocationContainerImpl;)V",
            "method_body": "public OngoingStubbingImpl(InvocationContainerImpl invocationContainerImpl) {\nthis.invocationContainerImpl = invocationContainerImpl;\n}",
            "method_id": 138
        },
        {
            "method_signature": "org.mockito.internal.invocation.InvocationMatcher:getMatchers()Ljava/util/List;",
            "method_body": "public List<Matcher> getMatchers() {\nreturn this.matchers;\n}",
            "method_id": 139
        },
        {
            "method_signature": "org.mockito.internal.util.ObjectMethodsGuru:isEqualsMethod(Ljava/lang/reflect/Method;)Z",
            "method_body": "public boolean isEqualsMethod(Method method) {\nreturn method.getName().equals(\"equals\") && method.getParameterTypes().length == 1 && method.getParameterTypes()[0] == Object.class;\n}",
            "method_id": 140
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:initiateMockName(Ljava/lang/Class;)V",
            "method_body": "public void initiateMockName(Class classToMock) {\nmockName = new MockName(name, classToMock);\n}",
            "method_id": 141
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.SearchingClassLoader:combineLoadersOf([Ljava/lang/Class;)Ljava/lang/ClassLoader;",
            "method_body": "public static ClassLoader combineLoadersOf(Class<?>... classes) {\nreturn combineLoadersOf(classes[0], classes);\n}",
            "method_id": 142
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMockitoMethodProxy:getMethodProxy()Lorg/mockito/cglib/proxy/MethodProxy;",
            "method_body": "public MethodProxy getMethodProxy() {\nreturn methodProxy;\n}",
            "method_id": 143
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:setInvocationForPotentialStubbing(Lorg/mockito/internal/invocation/InvocationMatcher;)V",
            "method_body": "public void setInvocationForPotentialStubbing(InvocationMatcher invocation) {\nregisteredInvocations.add(invocation.getInvocation());\nthis.invocationForStubbing = invocation;\n}",
            "method_id": 144
        },
        {
            "method_signature": "org.mockito.internal.MockitoCore:verify(Ljava/lang/Object;Lorg/mockito/verification/VerificationMode;)Ljava/lang/Object;",
            "method_body": "public <T> T verify(T mock, VerificationMode mode) {\nif (mock == null) {\nreporter.nullPassedToVerify();\n} else if (!mockUtil.isMock(mock)) {\nreporter.notAMockPassedToVerify(mock.getClass());\n}\nmockingProgress.verificationStarted(new MockAwareVerificationMode(mock, mode));\nreturn mock;\n}",
            "method_id": 145
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:createProxy(Ljava/lang/Class;Lorg/mockito/cglib/proxy/MethodInterceptor;)Ljava/lang/Object;",
            "method_body": "private Object createProxy(Class<?> proxyClass, final MethodInterceptor interceptor) {\nFactory proxy = (Factory) objenesis.newInstance(proxyClass);\nproxy.setCallbacks(new Callback[] {interceptor, SerializableNoOp.SERIALIZABLE_INSTANCE });\nreturn proxy;\n}",
            "method_id": 146
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:imposterise(Lorg/mockito/cglib/proxy/MethodInterceptor;Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "public <T> T imposterise(final MethodInterceptor interceptor, Class<T> mockedType, Class<?>... ancillaryTypes) {\ntry {\nsetConstructorsAccessible(mockedType, true);\nClass<?> proxyClass = createProxyClass(mockedType, ancillaryTypes);\nreturn mockedType.cast(createProxy(proxyClass, interceptor));\n} finally {\nsetConstructorsAccessible(mockedType, false);\n}\n}",
            "method_id": 147
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldSetter:set(Ljava/lang/Object;)V",
            "method_body": "public void set(Object value) {\nAccessibilityChanger changer = new AccessibilityChanger();\nchanger.enableAccess(field);\ntry {\nfield.set(target, value);\n} catch (Exception e) {\nthrow new RuntimeException(\"Problems setting value: [\" + value + \"] on object: [\" + target + \"] at field: [\" + field + \"]\");\n}\nchanger.safelyDisableAccess(field);\n}",
            "method_id": 148
        },
        {
            "method_signature": "org.mockito.internal.configuration.InjectingAnnotationEngine:process(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "public void process(Class<?> context, Object testClass) {\n//this will create @Mocks, @Captors, etc:\ndelegate.process(context, testClass);\n//this will create @Spies:\nspyAnnotationEngine.process(context, testClass);\n\n//this injects mocks\nField[] fields = context.getDeclaredFields();\nfor (Field field : fields) {\nif (field.isAnnotationPresent(InjectMocks.class)) {\nassertNoAnnotations(field, Mock.class, org.mockito.MockitoAnnotations.Mock.class, Captor.class);\ninjectMocks(testClass);\n}\n}\n}",
            "method_id": 149
        },
        {
            "method_signature": "org.mockito.internal.configuration.DefaultAnnotationEngine:throwIfAlreadyAssigned(Ljava/lang/reflect/Field;Z)V",
            "method_body": "void throwIfAlreadyAssigned(Field field, boolean alreadyAssigned) {\nif (alreadyAssigned) {\nnew Reporter().moreThanOneAnnotationNotAllowed(field.getName());\n}\n}",
            "method_id": 150
        },
        {
            "method_signature": "org.mockito.internal.invocation.InvocationMatcher:getInvocation()Lorg/mockito/internal/invocation/Invocation;",
            "method_body": "public Invocation getInvocation() {\nreturn this.invocation;\n}",
            "method_id": 151
        },
        {
            "method_signature": "org.mockito.internal.invocation.MatchersBinder:validateMatchers(Lorg/mockito/internal/invocation/Invocation;Ljava/util/List;)V",
            "method_body": "private void validateMatchers(Invocation invocation, List<Matcher> matchers) {\nif (!matchers.isEmpty()) {\nint recordedMatchersSize = matchers.size();\nint expectedMatchersSize = invocation.getArgumentsCount();\nif (expectedMatchersSize != recordedMatchersSize) {\nnew Reporter().invalidUseOfMatchers(expectedMatchersSize, recordedMatchersSize);\n}\n}\n}",
            "method_id": 152
        },
        {
            "method_signature": "org.mockito.internal.util.MockCreationValidator:validateExtraInterfaces(Ljava/lang/Class;[Ljava/lang/Class;)V",
            "method_body": "public void validateExtraInterfaces(Class classToMock, Class ... extraInterfaces) {\nif (extraInterfaces == null) {\nreturn;\n}\n\nfor (Class i : extraInterfaces) {\nif (classToMock == i) {\nnew Reporter().extraInterfacesCannotContainMockedType(classToMock);\n}\n}\n}",
            "method_id": 153
        },
        {
            "method_signature": "org.mockito.configuration.DefaultMockitoConfiguration:getAnnotationEngine()Lorg/mockito/configuration/AnnotationEngine;",
            "method_body": "public AnnotationEngine getAnnotationEngine() {\nreturn new InjectingAnnotationEngine();\n}",
            "method_id": 154
        },
        {
            "method_signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl:pullMatchers()Ljava/util/List;",
            "method_body": "public List<Matcher> pullMatchers() {\nif (matcherStack.isEmpty()) {\nreturn Collections.emptyList();\n}\n\nList<LocalizedMatcher> matchers = new ArrayList<LocalizedMatcher>(matcherStack);\nmatcherStack.clear();\nreturn (List) matchers;\n}",
            "method_id": 155
        },
        {
            "method_signature": "org.mockito.internal.MockHandler:<init>(Lorg/mockito/internal/creation/MockSettingsImpl;)V",
            "method_body": "public MockHandler(MockSettingsImpl mockSettings) {\nthis.mockSettings = mockSettings;\nthis.mockingProgress = new ThreadSafeMockingProgress();\nthis.matchersBinder = new MatchersBinder();\nthis.invocationContainerImpl = new InvocationContainerImpl(mockingProgress);\n}",
            "method_id": 156
        },
        {
            "method_signature": "org.mockito.internal.configuration.DefaultAnnotationEngine:process(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "public void process(Class<?> clazz, Object testClass) {\nField[] fields = clazz.getDeclaredFields();\nfor (Field field : fields) {\nboolean alreadyAssigned = false;\nfor(Annotation annotation : field.getAnnotations()) {\nObject mock = createMockFor(annotation, field);\nif (mock != null) {\nthrowIfAlreadyAssigned(field, alreadyAssigned);\nalreadyAssigned = true;\ntry {\nnew FieldSetter(testClass, field).set(mock);\n} catch (Exception e) {\nthrow new MockitoException(\"Problems setting field \" + field.getName() + \" annotated with \"\n+ annotation, e);\n}\n}\n}\n}\n}",
            "method_id": 157
        },
        {
            "method_signature": "org.mockito.internal.MockitoCore:mock(Ljava/lang/Class;Lorg/mockito/MockSettings;)Ljava/lang/Object;",
            "method_body": "public <T> T mock(Class<T> classToMock, MockSettings mockSettings) {\nT mock = mockUtil.createMock(classToMock, (MockSettingsImpl) mockSettings);\nmockingProgress.mockingStarted(mock, classToMock, mockSettings);\nreturn mock;\n}",
            "method_id": 158
        },
        {
            "method_signature": "org.mockito.internal.invocation.Invocation:getMethod()Ljava/lang/reflect/Method;",
            "method_body": "public Method getMethod() {\nreturn method.getJavaMethod();\n}",
            "method_id": 159
        },
        {
            "method_signature": "org.mockito.internal.progress.HandyReturnValues:returnFor(Ljava/lang/Object;)Ljava/lang/Object;",
            "method_body": "public <T> T returnFor(T instance) {\nreturn instance == null ? null : (T) returnFor(instance.getClass());\n}",
            "method_id": 160
        },
        {
            "method_signature": "org.mockito.internal.matchers.Same:<init>(Ljava/lang/Object;)V",
            "method_body": "public Same(Object wanted) {\nthis.wanted = wanted;\n}",
            "method_id": 161
        },
        {
            "method_signature": "org.mockito.Matchers:same(Ljava/lang/Object;)Ljava/lang/Object;",
            "method_body": "public static <T> T same(T value) {\nreturn (T) reportMatcher(new Same(value)).<T>returnFor(value);\n}",
            "method_id": 162
        },
        {
            "method_signature": "org.mockito.internal.util.MockUtil:getInterceptor(Ljava/lang/Object;)Lorg/mockito/internal/creation/MethodInterceptorFilter;",
            "method_body": "private <T> MethodInterceptorFilter getInterceptor(T mock) {\nif (!(mock instanceof Factory)) {\nreturn null;\n}\nFactory factory = (Factory) mock;\nCallback callback = factory.getCallback(0);\nif (callback instanceof MethodInterceptorFilter) {\nreturn (MethodInterceptorFilter) callback;\n}\nreturn null;\n}",
            "method_id": 163
        },
        {
            "method_signature": "org.mockito.internal.util.MockUtil:isMockitoMock(Ljava/lang/Object;)Z",
            "method_body": "private <T> boolean isMockitoMock(T mock) {\nreturn getInterceptor(mock) != null;\n}",
            "method_id": 164
        },
        {
            "method_signature": "org.mockito.internal.util.MockUtil:isMock(Ljava/lang/Object;)Z",
            "method_body": "public boolean isMock(Object mock) {\nreturn mock != null && isMockitoMock(mock);\n}",
            "method_id": 165
        },
        {
            "method_signature": "org.mockito.internal.verification.Times:<init>(I)V",
            "method_body": "public Times(int wantedNumberOfInvocations) {\nif (wantedNumberOfInvocations < 0) {\nthrow new MockitoException(\"Negative value is not allowed here\");\n}\nthis.wantedCount = wantedNumberOfInvocations;\n}",
            "method_id": 166
        },
        {
            "method_signature": "org.mockito.internal.verification.VerificationModeFactory:times(I)Lorg/mockito/internal/verification/Times;",
            "method_body": "public static Times times(int wantedNumberOfInvocations) {\nreturn new Times(wantedNumberOfInvocations);\n}",
            "method_id": 167
        },
        {
            "method_signature": "org.mockito.Mockito:times(I)Lorg/mockito/verification/VerificationMode;",
            "method_body": "public static VerificationMode times(int wantedNumberOfInvocations) {\nreturn VerificationModeFactory.times(wantedNumberOfInvocations);\n}",
            "method_id": 168
        },
        {
            "method_signature": "org.mockito.Mockito:verify(Ljava/lang/Object;)Ljava/lang/Object;",
            "method_body": "public static <T> T verify(T mock) {\nreturn MOCKITO_CORE.verify(mock, times(1));\n}",
            "method_id": 169
        },
        {
            "method_signature": "org.mockito.internal.matchers.Same:describeTo(Lorg/hamcrest/Description;)V",
            "method_body": "public void describeTo(Description description) {\ndescription.appendText(\"same(\");\nappendQuoting(description);\ndescription.appendText(wanted.toString());\nappendQuoting(description);\ndescription.appendText(\")\");\n}",
            "method_id": 170
        }
    ]
}
{
    "bug_id": 30,
    "test_id": 0,
    "test_name": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest.shouldPrintTheParametersOnSmartNullPointerExceptionMessage",
    "test_body": "public void shouldPrintTheParametersOnSmartNullPointerExceptionMessage() throws Throwable {\nAnswer<Object> answer = new ReturnsSmartNulls();\nFoo smartNull = (Foo) answer.answer(invocationOf(Foo.class, \"withArgs\", \"oompa\", \"lumpa\"));\ntry {\nsmartNull.get();\nfail();\n} catch (SmartNullPointerException ex) {\nString message = ex.getMessage();\nassertTrue(\"Exception message should include oompa and lumpa, but was: \" + message,\nmessage.contains(\"oompa, lumpa\"));\n}\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: Exception message should include oompa and lumpa, but was:\nYou have a NullPointerException here:\n-> at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nBecause this method was *not* stubbed correctly:\n-> at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.assertTrue(Assert.java:22)\nat org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest.shouldPrintTheParametersOnSmartNullPointerExceptionMessage(ReturnsSmartNullsTest.java:71)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:prepend(Ljava/lang/Class;[Ljava/lang/Class;)[Ljava/lang/Class;",
            "method_body": "private Class<?>[] prepend(Class<?> first, Class<?>... rest) {\nClass<?>[] all = new Class<?>[rest.length+1];\nall[0] = first;\nSystem.arraycopy(rest, 0, all, 1, rest.length);\nreturn all;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:<init>()V",
            "method_body": "public GlobalConfiguration() {\n//Configuration should be loaded only once but I cannot really test it\nif (globalConfiguration.get() == null) {\nglobalConfiguration.set(createConfig());\n}\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues:answer(Lorg/mockito/invocation/InvocationOnMock;)Ljava/lang/Object;",
            "method_body": "public Object answer(InvocationOnMock invocation) {\nif (methodsGuru.isToString(invocation.getMethod())) {\nObject mock = invocation.getMock();\nMockName name = new MockUtil().getMockName(mock);\nif (name.isSurrogate()) {\nreturn \"Mock for \" + ClassNameFinder.classNameForMock(mock) + \", hashCode: \" + mock.hashCode();\n} else {\nreturn name.toString();\n}\n} else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {\n//see issue 184.\n//mocks by default should not return 0 for compareTo because they are not the same. Hence we return 1 (anything but 0 is good).\n//Only for compareTo() method by the Comparable interface\nreturn 1;\n}\n\nClass<?> returnType = invocation.getMethod().getReturnType();\nreturn returnValueFor(returnType);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.SearchingClassLoader:addIfNewElement(Ljava/util/List;Ljava/lang/ClassLoader;)V",
            "method_body": "private static void addIfNewElement(List<ClassLoader> loaders, ClassLoader c) {\nif (c != null && !loaders.contains(c)) {\nloaders.add(c);\n}\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.mockito.internal.invocation.Invocation:<init>(Ljava/lang/Object;Lorg/mockito/internal/invocation/MockitoMethod;[Ljava/lang/Object;ILorg/mockito/internal/invocation/realmethod/RealMethod;)V",
            "method_body": "public Invocation(Object mock, MockitoMethod mockitoMethod, Object[] args, int sequenceNumber, RealMethod realMethod) {\nthis.method = mockitoMethod;\nthis.mock = mock;\nthis.realMethod = realMethod;\nthis.arguments = expandVarArgs(mockitoMethod.isVarArgs(), args);\nthis.rawArguments = args;\nthis.sequenceNumber = sequenceNumber;\nthis.location = new Location();\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.mockito.internal.util.StringJoiner:join([Ljava/lang/Object;)Ljava/lang/String;",
            "method_body": "public static String join(Object ... linesToBreak) {\nStringBuilder out = new StringBuilder(\"\\n\");\nfor (Object line : linesToBreak) {\nout.append(line.toString()).append(\"\\n\");\n}\nint lastBreak = out.lastIndexOf(\"\\n\");\nreturn out.replace(lastBreak, lastBreak+1, \"\").toString();\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.mockito.internal.invocation.Invocation:expandVarArgs(Z[Ljava/lang/Object;)[Ljava/lang/Object;",
            "method_body": "private static Object[] expandVarArgs(final boolean isVarArgs, final Object[] args) {\nif (!isVarArgs || args[args.length - 1] != null && !args[args.length - 1].getClass().isArray()) {\nreturn args == null ? new Object[0] : args;\n}\n\nfinal int nonVarArgsCount = args.length - 1;\nObject[] varArgs;\nif (args[nonVarArgsCount] == null) {\n// in case someone deliberately passed null varArg array\nvarArgs = new Object[] { null };\n} else {\nvarArgs = ArrayEquals.createObjectArray(args[nonVarArgsCount]);\n}\nfinal int varArgsCount = varArgs.length;\nObject[] newArgs = new Object[nonVarArgsCount + varArgsCount];\nSystem.arraycopy(args, 0, newArgs, 0, nonVarArgsCount);\nSystem.arraycopy(varArgs, 0, newArgs, nonVarArgsCount, varArgsCount);\nreturn newArgs;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.mockito.internal.util.ObjectMethodsGuru:isToString(Ljava/lang/reflect/Method;)Z",
            "method_body": "public boolean isToString(Method method) {\nreturn isToString(new DelegatingMethod(method));\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.mockito.MockitoAnnotations:scan(Ljava/lang/Object;Ljava/lang/Class;)V",
            "method_body": "static void scan(Object testClass, Class<?> clazz) {\nAnnotationEngine annotationEngine = new GlobalConfiguration().getAnnotationEngine();\nField[] fields = clazz.getDeclaredFields();\nfor (Field field : fields) {\n//below can be removed later, when we get rid of deprecated stuff\nif (annotationEngine.getClass() != new DefaultMockitoConfiguration().getAnnotationEngine().getClass()) {\n//this means user has his own annotation engine and we have to respect that.\n//we will do annotation processing the old way so that we are backwards compatible\nprocessAnnotationDeprecatedWay(annotationEngine, testClass, field);\n}\n}\n//act 'the new' way\nannotationEngine.process(clazz, testClass);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.mockito.internal.configuration.InjectingAnnotationEngine:process(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "public void process(Class<?> context, Object testClass) {\n//this will create @Mocks, @Captors, etc:\ndelegate.process(context, testClass);\n//this will create @Spies:\nspyAnnotationEngine.process(context, testClass);\n\n//this injects mocks\nField[] fields = context.getDeclaredFields();\nfor (Field field : fields) {\nif (field.isAnnotationPresent(InjectMocks.class)) {\nassertNoAnnotations(field, Mock.class, org.mockito.MockitoAnnotations.Mock.class, Captor.class);\ninjectMocks(testClass);\n}\n}\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.SearchingClassLoader:combine(Ljava/util/List;)Ljava/lang/ClassLoader;",
            "method_body": "private static ClassLoader combine(List<ClassLoader> parentLoaders) {\nClassLoader loader = parentLoaders.get(parentLoaders.size()-1);\n\nfor (int i = parentLoaders.size()-2; i >= 0; i--) {\nloader = new SearchingClassLoader(parentLoaders.get(i), loader);\n}\n\nreturn loader;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMethod:getReturnType()Ljava/lang/Class;",
            "method_body": "public Class<?> getReturnType() {\nreturn method.getReturnType();\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.mockito.internal.creation.cglib.MockitoNamingPolicy:getTag()Ljava/lang/String;",
            "method_body": "protected String getTag() {\nreturn \"ByMockitoWithCGLIB\";\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:canImposterise(Ljava/lang/Class;)Z",
            "method_body": "public boolean canImposterise(Class<?> type) {\nreturn !type.isPrimitive() && !Modifier.isFinal(type.getModifiers());\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.mockito.internal.configuration.SpyAnnotationEngine:process(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "public void process(Class<?> context, Object testClass) {\nField[] fields = context.getDeclaredFields();\nfor (Field field : fields) {\nif (field.isAnnotationPresent(Spy.class)) {\nassertNoAnnotations(Spy.class, field, Mock.class, org.mockito.MockitoAnnotations.Mock.class, Captor.class);\nObject instance = null;\ntry {\ninstance = new FieldInitializer(testClass, field).initialize();\n} catch (MockitoException e) {\nnew Reporter().cannotInitializeForSpyAnnotation(field.getName(), e);\n}\ntry {\nif (new MockUtil().isMock(instance)) {\n// instance has been spied earlier\nMockito.reset(instance);\n} else {\nfield.setAccessible(true);\nfield.set(testClass, Mockito.mock(instance.getClass(), withSettings()\n.spiedInstance(instance)\n.defaultAnswer(Mockito.CALLS_REAL_METHODS)\n.name(field.getName())));\n}\n} catch (IllegalAccessException e) {\nthrow new MockitoException(\"Problems initiating spied field \" + field.getName(), e);\n}\n}\n}\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues:returnValueFor(Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "Object returnValueFor(Class<?> type) {\nif (type.isPrimitive()) {\nreturn primitiveOf(type);\n} else if (Primitives.isPrimitiveWrapper(type)) {\nreturn Primitives.primitiveWrapperOf(type);\n//new instances are used instead of Collections.emptyList(), etc.\n//to avoid UnsupportedOperationException if code under test modifies returned collection\n} else if (type == Collection.class) {\nreturn new LinkedList<Object>();\n} else if (type == Set.class) {\nreturn new HashSet<Object>();\n} else if (type == HashSet.class) {\nreturn new HashSet<Object>();\n} else if (type == SortedSet.class) {\nreturn new TreeSet<Object>();\n} else if (type == TreeSet.class) {\nreturn new TreeSet<Object>();\n} else if (type == LinkedHashSet.class) {\nreturn new LinkedHashSet<Object>();\n} else if (type == List.class) {\nreturn new LinkedList<Object>();\n} else if (type == LinkedList.class) {\nreturn new LinkedList<Object>();\n} else if (type == ArrayList.class) {\nreturn new ArrayList<Object>();\n} else if (type == Map.class) {\nreturn new HashMap<Object, Object>();\n} else if (type == HashMap.class) {\nreturn new HashMap<Object, Object>();\n} else if (type == SortedMap.class) {\nreturn new TreeMap<Object, Object>();\n} else if (type == TreeMap.class) {\nreturn new TreeMap<Object, Object>();\n} else if (type == LinkedHashMap.class) {\nreturn new LinkedHashMap<Object, Object>();\n}\n//Let's not care about the rest of collections.\nreturn null;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNulls$ThrowingInterceptor:<init>(Lorg/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls;Lorg/mockito/invocation/InvocationOnMock;)V",
            "method_body": "private ThrowingInterceptor(InvocationOnMock invocation) {\nthis.invocation = invocation;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer$2:accept(Ljava/lang/reflect/Method;)I",
            "method_body": "public int accept(Method method) {\nreturn method.isBridge() ? 1 : 0;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValues:answer(Lorg/mockito/invocation/InvocationOnMock;)Ljava/lang/Object;",
            "method_body": "public Object answer(InvocationOnMock invocation) throws Throwable {\nObject ret = delegate.answer(invocation);\nif (ret != null) {\nreturn ret;\n}\n\nClass<?> returnType = invocation.getMethod().getReturnType();\nreturn returnValueFor(returnType);\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.mockito.internal.configuration.DefaultAnnotationEngine:process(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "public void process(Class<?> clazz, Object testClass) {\nField[] fields = clazz.getDeclaredFields();\nfor (Field field : fields) {\nboolean alreadyAssigned = false;\nfor(Annotation annotation : field.getAnnotations()) {\nObject mock = createMockFor(annotation, field);\nif (mock != null) {\nthrowIfAlreadyAssigned(field, alreadyAssigned);\nalreadyAssigned = true;\ntry {\nnew FieldSetter(testClass, field).set(mock);\n} catch (Exception e) {\nthrow new MockitoException(\"Problems setting field \" + field.getName() + \" annotated with \"\n+ annotation, e);\n}\n}\n}\n}\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMethod:<init>(Ljava/lang/reflect/Method;)V",
            "method_body": "public DelegatingMethod(Method method) {\nassert method != null : \"Method cannot be null\";\nthis.method = method;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.mockito.internal.invocation.SerializableMethod:<init>(Ljava/lang/reflect/Method;)V",
            "method_body": "public SerializableMethod(Method method) {\ndeclaringClass = method.getDeclaringClass();\nmethodName = method.getName();\nparameterTypes = method.getParameterTypes();\nreturnType = method.getReturnType();\nexceptionTypes = method.getExceptionTypes();\nisVarArgs = method.isVarArgs();\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValues:returnValueFor(Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "Object returnValueFor(Class<?> type) {\nif (type == String.class) {\nreturn \"\";\n}  else if (type.isArray()) {\nClass<?> componenetType = type.getComponentType();\nreturn Array.newInstance(componenetType, 0);\n}\nreturn null;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.mockito.internal.util.ObjectMethodsGuru:isCompareToMethod(Ljava/lang/reflect/Method;)Z",
            "method_body": "public boolean isCompareToMethod(Method method) {\nreturn Comparable.class.isAssignableFrom(method.getDeclaringClass()) && method.getName().equals(\"compareTo\")\n&& method.getParameterTypes().length == 1 && method.getParameterTypes()[0] == method.getDeclaringClass();\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.mockito.internal.util.Primitives:isPrimitiveWrapper(Ljava/lang/Class;)Z",
            "method_body": "public static boolean isPrimitiveWrapper(Class<?> type) {\nreturn wrapperReturnValues.containsKey(type);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.mockito.internal.exceptions.base.ConditionalStackTraceFilter:filter(Ljava/lang/Throwable;)V",
            "method_body": "public void filter(Throwable throwable) {\nif (!config.cleansStackTrace()) {\nreturn;\n}\nStackTraceElement[] filtered = filter.filter(throwable.getStackTrace(), true);\nthrowable.setStackTrace(filtered);\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.mockito.internal.util.ObjectMethodsGuru:isToString(Lorg/mockito/internal/invocation/MockitoMethod;)Z",
            "method_body": "public boolean isToString(MockitoMethod method) {\nreturn method.getReturnType() == String.class && method.getParameterTypes().length == 0\n&& method.getName().equals(\"toString\");\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.mockito.internal.exceptions.base.StackTraceFilter:filter([Ljava/lang/StackTraceElement;Z)[Ljava/lang/StackTraceElement;",
            "method_body": "public StackTraceElement[] filter(StackTraceElement[] target, boolean keepTop) {\n//TODO: after 1.8 profile\nList<StackTraceElement> unfilteredStackTrace = Arrays.asList(target);\n\nint lastBad = -1;\nint firstBad = -1;\nfor (int i = 0; i < unfilteredStackTrace.size(); i++) {\nif (!this.isBad(unfilteredStackTrace.get(i))) {\ncontinue;\n}\nlastBad = i;\nif (firstBad == -1) {\nfirstBad = i;\n}\n}\n\nList<StackTraceElement> top;\nif (keepTop && firstBad != -1) {\ntop = unfilteredStackTrace.subList(0, firstBad);\n} else {\ntop = new LinkedList<StackTraceElement>();\n}\n\nList<StackTraceElement> bottom = unfilteredStackTrace.subList(lastBad + 1, unfilteredStackTrace.size());\nList<StackTraceElement> filtered = new ArrayList<StackTraceElement>(top);\nfiltered.addAll(bottom);\nreturn filtered.toArray(new StackTraceElement[]{});\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:createProxyClass(Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/Class;",
            "method_body": "private Class<?> createProxyClass(Class<?> mockedType, Class<?>...interfaces) {\nif (mockedType == Object.class) {\nmockedType = ClassWithSuperclassToWorkAroundCglibBug.class;\n}\n\nEnhancer enhancer = new Enhancer() {\n@Override\n@SuppressWarnings(\"unchecked\")\nprotected void filterConstructors(Class sc, List constructors) {\n// Don't filter\n}\n};\nenhancer.setClassLoader(SearchingClassLoader.combineLoadersOf(mockedType));\nenhancer.setUseFactory(true);\nif (mockedType.isInterface()) {\nenhancer.setSuperclass(Object.class);\nenhancer.setInterfaces(prepend(mockedType, interfaces));\n} else {\nenhancer.setSuperclass(mockedType);\nenhancer.setInterfaces(interfaces);\n}\nenhancer.setCallbackTypes(new Class[]{MethodInterceptor.class, NoOp.class});\nenhancer.setCallbackFilter(IGNORE_BRIDGE_METHODS);\nif (mockedType.getSigners() != null) {\nenhancer.setNamingPolicy(NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES);\n} else {\nenhancer.setNamingPolicy(MockitoNamingPolicy.INSTANCE);\n}\n\ntry {\nreturn enhancer.createClass();\n} catch (CodeGenerationException e) {\nif (Modifier.isPrivate(mockedType.getModifiers())) {\nthrow new MockitoException(\"\\n\"\n+ \"Mockito cannot mock this class: \" + mockedType\n+ \".\\n\"\n+ \"Most likely it is a private class that is not visible by Mockito\");\n}\nthrow new MockitoException(\"\\n\"\n+ \"Mockito cannot mock this class: \" + mockedType\n+ \"\\n\"\n+ \"Mockito can only mock visible & non-final classes.\"\n+ \"\\n\"\n+ \"If you're not sure why you're getting this error, please report to the mailing list.\", e);\n}\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.mockito.exceptions.base.MockitoException:filterStackTrace()V",
            "method_body": "private void filterStackTrace() {\nunfilteredStackTrace = getStackTrace();\n\nConditionalStackTraceFilter filter = new ConditionalStackTraceFilter();\nfilter.filter(this);\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.SearchingClassLoader:combineLoadersOf([Ljava/lang/Class;)Ljava/lang/ClassLoader;",
            "method_body": "public static ClassLoader combineLoadersOf(Class<?>... classes) {\nreturn combineLoadersOf(classes[0], classes);\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNulls:answer(Lorg/mockito/invocation/InvocationOnMock;)Ljava/lang/Object;",
            "method_body": "public Object answer(final InvocationOnMock invocation) throws Throwable {\nObject defaultReturnValue = delegate.answer(invocation);\nif (defaultReturnValue != null) {\nreturn defaultReturnValue;\n}\nClass<?> type = invocation.getMethod().getReturnType();\nif (ClassImposterizer.INSTANCE.canImposterise(type)) {\nreturn ClassImposterizer.INSTANCE.imposterise(new ThrowingInterceptor(invocation), type);\n}\nreturn null;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:getIt()Lorg/mockito/configuration/IMockitoConfiguration;",
            "method_body": "IMockitoConfiguration getIt() {\nreturn globalConfiguration.get();\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.mockito.internal.invocation.SerializableMethod:getJavaMethod()Ljava/lang/reflect/Method;",
            "method_body": "public Method getJavaMethod() {\ntry {\nreturn declaringClass.getDeclaredMethod(methodName, parameterTypes);\n} catch (SecurityException e) {\nString message = String.format(\n\"The method %1$s.%2$s is probably private or protected and cannot be mocked.\\n\" +\n\"Please report this as a defect with an example of how to reproduce it.\", declaringClass, methodName);\nthrow new MockitoException(message, e);\n} catch (NoSuchMethodException e) {\nString message = String.format(\n\"The method %1$s.%2$s does not exists and you should not get to this point.\\n\" +\n\"Please report this as a defect with an example of how to reproduce it.\", declaringClass, methodName);\nthrow new MockitoException(message, e);\n}\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNulls$ThrowingInterceptor:intercept(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;Lorg/mockito/cglib/proxy/MethodProxy;)Ljava/lang/Object;",
            "method_body": "public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\nif (new ObjectMethodsGuru().isToString(method)) {\nreturn \"SmartNull returned by unstubbed \" + formatMethodCall()  + \" method on mock\";\n}\n\nnew Reporter().smartNullPointerException(location);\nreturn null;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.mockito.exceptions.verification.SmartNullPointerException:<init>(Ljava/lang/String;)V",
            "method_body": "public SmartNullPointerException(String message) {\nsuper(message);\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:setConstructorsAccessible(Ljava/lang/Class;Z)V",
            "method_body": "private void setConstructorsAccessible(Class<?> mockedType, boolean accessible) {\nfor (Constructor<?> constructor : mockedType.getDeclaredConstructors()) {\nconstructor.setAccessible(accessible);\n}\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.mockito.exceptions.base.MockitoException:<init>(Ljava/lang/String;)V",
            "method_body": "public MockitoException(String message) {\nsuper(message);\nfilterStackTrace();\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.mockito.MockitoAnnotations:initMocks(Ljava/lang/Object;)V",
            "method_body": "public static void initMocks(Object testClass) {\nif (testClass == null) {\nthrow new MockitoException(\"testClass cannot be null. For info how to use @Mock annotations see examples in javadoc for MockitoAnnotations class\");\n}\n\nClass<?> clazz = testClass.getClass();\nwhile (clazz != Object.class) {\nscan(testClass, clazz);\nclazz = clazz.getSuperclass();\n}\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:getArgumentMatcherStorage()Lorg/mockito/internal/progress/ArgumentMatcherStorage;",
            "method_body": "public ArgumentMatcherStorage getArgumentMatcherStorage() {\nreturn argumentMatcherStorage;\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:validateState()V",
            "method_body": "public void validateState() {\nvalidateMostStuff();\n\n//validate stubbing:\nif (stubbingInProgress != null) {\nLocation temp = stubbingInProgress;\nstubbingInProgress = null;\nreporter.unfinishedStubbing(temp);\n}\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl:validateState()V",
            "method_body": "public void validateState() {\nif (!matcherStack.isEmpty()) {\nLocalizedMatcher lastMatcher = matcherStack.lastElement();\nmatcherStack.clear();\nnew Reporter().misplacedArgumentMatcher(lastMatcher.getLocation());\n}\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.mockito.internal.exceptions.base.StackTraceFilter:isBad(Ljava/lang/StackTraceElement;)Z",
            "method_body": "public boolean isBad(StackTraceElement e) {\nboolean fromMockObject = e.getClassName().contains(\"$$EnhancerByMockitoWithCGLIB$$\");\nboolean fromOrgMockito = e.getClassName().startsWith(\"org.mockito.\");\nboolean isRunner = e.getClassName().startsWith(\"org.mockito.runners.\");\nboolean isInternalRunner = e.getClassName().startsWith(\"org.mockito.internal.runners.\");\nreturn (fromMockObject || fromOrgMockito) && !isRunner && !isInternalRunner;\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:threadSafely()Lorg/mockito/internal/progress/MockingProgress;",
            "method_body": "static MockingProgress threadSafely() {\nif (mockingProgress.get() == null) {\nmockingProgress.set(new MockingProgressImpl());\n}\nreturn mockingProgress.get();\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:validateMostStuff()V",
            "method_body": "private void validateMostStuff() {\n//State is cool when GlobalConfiguration is already loaded\n//this cannot really be tested functionally because I cannot dynamically mess up org.mockito.configuration.MockitoConfiguration class\nGlobalConfiguration.validate();\n\nif (verificationMode != null) {\nLocation location = verificationMode.getLocation();\nverificationMode = null;\nreporter.unfinishedVerificationException(location);\n}\n\ngetArgumentMatcherStorage().validateState();\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.mockito.internal.invocation.Invocation:getMethod()Ljava/lang/reflect/Method;",
            "method_body": "public Method getMethod() {\nreturn method.getJavaMethod();\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:cleansStackTrace()Z",
            "method_body": "public boolean cleansStackTrace() {\nreturn globalConfiguration.get().cleansStackTrace();\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.mockito.internal.debugging.Location:toString()Ljava/lang/String;",
            "method_body": "public String toString() {\nStackTraceElement[] filtered = stackTraceFilter.filter(stackTraceHolder.getStackTrace(), false);\nif (filtered.length == 0) {\nreturn \"-> at <<unknown line>>\";\n}\nreturn \"-> at \" + filtered[0].toString();\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.SearchingClassLoader:combineLoadersOf(Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/ClassLoader;",
            "method_body": "private static ClassLoader combineLoadersOf(Class<?> first, Class<?>... others) {\nList<ClassLoader> loaders = new ArrayList<ClassLoader>();\n\naddIfNewElement(loaders, first.getClassLoader());\nfor (Class<?> c : others) {\naddIfNewElement(loaders, c.getClassLoader());\n}\n\n// To support Eclipse Plug-in tests.\n// In an Eclipse plug-in, jMock itself will not be on the system class loader\n// but in the class loader of the plug-in.\n//\n// Note: I've been unable to reproduce the error in jMock's test suite.\naddIfNewElement(loaders, SearchingClassLoader.class.getClassLoader());\n\n// To support the Maven Surefire plugin.\n// Note: I've been unable to reproduce the error in jMock's test suite.\naddIfNewElement(loaders, currentThread().getContextClassLoader());\n\n//Had to comment that out because it didn't work with in-container Spring tests\n//addIfNewElement(loaders, ClassLoader.getSystemClassLoader());\n\nreturn combine(loaders);\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:validateState()V",
            "method_body": "public void validateState() {\nthreadSafely().validateState();\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:getAnnotationEngine()Lorg/mockito/configuration/AnnotationEngine;",
            "method_body": "public AnnotationEngine getAnnotationEngine() {\nreturn globalConfiguration.get().getAnnotationEngine();\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.mockito.internal.debugging.Location:<init>()V",
            "method_body": "public Location() {\nthis(new StackTraceFilter());\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:createProxy(Ljava/lang/Class;Lorg/mockito/cglib/proxy/MethodInterceptor;)Ljava/lang/Object;",
            "method_body": "private Object createProxy(Class<?> proxyClass, final MethodInterceptor interceptor) {\nFactory proxy = (Factory) objenesis.newInstance(proxyClass);\nproxy.setCallbacks(new Callback[] {interceptor, SerializableNoOp.SERIALIZABLE_INSTANCE });\nreturn proxy;\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.mockito.internal.invocation.SerializableMethod:isVarArgs()Z",
            "method_body": "public boolean isVarArgs() {\nreturn isVarArgs;\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:imposterise(Lorg/mockito/cglib/proxy/MethodInterceptor;Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "public <T> T imposterise(final MethodInterceptor interceptor, Class<T> mockedType, Class<?>... ancillaryTypes) {\ntry {\nsetConstructorsAccessible(mockedType, true);\nClass<?> proxyClass = createProxyClass(mockedType, ancillaryTypes);\nreturn mockedType.cast(createProxy(proxyClass, interceptor));\n} finally {\nsetConstructorsAccessible(mockedType, false);\n}\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer$3:<init>(Lorg/mockito/internal/creation/jmock/ClassImposterizer;)V",
            "method_body": "private Class<?> createProxyClass(Class<?> mockedType, Class<?>...interfaces) {\nif (mockedType == Object.class) {\nEnhancer enhancer = new Enhancer() {\n}\nenhancer.setClassLoader(SearchingClassLoader.combineLoadersOf(mockedType));\nenhancer.setUseFactory(true);\nif (mockedType.isInterface()) {\nenhancer.setSuperclass(Object.class);\nenhancer.setInterfaces(prepend(mockedType, interfaces));\nenhancer.setCallbackTypes(new Class[]{MethodInterceptor.class, NoOp.class});\nenhancer.setCallbackFilter(IGNORE_BRIDGE_METHODS);\nif (mockedType.getSigners() != null) {\nenhancer.setNamingPolicy(MockitoNamingPolicy.INSTANCE);\nreturn enhancer.createClass();\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:validate()V",
            "method_body": "public static void validate() {\nnew GlobalConfiguration();\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.mockito.exceptions.Reporter:smartNullPointerException(Lorg/mockito/internal/debugging/Location;)V",
            "method_body": "public void smartNullPointerException(Location location) {\nthrow new SmartNullPointerException(join(\n\"You have a NullPointerException here:\",\nnew Location(),\n\"Because this method was *not* stubbed correctly:\",\nlocation,\n\"\"\n));\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.mockito.internal.debugging.Location:<init>(Lorg/mockito/internal/exceptions/base/StackTraceFilter;)V",
            "method_body": "public Location(StackTraceFilter stackTraceFilter) {\nthis.stackTraceFilter = stackTraceFilter;\nstackTraceHolder = new Throwable();\n}",
            "method_id": 58
        }
    ]
}
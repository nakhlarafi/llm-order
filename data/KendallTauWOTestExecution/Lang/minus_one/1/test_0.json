{
    "bug_id": 1,
    "test_id": 0,
    "test_name": "org.apache.commons.lang3.math.NumberUtilsTest.TestLang747",
    "test_body": "public void TestLang747() {\nassertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));\nassertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));\nassertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));\nassertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));\nassertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));\nassertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));\nassertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));\n// Leading zero tests\nassertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));\nassertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));\nassertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));\nassertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));\nassertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));\nassertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));\nassertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));\nassertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));\nassertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));\nassertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));\nassertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));\nassertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));\n// N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\nassertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));\nassertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));\n// Leading zero tests\nassertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));\nassertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));\nassertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));\n// N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\nassertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));\nassertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));\n}\n",
    "stack_trace": "java.lang.NumberFormatException: For input string: \"80000000\"\nat java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\nat java.lang.Integer.parseInt(Integer.java:583)\nat java.lang.Integer.valueOf(Integer.java:740)\nat java.lang.Integer.decode(Integer.java:1197)\nat org.apache.commons.lang3.math.NumberUtils.createInteger(NumberUtils.java:684)\nat org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:474)\nat org.apache.commons.lang3.math.NumberUtilsTest.TestLang747(NumberUtilsTest.java:256)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.lang3.StringUtils:isBlank(Ljava/lang/CharSequence;)Z",
            "method_body": "public static boolean isBlank(final CharSequence cs) {\nint strLen;\nif (cs == null || (strLen = cs.length()) == 0) {\nreturn true;\n}\nfor (int i = 0; i < strLen; i++) {\nif (Character.isWhitespace(cs.charAt(i)) == false) {\nreturn false;\n}\n}\nreturn true;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.lang3.math.NumberUtils:createInteger(Ljava/lang/String;)Ljava/lang/Integer;",
            "method_body": "public static Integer createInteger(final String str) {\nif (str == null) {\nreturn null;\n}\n// decode() handles 0xAABD and 0777 (hex and octal) as well.\nreturn Integer.decode(str);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.lang3.math.NumberUtils:createNumber(Ljava/lang/String;)Ljava/lang/Number;",
            "method_body": "public static Number createNumber(final String str) throws NumberFormatException {\nif (str == null) {\nreturn null;\n}\nif (StringUtils.isBlank(str)) {\nthrow new NumberFormatException(\"A blank string is not a valid number\");\n}\n// Need to deal with all possible hex prefixes here\nfinal String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\nint pfxLen = 0;\nfor(final String pfx : hex_prefixes) {\nif (str.startsWith(pfx)) {\npfxLen += pfx.length();\nbreak;\n}\n}\nif (pfxLen > 0) { // we have a hex number\nfinal int hexDigits = str.length() - pfxLen;\nif (hexDigits > 16) { // too many for Long\nreturn createBigInteger(str);\n}\nif (hexDigits > 8) { // too many for an int\nreturn createLong(str);\n}\nreturn createInteger(str);\n}\nfinal char lastChar = str.charAt(str.length() - 1);\nString mant;\nString dec;\nString exp;\nfinal int decPos = str.indexOf('.');\nfinal int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present\n// if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)\n// and the parsing which will detect if e or E appear in a number due to using the wrong offset\n\nint numDecimals = 0; // Check required precision (LANG-693)\nif (decPos > -1) { // there is a decimal point\n\nif (expPos > -1) { // there is an exponent\nif (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE\nthrow new NumberFormatException(str + \" is not a valid number.\");\n}\ndec = str.substring(decPos + 1, expPos);\n} else {\ndec = str.substring(decPos + 1);\n}\nmant = str.substring(0, decPos);\nnumDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.\n} else {\nif (expPos > -1) {\nif (expPos > str.length()) { // prevents double exponent causing IOOBE\nthrow new NumberFormatException(str + \" is not a valid number.\");\n}\nmant = str.substring(0, expPos);\n} else {\nmant = str;\n}\ndec = null;\n}\nif (!Character.isDigit(lastChar) && lastChar != '.') {\nif (expPos > -1 && expPos < str.length() - 1) {\nexp = str.substring(expPos + 1, str.length() - 1);\n} else {\nexp = null;\n}\n//Requesting a specific type..\nfinal String numeric = str.substring(0, str.length() - 1);\nfinal boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\nswitch (lastChar) {\ncase 'l' :\ncase 'L' :\nif (dec == null\n&& exp == null\n&& (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\ntry {\nreturn createLong(numeric);\n} catch (final NumberFormatException nfe) { // NOPMD\n// Too big for a long\n}\nreturn createBigInteger(numeric);\n\n}\nthrow new NumberFormatException(str + \" is not a valid number.\");\ncase 'f' :\ncase 'F' :\ntry {\nfinal Float f = NumberUtils.createFloat(numeric);\nif (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n//If it's too big for a float or the float value = 0 and the string\n//has non-zeros in it, then float does not have the precision we want\nreturn f;\n}\n\n} catch (final NumberFormatException nfe) { // NOPMD\n// ignore the bad number\n}\n//$FALL-THROUGH$\ncase 'd' :\ncase 'D' :\ntry {\nfinal Double d = NumberUtils.createDouble(numeric);\nif (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\nreturn d;\n}\n} catch (final NumberFormatException nfe) { // NOPMD\n// ignore the bad number\n}\ntry {\nreturn createBigDecimal(numeric);\n} catch (final NumberFormatException e) { // NOPMD\n// ignore the bad number\n}\n//$FALL-THROUGH$\ndefault :\nthrow new NumberFormatException(str + \" is not a valid number.\");\n\n}\n}\n//User doesn't have a preference on the return type, so let's start\n//small and go from there...\nif (expPos > -1 && expPos < str.length() - 1) {\nexp = str.substring(expPos + 1, str.length());\n} else {\nexp = null;\n}\nif (dec == null && exp == null) { // no decimal point and no exponent\n//Must be an Integer, Long, Biginteger\ntry {\nreturn createInteger(str);\n} catch (final NumberFormatException nfe) { // NOPMD\n// ignore the bad number\n}\ntry {\nreturn createLong(str);\n} catch (final NumberFormatException nfe) { // NOPMD\n// ignore the bad number\n}\nreturn createBigInteger(str);\n}\n\n//Must be a Float, Double, BigDecimal\nfinal boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\ntry {\nif(numDecimals <= 7){// If number has 7 or fewer digits past the decimal point then make it a float\nfinal Float f = createFloat(str);\nif (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\nreturn f;\n}\n}\n} catch (final NumberFormatException nfe) { // NOPMD\n// ignore the bad number\n}\ntry {\nif(numDecimals <= 16){// If number has between 8 and 16 digits past the decimal point then make it a double\nfinal Double d = createDouble(str);\nif (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\nreturn d;\n}\n}\n} catch (final NumberFormatException nfe) { // NOPMD\n// ignore the bad number\n}\n\nreturn createBigDecimal(str);\n}",
            "method_id": 2
        }
    ]
}
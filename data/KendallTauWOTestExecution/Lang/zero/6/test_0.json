{
    "bug_id": 6,
    "test_id": 0,
    "test_name": "org.apache.commons.lang3.StringUtilsTest.testEscapeSurrogatePairs",
    "test_body": "public void testEscapeSurrogatePairs() throws Exception {\nassertEquals(\"\\uD83D\\uDE30\", StringEscapeUtils.escapeCsv(\"\\uD83D\\uDE30\"));\n// Examples from https://en.wikipedia.org/wiki/UTF-16\nassertEquals(\"\\uD800\\uDC00\", StringEscapeUtils.escapeCsv(\"\\uD800\\uDC00\"));\nassertEquals(\"\\uD834\\uDD1E\", StringEscapeUtils.escapeCsv(\"\\uD834\\uDD1E\"));\nassertEquals(\"\\uDBFF\\uDFFD\", StringEscapeUtils.escapeCsv(\"\\uDBFF\\uDFFD\"));\n}\n",
    "stack_trace": "java.lang.StringIndexOutOfBoundsException: String index out of range: 2\nat java.lang.String.charAt(String.java:658)\nat java.lang.Character.codePointAt(Character.java:4884)\nat org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(CharSequenceTranslator.java:95)\nat org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(CharSequenceTranslator.java:59)\nat org.apache.commons.lang3.StringEscapeUtils.escapeCsv(StringEscapeUtils.java:556)\nat org.apache.commons.lang3.StringUtilsTest.testEscapeSurrogatePairs(StringUtilsTest.java:2187)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.lang3.text.translate.CharSequenceTranslator:translate(Ljava/lang/CharSequence;Ljava/io/Writer;)V",
            "method_body": "public final void translate(CharSequence input, Writer out) throws IOException {\nif (out == null) {\nthrow new IllegalArgumentException(\"The Writer must not be null\");\n}\nif (input == null) {\nreturn;\n}\nint pos = 0;\nint len = input.length();\nwhile (pos < len) {\nint consumed = translate(input, pos, out);\nif (consumed == 0) {\nchar[] c = Character.toChars(Character.codePointAt(input, pos));\nout.write(c);\npos+= c.length;\ncontinue;\n}\n//          // contract with translators is that they have to understand codepoints\n//          // and they just took care of a surrogate pair\nfor (int pt = 0; pt < consumed; pt++) {\npos += Character.charCount(Character.codePointAt(input, pos));\n}\n}\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.lang3.StringEscapeUtils$CsvEscaper:translate(Ljava/lang/CharSequence;ILjava/io/Writer;)I",
            "method_body": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n\nif(index != 0) {\nthrow new IllegalStateException(\"CsvEscaper should never reach the [1] index\");\n}\n\nif (StringUtils.containsNone(input.toString(), CSV_SEARCH_CHARS)) {\nout.write(input.toString());\n} else {\nout.write(CSV_QUOTE);\nout.write(StringUtils.replace(input.toString(), CSV_QUOTE_STR, CSV_QUOTE_STR + CSV_QUOTE_STR));\nout.write(CSV_QUOTE);\n}\nreturn input.length();\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.lang3.StringUtils:containsNone(Ljava/lang/CharSequence;[C)Z",
            "method_body": "public static boolean containsNone(CharSequence cs, char... searchChars) {\nif (cs == null || searchChars == null) {\nreturn true;\n}\nint csLen = cs.length();\nint csLast = csLen - 1;\nint searchLen = searchChars.length;\nint searchLast = searchLen - 1;\nfor (int i = 0; i < csLen; i++) {\nchar ch = cs.charAt(i);\nfor (int j = 0; j < searchLen; j++) {\nif (searchChars[j] == ch) {\nif (Character.isHighSurrogate(ch)) {\nif (j == searchLast) {\n// missing low surrogate, fine, like String.indexOf(String)\nreturn false;\n}\nif (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {\nreturn false;\n}\n} else {\n// ch is in the Basic Multilingual Plane\nreturn false;\n}\n}\n}\n}\nreturn true;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.lang3.StringEscapeUtils:escapeCsv(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public static final String escapeCsv(String input) {\nreturn ESCAPE_CSV.translate(input);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.lang3.text.translate.CharSequenceTranslator:translate(Ljava/lang/CharSequence;)Ljava/lang/String;",
            "method_body": "public abstract int translate(CharSequence input, int index, Writer out) throws IOException;\n\n/**\n* Helper for non-Writer usage.\n* @param input CharSequence to be translated\n* @return String output of translation\n*/\npublic final String translate(CharSequence input) {\nif (input == null) {\nreturn null;\n}\ntry {\nStringWriter writer = new StringWriter(input.length() * 2);\ntranslate(input, writer);\nreturn writer.toString();\n} catch (IOException ioe) {\n// this should never ever happen while writing to a StringWriter\nthrow new RuntimeException(ioe);\n}\n}",
            "method_id": 4
        }
    ]
}
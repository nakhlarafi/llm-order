{
    "bug_id": 32,
    "test_id": 0,
    "test_name": "org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionObjectCycle",
    "test_body": "public void testReflectionObjectCycle() {\nReflectionTestCycleA a = new ReflectionTestCycleA();\nReflectionTestCycleB b = new ReflectionTestCycleB();\na.b = b;\nb.a = a;\n// Used to caused:\n// java.lang.StackOverflowError\n// at java.lang.ClassLoader.getCallerClassLoader(Native Method)\n// at java.lang.Class.getDeclaredFields(Class.java:992)\n// at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:373)\n// at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)\n// at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)\n// at\n// org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)\n// at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)\n// at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)\n// at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)\n// at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)\n// at\n// org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)\n// at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)\na.hashCode();\nassertNull(HashCodeBuilder.getRegistry());\nb.hashCode();\nassertNull(HashCodeBuilder.getRegistry());\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: Expected: <null> but was: []\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.assertTrue(Assert.java:22)\nat junit.framework.Assert.assertNull(Assert.java:277)\nat junit.framework.Assert.assertNull(Assert.java:268)\nat junit.framework.TestCase.assertNull(TestCase.java:438)\nat org.apache.commons.lang3.builder.HashCodeBuilderTest.testReflectionObjectCycle(HashCodeBuilderTest.java:524)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.lang3.builder.HashCodeBuilder:reflectionHashCode(Ljava/lang/Object;)I",
            "method_body": "public static int reflectionHashCode(Object object) {\nreturn reflectionHashCode(17, 37, object, false, null, null);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.lang3.builder.HashCodeBuilder:append(Ljava/lang/Object;)Lorg/apache/commons/lang3/builder/HashCodeBuilder;",
            "method_body": "public HashCodeBuilder append(Object object) {\nif (object == null) {\niTotal = iTotal * iConstant;\n\n} else {\nif(object.getClass().isArray()) {\n// 'Switch' on type of array, to dispatch to the correct handler\n// This handles multi dimensional arrays\nif (object instanceof long[]) {\nappend((long[]) object);\n} else if (object instanceof int[]) {\nappend((int[]) object);\n} else if (object instanceof short[]) {\nappend((short[]) object);\n} else if (object instanceof char[]) {\nappend((char[]) object);\n} else if (object instanceof byte[]) {\nappend((byte[]) object);\n} else if (object instanceof double[]) {\nappend((double[]) object);\n} else if (object instanceof float[]) {\nappend((float[]) object);\n} else if (object instanceof boolean[]) {\nappend((boolean[]) object);\n} else {\n// Not an array of primitives\nappend((Object[]) object);\n}\n} else {\niTotal = iTotal * iConstant + object.hashCode();\n}\n}\nreturn this;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.lang3.builder.HashCodeBuilder:<init>(II)V",
            "method_body": "public HashCodeBuilder(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber) {\nif (initialNonZeroOddNumber == 0) {\nthrow new IllegalArgumentException(\"HashCodeBuilder requires a non zero initial value\");\n}\nif (initialNonZeroOddNumber % 2 == 0) {\nthrow new IllegalArgumentException(\"HashCodeBuilder requires an odd initial value\");\n}\nif (multiplierNonZeroOddNumber == 0) {\nthrow new IllegalArgumentException(\"HashCodeBuilder requires a non zero multiplier\");\n}\nif (multiplierNonZeroOddNumber % 2 == 0) {\nthrow new IllegalArgumentException(\"HashCodeBuilder requires an odd multiplier\");\n}\niConstant = multiplierNonZeroOddNumber;\niTotal = initialNonZeroOddNumber;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.lang3.builder.HashCodeBuilder:isRegistered(Ljava/lang/Object;)Z",
            "method_body": "static boolean isRegistered(Object value) {\nreturn getRegistry().contains(new IDKey(value));\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.lang3.builder.HashCodeBuilder:unregister(Ljava/lang/Object;)V",
            "method_body": "static void unregister(Object value) {\ngetRegistry().remove(new IDKey(value));\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.lang3.builder.IDKey:<init>(Ljava/lang/Object;)V",
            "method_body": "public IDKey(Object _value) {\n// This is the Object hashcode\nid = System.identityHashCode(_value);\n// There have been some cases (LANG-459) that return the\n// same identity hash code for different objects.  So\n// the value is also added to disambiguate these cases.\nvalue = _value;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.lang3.builder.HashCodeBuilder:register(Ljava/lang/Object;)V",
            "method_body": "static void register(Object value) {\ngetRegistry().add(new IDKey(value));\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.lang3.ArrayUtils:indexOf([Ljava/lang/Object;Ljava/lang/Object;I)I",
            "method_body": "public static int indexOf(Object[] array, Object objectToFind, int startIndex) {\nif (array == null) {\nreturn INDEX_NOT_FOUND;\n}\nif (startIndex < 0) {\nstartIndex = 0;\n}\nif (objectToFind == null) {\nfor (int i = startIndex; i < array.length; i++) {\nif (array[i] == null) {\nreturn i;\n}\n}\n} else if (array.getClass().getComponentType().isInstance(objectToFind)) {\nfor (int i = startIndex; i < array.length; i++) {\nif (objectToFind.equals(array[i])) {\nreturn i;\n}\n}\n}\nreturn INDEX_NOT_FOUND;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.lang3.builder.HashCodeBuilder:reflectionAppend(Ljava/lang/Object;Ljava/lang/Class;Lorg/apache/commons/lang3/builder/HashCodeBuilder;Z[Ljava/lang/String;)V",
            "method_body": "private static void reflectionAppend(Object object, Class<?> clazz, HashCodeBuilder builder, boolean useTransients,\nString[] excludeFields) {\nif (isRegistered(object)) {\nreturn;\n}\ntry {\nregister(object);\nField[] fields = clazz.getDeclaredFields();\nAccessibleObject.setAccessible(fields, true);\nfor (Field field : fields) {\nif (!ArrayUtils.contains(excludeFields, field.getName())\n&& (field.getName().indexOf('$') == -1)\n&& (useTransients || !Modifier.isTransient(field.getModifiers()))\n&& (!Modifier.isStatic(field.getModifiers()))) {\ntry {\nObject fieldValue = field.get(object);\nbuilder.append(fieldValue);\n} catch (IllegalAccessException e) {\n// this can't happen. Would get a Security exception instead\n// throw a runtime exception in case the impossible happens.\nthrow new InternalError(\"Unexpected IllegalAccessException\");\n}\n}\n}\n} finally {\nunregister(object);\n}\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.lang3.builder.HashCodeBuilder:getRegistry()Ljava/util/Set;",
            "method_body": "static Set<IDKey> getRegistry() {\nreturn REGISTRY.get();\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.lang3.builder.IDKey:hashCode()I",
            "method_body": "public int hashCode() {\nreturn id;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.lang3.ArrayUtils:indexOf([Ljava/lang/Object;Ljava/lang/Object;)I",
            "method_body": "public static int indexOf(Object[] array, Object objectToFind) {\nreturn indexOf(array, objectToFind, 0);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.lang3.ArrayUtils:contains([Ljava/lang/Object;Ljava/lang/Object;)Z",
            "method_body": "public static boolean contains(Object[] array, Object objectToFind) {\nreturn indexOf(array, objectToFind) != INDEX_NOT_FOUND;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.lang3.builder.HashCodeBuilder:reflectionHashCode(IILjava/lang/Object;ZLjava/lang/Class;[Ljava/lang/String;)I",
            "method_body": "public static <T> int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, T object,\nboolean testTransients, Class<? super T> reflectUpToClass, String[] excludeFields) {\n\nif (object == null) {\nthrow new IllegalArgumentException(\"The object to build a hash code for must not be null\");\n}\nHashCodeBuilder builder = new HashCodeBuilder(initialNonZeroOddNumber, multiplierNonZeroOddNumber);\nClass<?> clazz = object.getClass();\nreflectionAppend(object, clazz, builder, testTransients, excludeFields);\nwhile (clazz.getSuperclass() != null && clazz != reflectUpToClass) {\nclazz = clazz.getSuperclass();\nreflectionAppend(object, clazz, builder, testTransients, excludeFields);\n}\nreturn builder.toHashCode();\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.lang3.builder.HashCodeBuilder:toHashCode()I",
            "method_body": "public int toHashCode() {\nreturn iTotal;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.lang3.builder.IDKey:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object other) {\nif (!(other instanceof IDKey)) {\nreturn false;\n}\nIDKey idKey = (IDKey) other;\nif (id != idKey.id) {\nreturn false;\n}\n// Note that identity equals is used.\nreturn value == idKey.value;\n}",
            "method_id": 15
        }
    ]
}
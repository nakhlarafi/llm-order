{
    "bug_id": 19,
    "test_id": 0,
    "test_name": "org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest.testOutOfBounds",
    "test_body": "public void testOutOfBounds() {\nNumericEntityUnescaper neu = new NumericEntityUnescaper();\nassertEquals(\"Failed to ignore when last character is &\", \"Test &\", neu.translate(\"Test &\"));\nassertEquals(\"Failed to ignore when last character is &\", \"Test &#\", neu.translate(\"Test &#\"));\nassertEquals(\"Failed to ignore when last character is &\", \"Test &#x\", neu.translate(\"Test &#x\"));\nassertEquals(\"Failed to ignore when last character is &\", \"Test &#X\", neu.translate(\"Test &#X\"));\n}\n",
    "stack_trace": "java.lang.StringIndexOutOfBoundsException: String index out of range: 7\nat java.lang.String.charAt(String.java:658)\nat org.apache.commons.lang3.text.translate.NumericEntityUnescaper.translate(NumericEntityUnescaper.java:44)\nat org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(CharSequenceTranslator.java:86)\nat org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(CharSequenceTranslator.java:59)\nat org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest.testOutOfBounds(NumericEntityUnescaperTest.java:41)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.lang3.text.translate.NumericEntityUnescaper:translate(Ljava/lang/CharSequence;ILjava/io/Writer;)I",
            "method_body": "public int translate(CharSequence input, int index, Writer out) throws IOException {\nint seqEnd = input.length();\n// Uses -2 to ensure there is something after the &#\nif(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\nint start = index + 2;\nboolean isHex = false;\n\nchar firstChar = input.charAt(start);\nif(firstChar == 'x' || firstChar == 'X') {\nstart++;\nisHex = true;\n\n// Check there's more than just an x after the &#\n}\n\nint end = start;\n// Note that this supports character codes without a ; on the end\nwhile(input.charAt(end) != ';')\n{\nend++;\n}\n\nint entityValue;\ntry {\nif(isHex) {\nentityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n} else {\nentityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n}\n} catch(NumberFormatException nfe) {\nSystem.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\nreturn 0;\n}\n\nif(entityValue > 0xFFFF) {\nchar[] chrs = Character.toChars(entityValue);\nout.write(chrs[0]);\nout.write(chrs[1]);\n} else {\nout.write(entityValue);\n}\n\n\nreturn 2 + (end - start) + (isHex ? 1 : 0) + 1;\n}\nreturn 0;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.lang3.text.translate.CharSequenceTranslator:translate(Ljava/lang/CharSequence;Ljava/io/Writer;)V",
            "method_body": "public final void translate(CharSequence input, Writer out) throws IOException {\nif (out == null) {\nthrow new IllegalArgumentException(\"The Writer must not be null\");\n}\nif (input == null) {\nreturn;\n}\nint sz = Character.codePointCount(input, 0, input.length());\nfor (int i = 0; i < sz; i++) {\n\n// consumed is the number of codepoints consumed\nint consumed = translate(input, i, out);\n\nif (consumed == 0) {\nout.write(Character.toChars(Character.codePointAt(input, i)));\n} else {\n// contract with translators is that they have to understand codepoints\n// and they just took care of a surrogate pair\nfor (int j = 0; j < consumed; j++) {\nif (i < sz - 2) {\ni += Character.charCount(Character.codePointAt(input, i));\n} else {\n// If the String ends with a high surrogate, just add the 1 and don't worry about such things\ni++;\n}\n}\n// for loop will increment 1 anyway, so remove 1 to account for that\ni--;\n}\n}\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.lang3.text.translate.CharSequenceTranslator:translate(Ljava/lang/CharSequence;)Ljava/lang/String;",
            "method_body": "public abstract int translate(CharSequence input, int index, Writer out) throws IOException;\n\n/**\n* Helper for non-Writer usage.\n* @param input CharSequence to be translated\n* @return String output of translation\n*/\npublic final String translate(CharSequence input) {\nif (input == null) {\nreturn null;\n}\ntry {\nStringWriter writer = new StringWriter(input.length() * 2);\ntranslate(input, writer);\nreturn writer.toString();\n} catch (IOException ioe) {\n// this should never ever happen while writing to a StringWriter\nthrow new RuntimeException(ioe);\n}\n}",
            "method_id": 2
        }
    ]
}
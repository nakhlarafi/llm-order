{
    "bug_id": 23,
    "test_id": 0,
    "test_name": "org.joda.time.TestDateTimeZone.testForID_String_old",
    "test_body": "public void testForID_String_old() {\nMap<String, String> map = new LinkedHashMap<String, String>();\nmap.put(\"GMT\", \"UTC\");\nmap.put(\"WET\", \"WET\");\nmap.put(\"CET\", \"CET\");\nmap.put(\"MET\", \"CET\");\nmap.put(\"ECT\", \"CET\");\nmap.put(\"EET\", \"EET\");\nmap.put(\"MIT\", \"Pacific/Apia\");\nmap.put(\"HST\", \"Pacific/Honolulu\");\nmap.put(\"AST\", \"America/Anchorage\");\nmap.put(\"PST\", \"America/Los_Angeles\");\nmap.put(\"MST\", \"America/Denver\");\nmap.put(\"PNT\", \"America/Phoenix\");\nmap.put(\"CST\", \"America/Chicago\");\nmap.put(\"EST\", \"America/New_York\");\nmap.put(\"IET\", \"America/Indiana/Indianapolis\");\nmap.put(\"PRT\", \"America/Puerto_Rico\");\nmap.put(\"CNT\", \"America/St_Johns\");\nmap.put(\"AGT\", \"America/Argentina/Buenos_Aires\");\nmap.put(\"BET\", \"America/Sao_Paulo\");\nmap.put(\"ART\", \"Africa/Cairo\");\nmap.put(\"CAT\", \"Africa/Harare\");\nmap.put(\"EAT\", \"Africa/Addis_Ababa\");\nmap.put(\"NET\", \"Asia/Yerevan\");\nmap.put(\"PLT\", \"Asia/Karachi\");\nmap.put(\"IST\", \"Asia/Kolkata\");\nmap.put(\"BST\", \"Asia/Dhaka\");\nmap.put(\"VST\", \"Asia/Ho_Chi_Minh\");\nmap.put(\"CTT\", \"Asia/Shanghai\");\nmap.put(\"JST\", \"Asia/Tokyo\");\nmap.put(\"ACT\", \"Australia/Darwin\");\nmap.put(\"AET\", \"Australia/Sydney\");\nmap.put(\"SST\", \"Pacific/Guadalcanal\");\nmap.put(\"NST\", \"Pacific/Auckland\");\nfor (String key : map.keySet()) {\nString value = map.get(key);\nTimeZone juZone = TimeZone.getTimeZone(key);\nDateTimeZone zone = DateTimeZone.forTimeZone(juZone);\nassertEquals(value, zone.getID());\n//            System.out.println(juZone);\n//            System.out.println(juZone.getDisplayName());\n//            System.out.println(zone);\n//            System.out.println(\"------\");\n}\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<[WET]> but was:<[Europe/London]>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.joda.time.TestDateTimeZone.testForID_String_old(TestDateTimeZone.java:282)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.DateTimeZone:getConvertedId(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "private static synchronized String getConvertedId(String id) {\nMap<String, String> map = cZoneIdConversion;\nif (map == null) {\n// Backwards compatibility with TimeZone.\nmap = new HashMap<String, String>();\nmap.put(\"GMT\", \"UTC\");\nmap.put(\"MIT\", \"Pacific/Apia\");\nmap.put(\"HST\", \"Pacific/Honolulu\");  // JDK 1.1 compatible\nmap.put(\"AST\", \"America/Anchorage\");\nmap.put(\"PST\", \"America/Los_Angeles\");\nmap.put(\"MST\", \"America/Denver\");  // JDK 1.1 compatible\nmap.put(\"PNT\", \"America/Phoenix\");\nmap.put(\"CST\", \"America/Chicago\");\nmap.put(\"EST\", \"America/New_York\");  // JDK 1.1 compatible\nmap.put(\"IET\", \"America/Indianapolis\");\nmap.put(\"PRT\", \"America/Puerto_Rico\");\nmap.put(\"CNT\", \"America/St_Johns\");\nmap.put(\"AGT\", \"America/Buenos_Aires\");\nmap.put(\"BET\", \"America/Sao_Paulo\");\nmap.put(\"WET\", \"Europe/London\");\nmap.put(\"ECT\", \"Europe/Paris\");\nmap.put(\"ART\", \"Africa/Cairo\");\nmap.put(\"CAT\", \"Africa/Harare\");\nmap.put(\"EET\", \"Europe/Bucharest\");\nmap.put(\"EAT\", \"Africa/Addis_Ababa\");\nmap.put(\"MET\", \"Asia/Tehran\");\nmap.put(\"NET\", \"Asia/Yerevan\");\nmap.put(\"PLT\", \"Asia/Karachi\");\nmap.put(\"IST\", \"Asia/Calcutta\");\nmap.put(\"BST\", \"Asia/Dhaka\");\nmap.put(\"VST\", \"Asia/Saigon\");\nmap.put(\"CTT\", \"Asia/Shanghai\");\nmap.put(\"JST\", \"Asia/Tokyo\");\nmap.put(\"ACT\", \"Australia/Darwin\");\nmap.put(\"AET\", \"Australia/Sydney\");\nmap.put(\"SST\", \"Pacific/Guadalcanal\");\nmap.put(\"NST\", \"Pacific/Auckland\");\ncZoneIdConversion = map;\n}\nreturn map.get(id);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
            "method_body": "public final String getID() {\nreturn iID;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
            "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nsm.checkPermission(new JodaTimePermission(\"DateTimeZone.setDefault\"));\n}\nif (zone == null) {\nthrow new IllegalArgumentException(\"The datetime zone must not be null\");\n}\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:forTimeZone(Ljava/util/TimeZone;)Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone forTimeZone(TimeZone zone) {\nif (zone == null) {\nreturn getDefault();\n}\nfinal String id = zone.getID();\nif (id.equals(\"UTC\")) {\nreturn DateTimeZone.UTC;\n}\n\n// Convert from old alias before consulting provider since they may differ.\nDateTimeZone dtz = null;\nString convId = getConvertedId(id);\nif (convId != null) {\ndtz = cProvider.getZone(convId);\n}\nif (dtz == null) {\ndtz = cProvider.getZone(id);\n}\nif (dtz != null) {\nreturn dtz;\n}\n\n// Support GMT+/-hh:mm formats\nif (convId == null) {\nconvId = zone.getDisplayName();\nif (convId.startsWith(\"GMT+\") || convId.startsWith(\"GMT-\")) {\nconvId = convId.substring(3);\nint offset = parseOffset(convId);\nif (offset == 0L) {\nreturn DateTimeZone.UTC;\n} else {\nconvId = printOffset(offset);\nreturn fixedOffsetZone(convId, offset);\n}\n}\n}\nthrow new IllegalArgumentException(\"The datetime zone id '\" + id + \"' is not recognised\");\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.joda.time.tz.ZoneInfoProvider:getZone(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
            "method_body": "public DateTimeZone getZone(String id) {\nif (id == null) {\nreturn null;\n}\n\nObject obj = iZoneInfoMap.get(id);\nif (obj == null) {\nreturn null;\n}\n\nif (id.equals(obj)) {\n// Load zone data for the first time.\nreturn loadZoneData(id);\n}\n\nif (obj instanceof SoftReference<?>) {\n@SuppressWarnings(\"unchecked\")\nSoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;\nDateTimeZone tz = ref.get();\nif (tz != null) {\nreturn tz;\n}\n// Reference cleared; load data again.\nreturn loadZoneData(id);\n}\n\n// If this point is reached, mapping must link to another.\nreturn getZone((String)obj);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\nzone = cDefault;\nif (zone == null) {\nDateTimeZone temp = null;\ntry {\ntry {\nString id = System.getProperty(\"user.timezone\");\nif (id != null) {  // null check avoids stack overflow\ntemp = forID(id);\n}\n} catch (RuntimeException ex) {\n// ignored\n}\nif (temp == null) {\ntemp = forTimeZone(TimeZone.getDefault());\n}\n} catch (IllegalArgumentException ex) {\n// ignored\n}\nif (temp == null) {\ntemp = UTC;\n}\ncDefault = zone = temp;\n}\n}\n}\nreturn zone;\n}",
            "method_id": 5
        }
    ]
}
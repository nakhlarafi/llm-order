{
    "bug_id": 10,
    "test_id": 0,
    "test_name": "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testPrimitiveFieldAnnotationTakesPrecedenceOverDefault",
    "test_body": "public void testPrimitiveFieldAnnotationTakesPrecedenceOverDefault() {\nGson gson = new Gson();\nString json = gson.toJson(new GadgetWithPrimitivePart(42));\nassertEquals(\"{\\\"part\\\":\\\"42\\\"}\", json);\nGadgetWithPrimitivePart gadget = gson.fromJson(json, GadgetWithPrimitivePart.class);\nassertEquals(42, gadget.part);\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<{\"part\":[\"42\"]}> but was:<{\"part\":[42]}>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testPrimitiveFieldAnnotationTakesPrecedenceOverDefault(JsonAdapterAnnotationOnFieldsTest.java:236)",
    "covered_methods": [
        {
            "method_signature": "com.google.gson.Gson:toJson(Ljava/lang/Object;Ljava/lang/reflect/Type;Lcom/google/gson/stream/JsonWriter;)V",
            "method_body": "public void toJson(Object src, Type typeOfSrc, JsonWriter writer) throws JsonIOException {\nTypeAdapter<?> adapter = getAdapter(TypeToken.get(typeOfSrc));\nboolean oldLenient = writer.isLenient();\nwriter.setLenient(true);\nboolean oldHtmlSafe = writer.isHtmlSafe();\nwriter.setHtmlSafe(htmlSafe);\nboolean oldSerializeNulls = writer.getSerializeNulls();\nwriter.setSerializeNulls(serializeNulls);\ntry {\n((TypeAdapter<Object>) adapter).write(writer, src);\n} catch (IOException e) {\nthrow new JsonIOException(e);\n} finally {\nwriter.setLenient(oldLenient);\nwriter.setHtmlSafe(oldHtmlSafe);\nwriter.setSerializeNulls(oldSerializeNulls);\n}\n}",
            "method_id": 0
        },
        {
            "method_signature": "com.google.gson.internal.bind.TypeAdapters$30:create(Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;)Lcom/google/gson/TypeAdapter;",
            "method_body": "@Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\nClass<? super T> rawType = typeToken.getRawType();\nif (!Enum.class.isAssignableFrom(rawType) || rawType == Enum.class) {\nreturn null;\n}\nif (!rawType.isEnum()) {\nrawType = rawType.getSuperclass(); // handle anonymous subclasses\n}\nreturn (TypeAdapter<T>) new EnumTypeAdapter(rawType);\n}",
            "method_id": 1
        },
        {
            "method_signature": "com.google.gson.internal.Excluder:create(Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;)Lcom/google/gson/TypeAdapter;",
            "method_body": "public <T> TypeAdapter<T> create(final Gson gson, final TypeToken<T> type) {\nClass<?> rawType = type.getRawType();\nfinal boolean skipSerialize = excludeClass(rawType, true);\nfinal boolean skipDeserialize = excludeClass(rawType, false);\n\nif (!skipSerialize && !skipDeserialize) {\nreturn null;\n}\n\nreturn new TypeAdapter<T>() {\n/** The delegate is lazily created because it may not be needed, and creating it may fail. */\nprivate TypeAdapter<T> delegate;\n\n@Override public T read(JsonReader in) throws IOException {\nif (skipDeserialize) {\nin.skipValue();\nreturn null;\n}\nreturn delegate().read(in);\n}\n\n@Override public void write(JsonWriter out, T value) throws IOException {\nif (skipSerialize) {\nout.nullValue();\nreturn;\n}\ndelegate().write(out, value);\n}\n\nprivate TypeAdapter<T> delegate() {\nTypeAdapter<T> d = delegate;\nreturn d != null\n? d\n: (delegate = gson.getDelegateAdapter(Excluder.this, type));\n}\n};\n}",
            "method_id": 2
        },
        {
            "method_signature": "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1:writeField(Ljava/lang/Object;)Z",
            "method_body": "private ReflectiveTypeAdapterFactory.BoundField createBoundField(\nfinal Gson context, final Field field, final String name,\nfinal TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\nfinal boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());\n// special casing primitives here saves ~5% on Android...\nJsonAdapter annotation = field.getAnnotation(JsonAdapter.class);\nTypeAdapter<?> mapped = null;\nif (annotation != null) {\nmapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);\n}\nfinal boolean jsonAdapterPresent = mapped != null;\nif (mapped == null) mapped = context.getAdapter(fieldType);\n\nfinal TypeAdapter<?> typeAdapter = mapped;\nreturn new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) // the type adapter and field type always agree\n@Override void write(JsonWriter writer, Object value)\nthrows IOException, IllegalAccessException {\nObject fieldValue = field.get(value);\nTypeAdapter t =\nnew TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());\nt.write(writer, fieldValue);\n}\n@Override void read(JsonReader reader, Object value)\nthrows IOException, IllegalAccessException {\nObject fieldValue = typeAdapter.read(reader);\nif (fieldValue != null || !isPrimitive) {\nfield.set(value, fieldValue);\n}\n}\n@Override public boolean writeField(Object value) throws IOException, IllegalAccessException {\nif (!serialized) return false;\nObject fieldValue = field.get(value);\nreturn fieldValue != value; // avoid recursion for example for Throwable.cause\n}\n};\n}",
            "method_id": 3
        },
        {
            "method_signature": "com.google.gson.internal.bind.TypeAdapters$35:create(Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;)Lcom/google/gson/TypeAdapter;",
            "method_body": "public static <T1> TypeAdapterFactory newTypeHierarchyFactory(\nfinal Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {\nreturn new TypeAdapterFactory() {\n@SuppressWarnings(\"unchecked\")\n@Override public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\nfinal Class<? super T2> requestedType = typeToken.getRawType();\nif (!clazz.isAssignableFrom(requestedType)) {\nreturn null;\n}\nreturn (TypeAdapter<T2>) new TypeAdapter<T1>() {\n@Override public void write(JsonWriter out, T1 value) throws IOException {\ntypeAdapter.write(out, value);\n}\n\n@Override public T1 read(JsonReader in) throws IOException {\nT1 result = typeAdapter.read(in);\nif (result != null && !requestedType.isInstance(result)) {\nthrow new JsonSyntaxException(\"Expected a \" + requestedType.getName()\n+ \" but was \" + result.getClass().getName());\n}\nreturn result;\n}\n};\n}\n@Override public String toString() {\nreturn \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\n}\n};\n}",
            "method_id": 4
        },
        {
            "method_signature": "com.google.gson.stream.JsonWriter:writeDeferredName()V",
            "method_body": "private void writeDeferredName() throws IOException {\nif (deferredName != null) {\nbeforeName();\nstring(deferredName);\ndeferredName = null;\n}\n}",
            "method_id": 5
        },
        {
            "method_signature": "com.google.gson.Gson:toJson(Ljava/lang/Object;)Ljava/lang/String;",
            "method_body": "public String toJson(Object src) {\nif (src == null) {\nreturn toJson(JsonNull.INSTANCE);\n}\nreturn toJson(src, src.getClass());\n}",
            "method_id": 6
        },
        {
            "method_signature": "com.google.gson.stream.JsonWriter:<clinit>()V",
            "method_body": "private static final String[] REPLACEMENT_CHARS;\nprivate static final String[] HTML_SAFE_REPLACEMENT_CHARS;\nstatic {\nREPLACEMENT_CHARS = new String[128];\nfor (int i = 0; i <= 0x1f; i++) {\nREPLACEMENT_CHARS[i] = String.format(\"\\\\u%04x\", (int) i);\n}\nREPLACEMENT_CHARS['\"'] = \"\\\\\\\"\";\nREPLACEMENT_CHARS['\\\\'] = \"\\\\\\\\\";\nREPLACEMENT_CHARS['\\t'] = \"\\\\t\";\nREPLACEMENT_CHARS['\\b'] = \"\\\\b\";\nREPLACEMENT_CHARS['\\n'] = \"\\\\n\";\nREPLACEMENT_CHARS['\\r'] = \"\\\\r\";\nREPLACEMENT_CHARS['\\f'] = \"\\\\f\";\nHTML_SAFE_REPLACEMENT_CHARS = REPLACEMENT_CHARS.clone();\nHTML_SAFE_REPLACEMENT_CHARS['<'] = \"\\\\u003c\";\nHTML_SAFE_REPLACEMENT_CHARS['>'] = \"\\\\u003e\";\nHTML_SAFE_REPLACEMENT_CHARS['&'] = \"\\\\u0026\";\nHTML_SAFE_REPLACEMENT_CHARS['='] = \"\\\\u003d\";\nHTML_SAFE_REPLACEMENT_CHARS['\\''] = \"\\\\u0027\";\n}",
            "method_id": 7
        },
        {
            "method_signature": "com.google.gson.internal.bind.TypeAdapters$32:create(Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;)Lcom/google/gson/TypeAdapter;",
            "method_body": "public static <TT> TypeAdapterFactory newFactory(\nfinal Class<TT> type, final TypeAdapter<TT> typeAdapter) {\nreturn new TypeAdapterFactory() {\n@SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n@Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\nreturn typeToken.getRawType() == type ? (TypeAdapter<T>) typeAdapter : null;\n}\n@Override public String toString() {\nreturn \"Factory[type=\" + type.getName() + \",adapter=\" + typeAdapter + \"]\";\n}\n};\n}",
            "method_id": 8
        },
        {
            "method_signature": "com.google.gson.internal.bind.TimeTypeAdapter$1:create(Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;)Lcom/google/gson/TypeAdapter;",
            "method_body": "@Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\nreturn typeToken.getRawType() == Time.class ? (TypeAdapter<T>) new TimeTypeAdapter() : null;\n}",
            "method_id": 9
        },
        {
            "method_signature": "com.google.gson.stream.JsonWriter:beforeValue()V",
            "method_body": "private void beforeValue() throws IOException {\nswitch (peek()) {\ncase NONEMPTY_DOCUMENT:\nif (!lenient) {\nthrow new IllegalStateException(\n\"JSON must have only one top-level value.\");\n}\n// fall-through\ncase EMPTY_DOCUMENT: // first in document\nreplaceTop(NONEMPTY_DOCUMENT);\nbreak;\n\ncase EMPTY_ARRAY: // first in array\nreplaceTop(NONEMPTY_ARRAY);\nnewline();\nbreak;\n\ncase NONEMPTY_ARRAY: // another in array\nout.append(',');\nnewline();\nbreak;\n\ncase DANGLING_NAME: // value for name\nout.append(separator);\nreplaceTop(NONEMPTY_OBJECT);\nbreak;\n\ndefault:\nthrow new IllegalStateException(\"Nesting problem.\");\n}\n}",
            "method_id": 10
        },
        {
            "method_signature": "com.google.gson.internal.bind.DateTypeAdapter:<clinit>()V",
            "method_body": "public static final TypeAdapterFactory FACTORY = new TypeAdapterFactory() {\n@SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n@Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\nreturn typeToken.getRawType() == Date.class ? (TypeAdapter<T>) new DateTypeAdapter() : null;\n}\n};",
            "method_id": 11
        },
        {
            "method_signature": "com.google.gson.Gson:getAdapter(Lcom/google/gson/reflect/TypeToken;)Lcom/google/gson/TypeAdapter;",
            "method_body": "public <T> TypeAdapter<T> getAdapter(TypeToken<T> type) {\nTypeAdapter<?> cached = typeTokenCache.get(type == null ? NULL_KEY_SURROGATE : type);\nif (cached != null) {\nreturn (TypeAdapter<T>) cached;\n}\n\nMap<TypeToken<?>, FutureTypeAdapter<?>> threadCalls = calls.get();\nboolean requiresThreadLocalCleanup = false;\nif (threadCalls == null) {\nthreadCalls = new HashMap<TypeToken<?>, FutureTypeAdapter<?>>();\ncalls.set(threadCalls);\nrequiresThreadLocalCleanup = true;\n}\n\n// the key and value type parameters always agree\nFutureTypeAdapter<T> ongoingCall = (FutureTypeAdapter<T>) threadCalls.get(type);\nif (ongoingCall != null) {\nreturn ongoingCall;\n}\n\ntry {\nFutureTypeAdapter<T> call = new FutureTypeAdapter<T>();\nthreadCalls.put(type, call);\n\nfor (TypeAdapterFactory factory : factories) {\nTypeAdapter<T> candidate = factory.create(this, type);\nif (candidate != null) {\ncall.setDelegate(candidate);\ntypeTokenCache.put(type, candidate);\nreturn candidate;\n}\n}\nthrow new IllegalArgumentException(\"GSON cannot handle \" + type);\n} finally {\nthreadCalls.remove(type);\n\nif (requiresThreadLocalCleanup) {\ncalls.remove();\n}\n}\n}",
            "method_id": 12
        },
        {
            "method_signature": "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:getFieldNames(Ljava/lang/reflect/Field;)Ljava/util/List;",
            "method_body": "private List<String> getFieldNames(Field f) {\nSerializedName annotation = f.getAnnotation(SerializedName.class);\nif (annotation == null) {\nString name = fieldNamingPolicy.translateName(f);\nreturn Collections.singletonList(name);\n}\n\nString serializedName = annotation.value();\nString[] alternates = annotation.alternate();\nif (alternates.length == 0) {\nreturn Collections.singletonList(serializedName);\n}\n\nList<String> fieldNames = new ArrayList<String>(alternates.length + 1);\nfieldNames.add(serializedName);\nfor (String alternate : alternates) {\nfieldNames.add(alternate);\n}\nreturn fieldNames;\n}",
            "method_id": 13
        },
        {
            "method_signature": "com.google.gson.reflect.TypeToken:getRawType()Ljava/lang/Class;",
            "method_body": "public final Class<? super T> getRawType() {\nreturn rawType;\n}",
            "method_id": 14
        },
        {
            "method_signature": "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField:<init>(Ljava/lang/String;ZZ)V",
            "method_body": "protected BoundField(String name, boolean serialized, boolean deserialized) {\nthis.name = name;\nthis.serialized = serialized;\nthis.deserialized = deserialized;\n}",
            "method_id": 15
        },
        {
            "method_signature": "com.google.gson.stream.JsonWriter:value(Ljava/lang/Number;)Lcom/google/gson/stream/JsonWriter;",
            "method_body": "public JsonWriter value(Number value) throws IOException {\nif (value == null) {\nreturn nullValue();\n}\n\nwriteDeferredName();\nString string = value.toString();\nif (!lenient\n&& (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\nthrow new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n}\nbeforeValue();\nout.append(string);\nreturn this;\n}",
            "method_id": 16
        },
        {
            "method_signature": "com.google.gson.stream.JsonWriter:push(I)V",
            "method_body": "private void push(int newTop) {\nif (stackSize == stack.length) {\nint[] newStack = new int[stackSize * 2];\nSystem.arraycopy(stack, 0, newStack, 0, stackSize);\nstack = newStack;\n}\nstack[stackSize++] = newTop;\n}",
            "method_id": 17
        },
        {
            "method_signature": "com.google.gson.internal.bind.TypeAdapters$26:create(Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;)Lcom/google/gson/TypeAdapter;",
            "method_body": "@Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\nif (typeToken.getRawType() != Timestamp.class) {\nreturn null;\n}\n\nfinal TypeAdapter<Date> dateTypeAdapter = gson.getAdapter(Date.class);\nreturn (TypeAdapter<T>) new TypeAdapter<Timestamp>() {\n@Override public Timestamp read(JsonReader in) throws IOException {\nDate date = dateTypeAdapter.read(in);\nreturn date != null ? new Timestamp(date.getTime()) : null;\n}\n\n@Override public void write(JsonWriter out, Timestamp value) throws IOException {\ndateTypeAdapter.write(out, value);\n}\n};\n}",
            "method_id": 18
        },
        {
            "method_signature": "com.google.gson.Gson:newJsonWriter(Ljava/io/Writer;)Lcom/google/gson/stream/JsonWriter;",
            "method_body": "public JsonWriter newJsonWriter(Writer writer) throws IOException {\nif (generateNonExecutableJson) {\nwriter.write(JSON_NON_EXECUTABLE_PREFIX);\n}\nJsonWriter jsonWriter = new JsonWriter(writer);\nif (prettyPrinting) {\njsonWriter.setIndent(\"  \");\n}\njsonWriter.setSerializeNulls(serializeNulls);\nreturn jsonWriter;\n}",
            "method_id": 19
        },
        {
            "method_signature": "com.google.gson.internal.bind.MapTypeAdapterFactory:<init>(Lcom/google/gson/internal/ConstructorConstructor;Z)V",
            "method_body": "public MapTypeAdapterFactory(ConstructorConstructor constructorConstructor,\nboolean complexMapKeySerialization) {\nthis.constructorConstructor = constructorConstructor;\nthis.complexMapKeySerialization = complexMapKeySerialization;\n}",
            "method_id": 20
        },
        {
            "method_signature": "com.google.gson.internal.bind.TypeAdapters:newTypeHierarchyFactory(Ljava/lang/Class;Lcom/google/gson/TypeAdapter;)Lcom/google/gson/TypeAdapterFactory;",
            "method_body": "public static <T1> TypeAdapterFactory newTypeHierarchyFactory(\nfinal Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {\nreturn new TypeAdapterFactory() {\n@SuppressWarnings(\"unchecked\")\n@Override public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\nfinal Class<? super T2> requestedType = typeToken.getRawType();\nif (!clazz.isAssignableFrom(requestedType)) {\nreturn null;\n}\nreturn (TypeAdapter<T2>) new TypeAdapter<T1>() {\n@Override public void write(JsonWriter out, T1 value) throws IOException {\ntypeAdapter.write(out, value);\n}\n\n@Override public T1 read(JsonReader in) throws IOException {\nT1 result = typeAdapter.read(in);\nif (result != null && !requestedType.isInstance(result)) {\nthrow new JsonSyntaxException(\"Expected a \" + requestedType.getName()\n+ \" but was \" + result.getClass().getName());\n}\nreturn result;\n}\n};\n}\n@Override public String toString() {\nreturn \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\n}\n};\n}",
            "method_id": 21
        },
        {
            "method_signature": "com.google.gson.stream.JsonWriter:isHtmlSafe()Z",
            "method_body": "public final boolean isHtmlSafe() {\nreturn htmlSafe;\n}",
            "method_id": 22
        },
        {
            "method_signature": "com.google.gson.Gson:toJson(Ljava/lang/Object;Ljava/lang/reflect/Type;)Ljava/lang/String;",
            "method_body": "public String toJson(Object src, Type typeOfSrc) {\nStringWriter writer = new StringWriter();\ntoJson(src, typeOfSrc, writer);\nreturn writer.toString();\n}",
            "method_id": 23
        },
        {
            "method_signature": "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1:write(Lcom/google/gson/stream/JsonWriter;Ljava/lang/Object;)V",
            "method_body": "private ReflectiveTypeAdapterFactory.BoundField createBoundField(\nfinal Gson context, final Field field, final String name,\nfinal TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\nfinal boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());\n// special casing primitives here saves ~5% on Android...\nJsonAdapter annotation = field.getAnnotation(JsonAdapter.class);\nTypeAdapter<?> mapped = null;\nif (annotation != null) {\nmapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);\n}\nfinal boolean jsonAdapterPresent = mapped != null;\nif (mapped == null) mapped = context.getAdapter(fieldType);\n\nfinal TypeAdapter<?> typeAdapter = mapped;\nreturn new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) // the type adapter and field type always agree\n@Override void write(JsonWriter writer, Object value)\nthrows IOException, IllegalAccessException {\nObject fieldValue = field.get(value);\nTypeAdapter t =\nnew TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());\nt.write(writer, fieldValue);\n}\n@Override void read(JsonReader reader, Object value)\nthrows IOException, IllegalAccessException {\nObject fieldValue = typeAdapter.read(reader);\nif (fieldValue != null || !isPrimitive) {\nfield.set(value, fieldValue);\n}\n}\n@Override public boolean writeField(Object value) throws IOException, IllegalAccessException {\nif (!serialized) return false;\nObject fieldValue = field.get(value);\nreturn fieldValue != value; // avoid recursion for example for Throwable.cause\n}\n};\n}",
            "method_id": 24
        },
        {
            "method_signature": "com.google.gson.internal.bind.SqlDateTypeAdapter$1:create(Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;)Lcom/google/gson/TypeAdapter;",
            "method_body": "@Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\nreturn typeToken.getRawType() == java.sql.Date.class\n? (TypeAdapter<T>) new SqlDateTypeAdapter() : null;\n}",
            "method_id": 25
        },
        {
            "method_signature": "com.google.gson.internal.bind.ObjectTypeAdapter$1:create(Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;)Lcom/google/gson/TypeAdapter;",
            "method_body": "@Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {\nif (type.getRawType() == Object.class) {\nreturn (TypeAdapter<T>) new ObjectTypeAdapter(gson);\n}\nreturn null;\n}",
            "method_id": 26
        },
        {
            "method_signature": "com.google.gson.internal.Excluder:<init>()V",
            "method_body": "private static final double IGNORE_VERSIONS = -1.0d;\npublic static final Excluder DEFAULT = new Excluder();\nprivate double version = IGNORE_VERSIONS;\nprivate int modifiers = Modifier.TRANSIENT | Modifier.STATIC;\nprivate boolean serializeInnerClasses = true;\nprivate List<ExclusionStrategy> serializationStrategies = Collections.emptyList();\nprivate List<ExclusionStrategy> deserializationStrategies = Collections.emptyList();\n}",
            "method_id": 27
        },
        {
            "method_signature": "com.google.gson.internal.bind.CollectionTypeAdapterFactory:create(Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;)Lcom/google/gson/TypeAdapter;",
            "method_body": "public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\nType type = typeToken.getType();\n\nClass<? super T> rawType = typeToken.getRawType();\nif (!Collection.class.isAssignableFrom(rawType)) {\nreturn null;\n}\n\nType elementType = $Gson$Types.getCollectionElementType(type, rawType);\nTypeAdapter<?> elementTypeAdapter = gson.getAdapter(TypeToken.get(elementType));\nObjectConstructor<T> constructor = constructorConstructor.get(typeToken);\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) // create() doesn't define a type parameter\nTypeAdapter<T> result = new Adapter(gson, elementType, elementTypeAdapter, constructor);\nreturn result;\n}",
            "method_id": 28
        },
        {
            "method_signature": "com.google.gson.stream.JsonWriter:beforeName()V",
            "method_body": "private void beforeName() throws IOException {\nint context = peek();\nif (context == NONEMPTY_OBJECT) { // first in object\nout.write(',');\n} else if (context != EMPTY_OBJECT) { // not in an object!\nthrow new IllegalStateException(\"Nesting problem.\");\n}\nnewline();\nreplaceTop(DANGLING_NAME);\n}",
            "method_id": 29
        },
        {
            "method_signature": "com.google.gson.stream.JsonWriter:getSerializeNulls()Z",
            "method_body": "public final boolean getSerializeNulls() {\nreturn serializeNulls;\n}",
            "method_id": 30
        },
        {
            "method_signature": "com.google.gson.reflect.TypeToken:getType()Ljava/lang/reflect/Type;",
            "method_body": "public final Type getType() {\nreturn type;\n}",
            "method_id": 31
        },
        {
            "method_signature": "com.google.gson.internal.bind.ObjectTypeAdapter:<clinit>()V",
            "method_body": "public static final TypeAdapterFactory FACTORY = new TypeAdapterFactory() {\n@SuppressWarnings(\"unchecked\")\n@Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {\nif (type.getRawType() == Object.class) {\nreturn (TypeAdapter<T>) new ObjectTypeAdapter(gson);\n}\nreturn null;\n}\n};",
            "method_id": 32
        },
        {
            "method_signature": "com.google.gson.reflect.TypeToken:get(Ljava/lang/reflect/Type;)Lcom/google/gson/reflect/TypeToken;",
            "method_body": "public static TypeToken<?> get(Type type) {\nreturn new TypeToken<Object>(type);\n}",
            "method_id": 33
        },
        {
            "method_signature": "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:getBoundFields(Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;Ljava/lang/Class;)Ljava/util/Map;",
            "method_body": "private Map<String, BoundField> getBoundFields(Gson context, TypeToken<?> type, Class<?> raw) {\nMap<String, BoundField> result = new LinkedHashMap<String, BoundField>();\nif (raw.isInterface()) {\nreturn result;\n}\n\nType declaredType = type.getType();\nwhile (raw != Object.class) {\nField[] fields = raw.getDeclaredFields();\nfor (Field field : fields) {\nboolean serialize = excludeField(field, true);\nboolean deserialize = excludeField(field, false);\nif (!serialize && !deserialize) {\ncontinue;\n}\nfield.setAccessible(true);\nType fieldType = $Gson$Types.resolve(type.getType(), raw, field.getGenericType());\nList<String> fieldNames = getFieldNames(field);\nBoundField previous = null;\nfor (int i = 0; i < fieldNames.size(); ++i) {\nString name = fieldNames.get(i);\nif (i != 0) serialize = false; // only serialize the default name\nBoundField boundField = createBoundField(context, field, name,\nTypeToken.get(fieldType), serialize, deserialize);\nBoundField replaced = result.put(name, boundField);\nif (previous == null) previous = replaced;\n}\nif (previous != null) {\nthrow new IllegalArgumentException(declaredType\n+ \" declares multiple JSON fields named \" + previous.name);\n}\n}\ntype = TypeToken.get($Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\nraw = type.getRawType();\n}\nreturn result;\n}",
            "method_id": 34
        },
        {
            "method_signature": "com.google.gson.internal.ConstructorConstructor:newUnsafeAllocator(Ljava/lang/reflect/Type;Ljava/lang/Class;)Lcom/google/gson/internal/ObjectConstructor;",
            "method_body": "private <T> ObjectConstructor<T> newUnsafeAllocator(\nfinal Type type, final Class<? super T> rawType) {\nreturn new ObjectConstructor<T>() {\nprivate final UnsafeAllocator unsafeAllocator = UnsafeAllocator.create();\n@SuppressWarnings(\"unchecked\")\n@Override public T construct() {\ntry {\nObject newInstance = unsafeAllocator.newInstance(rawType);\nreturn (T) newInstance;\n} catch (Exception e) {\nthrow new RuntimeException((\"Unable to invoke no-args constructor for \" + type + \". \"\n+ \"Register an InstanceCreator with Gson for this type may fix this problem.\"), e);\n}\n}\n};\n}",
            "method_id": 35
        },
        {
            "method_signature": "com.google.gson.Gson:atomicLongAdapter(Lcom/google/gson/TypeAdapter;)Lcom/google/gson/TypeAdapter;",
            "method_body": "private static TypeAdapter<AtomicLong> atomicLongAdapter(final TypeAdapter<Number> longAdapter) {\nreturn new TypeAdapter<AtomicLong>() {\n@Override public void write(JsonWriter out, AtomicLong value) throws IOException {\nlongAdapter.write(out, value.get());\n}\n@Override public AtomicLong read(JsonReader in) throws IOException {\nNumber value = longAdapter.read(in);\nreturn new AtomicLong(value.longValue());\n}\n}.nullSafe();\n}",
            "method_id": 36
        },
        {
            "method_signature": "com.google.gson.internal.bind.TypeAdapters:<clinit>()V",
            "method_body": "public static final TypeAdapter<Class> CLASS = new TypeAdapter<Class>() {\n@Override\npublic void write(JsonWriter out, Class value) throws IOException {\nif (value == null) {\nout.nullValue();\n} else {\nthrow new UnsupportedOperationException(\"Attempted to serialize java.lang.Class: \"\n+ value.getName() + \". Forgot to register a type adapter?\");\n}\n}\n@Override\npublic Class read(JsonReader in) throws IOException {\nif (in.peek() == JsonToken.NULL) {\nin.nextNull();\nreturn null;\n} else {\nthrow new UnsupportedOperationException(\n\"Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?\");\n}\n}\n};",
            "method_id": 37
        },
        {
            "method_signature": "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:<init>(Lcom/google/gson/internal/ConstructorConstructor;Lcom/google/gson/FieldNamingStrategy;Lcom/google/gson/internal/Excluder;)V",
            "method_body": "public ReflectiveTypeAdapterFactory(ConstructorConstructor constructorConstructor,\nFieldNamingStrategy fieldNamingPolicy, Excluder excluder) {\nthis.constructorConstructor = constructorConstructor;\nthis.fieldNamingPolicy = fieldNamingPolicy;\nthis.excluder = excluder;\n}",
            "method_id": 38
        },
        {
            "method_signature": "com.google.gson.Gson:<init>()V",
            "method_body": "public Gson() {\nthis(Excluder.DEFAULT, FieldNamingPolicy.IDENTITY,\nCollections.<Type, InstanceCreator<?>>emptyMap(), DEFAULT_SERIALIZE_NULLS,\nDEFAULT_COMPLEX_MAP_KEYS, DEFAULT_JSON_NON_EXECUTABLE, DEFAULT_ESCAPE_HTML,\nDEFAULT_PRETTY_PRINT, DEFAULT_LENIENT, DEFAULT_SPECIALIZE_FLOAT_VALUES,\nLongSerializationPolicy.DEFAULT, Collections.<TypeAdapterFactory>emptyList());\n}",
            "method_id": 39
        },
        {
            "method_signature": "com.google.gson.Gson:<init>(Lcom/google/gson/internal/Excluder;Lcom/google/gson/FieldNamingStrategy;Ljava/util/Map;ZZZZZZZLcom/google/gson/LongSerializationPolicy;Ljava/util/List;)V",
            "method_body": "Gson(final Excluder excluder, final FieldNamingStrategy fieldNamingStrategy,\nfinal Map<Type, InstanceCreator<?>> instanceCreators, boolean serializeNulls,\nboolean complexMapKeySerialization, boolean generateNonExecutableGson, boolean htmlSafe,\nboolean prettyPrinting, boolean lenient, boolean serializeSpecialFloatingPointValues,\nLongSerializationPolicy longSerializationPolicy,\nList<TypeAdapterFactory> typeAdapterFactories) {\nthis.constructorConstructor = new ConstructorConstructor(instanceCreators);\nthis.excluder = excluder;\nthis.fieldNamingStrategy = fieldNamingStrategy;\nthis.serializeNulls = serializeNulls;\nthis.generateNonExecutableJson = generateNonExecutableGson;\nthis.htmlSafe = htmlSafe;\nthis.prettyPrinting = prettyPrinting;\nthis.lenient = lenient;\n\nList<TypeAdapterFactory> factories = new ArrayList<TypeAdapterFactory>();\n\n// built-in type adapters that cannot be overridden\nfactories.add(TypeAdapters.JSON_ELEMENT_FACTORY);\nfactories.add(ObjectTypeAdapter.FACTORY);\n\n// the excluder must precede all adapters that handle user-defined types\nfactories.add(excluder);\n\n// user's type adapters\nfactories.addAll(typeAdapterFactories);\n\n// type adapters for basic platform types\nfactories.add(TypeAdapters.STRING_FACTORY);\nfactories.add(TypeAdapters.INTEGER_FACTORY);\nfactories.add(TypeAdapters.BOOLEAN_FACTORY);\nfactories.add(TypeAdapters.BYTE_FACTORY);\nfactories.add(TypeAdapters.SHORT_FACTORY);\nTypeAdapter<Number> longAdapter = longAdapter(longSerializationPolicy);\nfactories.add(TypeAdapters.newFactory(long.class, Long.class, longAdapter));\nfactories.add(TypeAdapters.newFactory(double.class, Double.class,\ndoubleAdapter(serializeSpecialFloatingPointValues)));\nfactories.add(TypeAdapters.newFactory(float.class, Float.class,\nfloatAdapter(serializeSpecialFloatingPointValues)));\nfactories.add(TypeAdapters.NUMBER_FACTORY);\nfactories.add(TypeAdapters.ATOMIC_INTEGER_FACTORY);\nfactories.add(TypeAdapters.ATOMIC_BOOLEAN_FACTORY);\nfactories.add(TypeAdapters.newFactory(AtomicLong.class, atomicLongAdapter(longAdapter)));\nfactories.add(TypeAdapters.newFactory(AtomicLongArray.class, atomicLongArrayAdapter(longAdapter)));\nfactories.add(TypeAdapters.ATOMIC_INTEGER_ARRAY_FACTORY);\nfactories.add(TypeAdapters.CHARACTER_FACTORY);\nfactories.add(TypeAdapters.STRING_BUILDER_FACTORY);\nfactories.add(TypeAdapters.STRING_BUFFER_FACTORY);\nfactories.add(TypeAdapters.newFactory(BigDecimal.class, TypeAdapters.BIG_DECIMAL));\nfactories.add(TypeAdapters.newFactory(BigInteger.class, TypeAdapters.BIG_INTEGER));\nfactories.add(TypeAdapters.URL_FACTORY);\nfactories.add(TypeAdapters.URI_FACTORY);\nfactories.add(TypeAdapters.UUID_FACTORY);\nfactories.add(TypeAdapters.CURRENCY_FACTORY);\nfactories.add(TypeAdapters.LOCALE_FACTORY);\nfactories.add(TypeAdapters.INET_ADDRESS_FACTORY);\nfactories.add(TypeAdapters.BIT_SET_FACTORY);\nfactories.add(DateTypeAdapter.FACTORY);\nfactories.add(TypeAdapters.CALENDAR_FACTORY);\nfactories.add(TimeTypeAdapter.FACTORY);\nfactories.add(SqlDateTypeAdapter.FACTORY);\nfactories.add(TypeAdapters.TIMESTAMP_FACTORY);\nfactories.add(ArrayTypeAdapter.FACTORY);\nfactories.add(TypeAdapters.CLASS_FACTORY);\n\n// type adapters for composite and user-defined types\nfactories.add(new CollectionTypeAdapterFactory(constructorConstructor));\nfactories.add(new MapTypeAdapterFactory(constructorConstructor, complexMapKeySerialization));\nfactories.add(new JsonAdapterAnnotationTypeAdapterFactory(constructorConstructor));\nfactories.add(TypeAdapters.ENUM_FACTORY);\nfactories.add(new ReflectiveTypeAdapterFactory(\nconstructorConstructor, fieldNamingStrategy, excluder));\n\nthis.factories = Collections.unmodifiableList(factories);\n}",
            "method_id": 40
        },
        {
            "method_signature": "com.google.gson.stream.JsonWriter:close(IILjava/lang/String;)Lcom/google/gson/stream/JsonWriter;",
            "method_body": "private JsonWriter close(int empty, int nonempty, String closeBracket)\nthrows IOException {\nint context = peek();\nif (context != nonempty && context != empty) {\nthrow new IllegalStateException(\"Nesting problem.\");\n}\nif (deferredName != null) {\nthrow new IllegalStateException(\"Dangling name: \" + deferredName);\n}\n\nstackSize--;\nif (context == nonempty) {\nnewline();\n}\nout.write(closeBracket);\nreturn this;\n}",
            "method_id": 41
        },
        {
            "method_signature": "com.google.gson.internal.$Gson$Types:<clinit>()V",
            "method_body": "static final Type[] EMPTY_TYPE_ARRAY = new Type[] {};\nstatic final Type[] EMPTY_TYPE_ARRAY = new Type[] {};",
            "method_id": 42
        },
        {
            "method_signature": "com.google.gson.internal.Primitives:isPrimitive(Ljava/lang/reflect/Type;)Z",
            "method_body": "public static boolean isPrimitive(Type type) {\nreturn PRIMITIVE_TO_WRAPPER_TYPE.containsKey(type);\n}",
            "method_id": 43
        },
        {
            "method_signature": "com.google.gson.Gson:floatAdapter(Z)Lcom/google/gson/TypeAdapter;",
            "method_body": "private TypeAdapter<Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\nif (serializeSpecialFloatingPointValues) {\nreturn TypeAdapters.FLOAT;\n}\nreturn new TypeAdapter<Number>() {\n@Override public Float read(JsonReader in) throws IOException {\nif (in.peek() == JsonToken.NULL) {\nin.nextNull();\nreturn null;\n}\nreturn (float) in.nextDouble();\n}\n@Override public void write(JsonWriter out, Number value) throws IOException {\nif (value == null) {\nout.nullValue();\nreturn;\n}\nfloat floatValue = value.floatValue();\ncheckValidFloatingPoint(floatValue);\nout.value(value);\n}\n};\n}",
            "method_id": 44
        },
        {
            "method_signature": "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:excludeField(Ljava/lang/reflect/Field;Z)Z",
            "method_body": "public boolean excludeField(Field f, boolean serialize) {\nreturn excludeField(f, serialize, excluder);\n}",
            "method_id": 45
        },
        {
            "method_signature": "com.google.gson.internal.bind.TypeAdapters$34:create(Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;)Lcom/google/gson/TypeAdapter;",
            "method_body": "public static <TT> TypeAdapterFactory newFactoryForMultipleTypes(final Class<TT> base,\nfinal Class<? extends TT> sub, final TypeAdapter<? super TT> typeAdapter) {\nreturn new TypeAdapterFactory() {\n@SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n@Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\nClass<? super T> rawType = typeToken.getRawType();\nreturn (rawType == base || rawType == sub) ? (TypeAdapter<T>) typeAdapter : null;\n}\n@Override public String toString() {\nreturn \"Factory[type=\" + base.getName()\n+ \"+\" + sub.getName() + \",adapter=\" + typeAdapter + \"]\";\n}\n};\n}",
            "method_id": 46
        },
        {
            "method_signature": "com.google.gson.FieldNamingPolicy$1:translateName(Ljava/lang/reflect/Field;)Ljava/lang/String;",
            "method_body": "@Override public String translateName(Field f) {\nreturn f.getName();\n}",
            "method_id": 47
        },
        {
            "method_signature": "com.google.gson.stream.JsonWriter:<init>(Ljava/io/Writer;)V",
            "method_body": "public JsonWriter(Writer out) {\nif (out == null) {\nthrow new NullPointerException(\"out == null\");\n}\nthis.out = out;\n}",
            "method_id": 48
        },
        {
            "method_signature": "com.google.gson.stream.JsonWriter:newline()V",
            "method_body": "private void newline() throws IOException {\nif (indent == null) {\nreturn;\n}\n\nout.write(\"\\n\");\nfor (int i = 1, size = stackSize; i < size; i++) {\nout.write(indent);\n}\n}",
            "method_id": 49
        },
        {
            "method_signature": "com.google.gson.Gson:<clinit>()V",
            "method_body": "static final boolean DEFAULT_JSON_NON_EXECUTABLE = false;\nstatic final boolean DEFAULT_LENIENT = false;\nstatic final boolean DEFAULT_PRETTY_PRINT = false;\nstatic final boolean DEFAULT_ESCAPE_HTML = true;\nstatic final boolean DEFAULT_SERIALIZE_NULLS = false;\nstatic final boolean DEFAULT_COMPLEX_MAP_KEYS = false;\nstatic final boolean DEFAULT_SPECIALIZE_FLOAT_VALUES = false;\n\nprivate static final TypeToken<?> NULL_KEY_SURROGATE = new TypeToken<Object>() {};",
            "method_id": 50
        },
        {
            "method_signature": "com.google.gson.stream.JsonWriter:endObject()Lcom/google/gson/stream/JsonWriter;",
            "method_body": "public JsonWriter beginObject() throws IOException {\nwriteDeferredName();\nreturn open(EMPTY_OBJECT, \"{\");\n}\n\n/**\n* Ends encoding the current object.\n*\n* @return this writer.\n*/\npublic JsonWriter endObject() throws IOException {\nreturn close(EMPTY_OBJECT, NONEMPTY_OBJECT, \"}\");\n}",
            "method_id": 51
        },
        {
            "method_signature": "com.google.gson.internal.bind.ArrayTypeAdapter:<clinit>()V",
            "method_body": "public static final TypeAdapterFactory FACTORY = new TypeAdapterFactory() {\n@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n@Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\nType type = typeToken.getType();\nif (!(type instanceof GenericArrayType || type instanceof Class && ((Class<?>) type).isArray())) {\nreturn null;\n}\n\nType componentType = $Gson$Types.getArrayComponentType(type);\nTypeAdapter<?> componentTypeAdapter = gson.getAdapter(TypeToken.get(componentType));\nreturn new ArrayTypeAdapter(\ngson, componentTypeAdapter, $Gson$Types.getRawType(componentType));\n}\n};",
            "method_id": 52
        },
        {
            "method_signature": "com.google.gson.reflect.TypeToken:hashCode()I",
            "method_body": "@Override public final int hashCode() {\nreturn this.hashCode;\n}",
            "method_id": 53
        },
        {
            "method_signature": "com.google.gson.internal.bind.TypeAdapters$12:write(Lcom/google/gson/stream/JsonWriter;Ljava/lang/Number;)V",
            "method_body": "public void write(JsonWriter out, Number value) throws IOException {\nout.value(value);\n}",
            "method_id": 54
        },
        {
            "method_signature": "com.google.gson.stream.JsonWriter:peek()I",
            "method_body": "private int peek() {\nif (stackSize == 0) {\nthrow new IllegalStateException(\"JsonWriter is closed.\");\n}\nreturn stack[stackSize - 1];\n}",
            "method_id": 55
        },
        {
            "method_signature": "com.google.gson.internal.Primitives:<clinit>()V",
            "method_body": "private static final Map<Class<?>, Class<?>> PRIMITIVE_TO_WRAPPER_TYPE;\n\n/** A map from wrapper types to their corresponding primitive types. */\nprivate static final Map<Class<?>, Class<?>> WRAPPER_TO_PRIMITIVE_TYPE;\n\n// Sad that we can't use a BiMap. :(\n\nstatic {\nMap<Class<?>, Class<?>> primToWrap = new HashMap<Class<?>, Class<?>>(16);\nMap<Class<?>, Class<?>> wrapToPrim = new HashMap<Class<?>, Class<?>>(16);\n\nadd(primToWrap, wrapToPrim, boolean.class, Boolean.class);\nadd(primToWrap, wrapToPrim, byte.class, Byte.class);\nadd(primToWrap, wrapToPrim, char.class, Character.class);\nadd(primToWrap, wrapToPrim, double.class, Double.class);\nadd(primToWrap, wrapToPrim, float.class, Float.class);\nadd(primToWrap, wrapToPrim, int.class, Integer.class);\nadd(primToWrap, wrapToPrim, long.class, Long.class);\nadd(primToWrap, wrapToPrim, short.class, Short.class);\nadd(primToWrap, wrapToPrim, void.class, Void.class);\n\nPRIMITIVE_TO_WRAPPER_TYPE = Collections.unmodifiableMap(primToWrap);\nWRAPPER_TO_PRIMITIVE_TYPE = Collections.unmodifiableMap(wrapToPrim);\n}",
            "method_id": 56
        },
        {
            "method_signature": "com.google.gson.internal.bind.TypeAdapters:newFactoryForMultipleTypes(Ljava/lang/Class;Ljava/lang/Class;Lcom/google/gson/TypeAdapter;)Lcom/google/gson/TypeAdapterFactory;",
            "method_body": "public static <TT> TypeAdapterFactory newFactoryForMultipleTypes(final Class<TT> base,\nfinal Class<? extends TT> sub, final TypeAdapter<? super TT> typeAdapter) {\nreturn new TypeAdapterFactory() {\n@SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n@Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\nClass<? super T> rawType = typeToken.getRawType();\nreturn (rawType == base || rawType == sub) ? (TypeAdapter<T>) typeAdapter : null;\n}\n@Override public String toString() {\nreturn \"Factory[type=\" + base.getName()\n+ \"+\" + sub.getName() + \",adapter=\" + typeAdapter + \"]\";\n}\n};\n}",
            "method_id": 57
        },
        {
            "method_signature": "com.google.gson.internal.$Gson$Types:canonicalize(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;",
            "method_body": "public static Type canonicalize(Type type) {\nif (type instanceof Class) {\nClass<?> c = (Class<?>) type;\nreturn c.isArray() ? new GenericArrayTypeImpl(canonicalize(c.getComponentType())) : c;\n\n} else if (type instanceof ParameterizedType) {\nParameterizedType p = (ParameterizedType) type;\nreturn new ParameterizedTypeImpl(p.getOwnerType(),\np.getRawType(), p.getActualTypeArguments());\n\n} else if (type instanceof GenericArrayType) {\nGenericArrayType g = (GenericArrayType) type;\nreturn new GenericArrayTypeImpl(g.getGenericComponentType());\n\n} else if (type instanceof WildcardType) {\nWildcardType w = (WildcardType) type;\nreturn new WildcardTypeImpl(w.getUpperBounds(), w.getLowerBounds());\n\n} else {\n// type is either serializable as-is or unsupported\nreturn type;\n}\n}",
            "method_id": 58
        },
        {
            "method_signature": "com.google.gson.internal.bind.CollectionTypeAdapterFactory:<init>(Lcom/google/gson/internal/ConstructorConstructor;)V",
            "method_body": "public CollectionTypeAdapterFactory(ConstructorConstructor constructorConstructor) {\nthis.constructorConstructor = constructorConstructor;\n}",
            "method_id": 59
        },
        {
            "method_signature": "com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:getRuntimeTypeIfMoreSpecific(Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/reflect/Type;",
            "method_body": "private Type getRuntimeTypeIfMoreSpecific(Type type, Object value) {\nif (value != null\n&& (type == Object.class || type instanceof TypeVariable<?> || type instanceof Class<?>)) {\ntype = value.getClass();\n}\nreturn type;\n}",
            "method_id": 60
        },
        {
            "method_signature": "com.google.gson.reflect.TypeToken:get(Ljava/lang/Class;)Lcom/google/gson/reflect/TypeToken;",
            "method_body": "public static <T> TypeToken<T> get(Class<T> type) {\nreturn new TypeToken<T>(type);\n}",
            "method_id": 61
        },
        {
            "method_signature": "com.google.gson.reflect.TypeToken:<init>()V",
            "method_body": "protected TypeToken() {\nthis.type = getSuperclassTypeParameter(getClass());\nthis.rawType = (Class<? super T>) $Gson$Types.getRawType(type);\nthis.hashCode = type.hashCode();\n}",
            "method_id": 62
        },
        {
            "method_signature": "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:getTypeAdapter(Lcom/google/gson/internal/ConstructorConstructor;Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;Lcom/google/gson/annotations/JsonAdapter;)Lcom/google/gson/TypeAdapter;",
            "method_body": "static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,\nTypeToken<?> fieldType, JsonAdapter annotation) {\nClass<?> value = annotation.value();\nTypeAdapter<?> typeAdapter;\nif (TypeAdapter.class.isAssignableFrom(value)) {\nClass<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;\ntypeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();\n} else if (TypeAdapterFactory.class.isAssignableFrom(value)) {\nClass<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;\ntypeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))\n.construct()\n.create(gson, fieldType);\n} else {\nthrow new IllegalArgumentException(\n\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n}\nif (typeAdapter != null) {\ntypeAdapter = typeAdapter.nullSafe();\n}\nreturn typeAdapter;\n}",
            "method_id": 63
        },
        {
            "method_signature": "com.google.gson.internal.$Gson$Preconditions:checkNotNull(Ljava/lang/Object;)Ljava/lang/Object;",
            "method_body": "public static <T> T checkNotNull(T obj) {\nif (obj == null) {\nthrow new NullPointerException();\n}\nreturn obj;\n}",
            "method_id": 64
        },
        {
            "method_signature": "com.google.gson.Gson:toJson(Ljava/lang/Object;Ljava/lang/reflect/Type;Ljava/lang/Appendable;)V",
            "method_body": "public void toJson(Object src, Type typeOfSrc, Appendable writer) throws JsonIOException {\ntry {\nJsonWriter jsonWriter = newJsonWriter(Streams.writerForAppendable(writer));\ntoJson(src, typeOfSrc, jsonWriter);\n} catch (IOException e) {\nthrow new JsonIOException(e);\n}\n}",
            "method_id": 65
        },
        {
            "method_signature": "com.google.gson.stream.JsonWriter:string(Ljava/lang/String;)V",
            "method_body": "private void string(String value) throws IOException {\nString[] replacements = htmlSafe ? HTML_SAFE_REPLACEMENT_CHARS : REPLACEMENT_CHARS;\nout.write(\"\\\"\");\nint last = 0;\nint length = value.length();\nfor (int i = 0; i < length; i++) {\nchar c = value.charAt(i);\nString replacement;\nif (c < 128) {\nreplacement = replacements[c];\nif (replacement == null) {\ncontinue;\n}\n} else if (c == '\\u2028') {\nreplacement = \"\\\\u2028\";\n} else if (c == '\\u2029') {\nreplacement = \"\\\\u2029\";\n} else {\ncontinue;\n}\nif (last < i) {\nout.write(value, last, i - last);\n}\nout.write(replacement);\nlast = i + 1;\n}\nif (last < length) {\nout.write(value, last, length - last);\n}\nout.write(\"\\\"\");\n}",
            "method_id": 66
        },
        {
            "method_signature": "com.google.gson.internal.bind.DateTypeAdapter$1:create(Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;)Lcom/google/gson/TypeAdapter;",
            "method_body": "@Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\nreturn typeToken.getRawType() == Date.class ? (TypeAdapter<T>) new DateTypeAdapter() : null;\n}",
            "method_id": 67
        },
        {
            "method_signature": "com.google.gson.internal.bind.TypeAdapters:newFactory(Ljava/lang/Class;Lcom/google/gson/TypeAdapter;)Lcom/google/gson/TypeAdapterFactory;",
            "method_body": "public static <TT> TypeAdapterFactory newFactory(\nfinal Class<TT> type, final TypeAdapter<TT> typeAdapter) {\nreturn new TypeAdapterFactory() {\n@SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n@Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\nreturn typeToken.getRawType() == type ? (TypeAdapter<T>) typeAdapter : null;\n}\n@Override public String toString() {\nreturn \"Factory[type=\" + type.getName() + \",adapter=\" + typeAdapter + \"]\";\n}\n};\n}",
            "method_id": 68
        },
        {
            "method_signature": "com.google.gson.stream.JsonWriter:beginObject()Lcom/google/gson/stream/JsonWriter;",
            "method_body": "public JsonWriter beginObject() throws IOException {\nwriteDeferredName();\nreturn open(EMPTY_OBJECT, \"{\");\n}\n\n/**\n* Ends encoding the current object.\n*\n* @return this writer.\n*/\npublic JsonWriter endObject() throws IOException {\nreturn close(EMPTY_OBJECT, NONEMPTY_OBJECT, \"}\");\n}",
            "method_id": 69
        },
        {
            "method_signature": "com.google.gson.internal.bind.TypeAdapters:newFactory(Ljava/lang/Class;Ljava/lang/Class;Lcom/google/gson/TypeAdapter;)Lcom/google/gson/TypeAdapterFactory;",
            "method_body": "public static <TT> TypeAdapterFactory newFactory(\nfinal Class<TT> unboxed, final Class<TT> boxed, final TypeAdapter<? super TT> typeAdapter) {\nreturn new TypeAdapterFactory() {\n@SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n@Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\nClass<? super T> rawType = typeToken.getRawType();\nreturn (rawType == unboxed || rawType == boxed) ? (TypeAdapter<T>) typeAdapter : null;\n}\n@Override public String toString() {\nreturn \"Factory[type=\" + boxed.getName()\n+ \"+\" + unboxed.getName() + \",adapter=\" + typeAdapter + \"]\";\n}\n};\n}",
            "method_id": 70
        },
        {
            "method_signature": "com.google.gson.Gson:longAdapter(Lcom/google/gson/LongSerializationPolicy;)Lcom/google/gson/TypeAdapter;",
            "method_body": "private static TypeAdapter<Number> longAdapter(LongSerializationPolicy longSerializationPolicy) {\nif (longSerializationPolicy == LongSerializationPolicy.DEFAULT) {\nreturn TypeAdapters.LONG;\n}\nreturn new TypeAdapter<Number>() {\n@Override public Number read(JsonReader in) throws IOException {\nif (in.peek() == JsonToken.NULL) {\nin.nextNull();\nreturn null;\n}\nreturn in.nextLong();\n}\n@Override public void write(JsonWriter out, Number value) throws IOException {\nif (value == null) {\nout.nullValue();\nreturn;\n}\nout.value(value.toString());\n}\n};\n}",
            "method_id": 71
        },
        {
            "method_signature": "com.google.gson.stream.JsonWriter:name(Ljava/lang/String;)Lcom/google/gson/stream/JsonWriter;",
            "method_body": "public JsonWriter name(String name) throws IOException {\nif (name == null) {\nthrow new NullPointerException(\"name == null\");\n}\nif (deferredName != null) {\nthrow new IllegalStateException();\n}\nif (stackSize == 0) {\nthrow new IllegalStateException(\"JsonWriter is closed.\");\n}\ndeferredName = name;\nreturn this;\n}",
            "method_id": 72
        },
        {
            "method_signature": "com.google.gson.stream.JsonWriter:replaceTop(I)V",
            "method_body": "private void replaceTop(int topOfStack) {\nstack[stackSize - 1] = topOfStack;\n}",
            "method_id": 73
        },
        {
            "method_signature": "com.google.gson.internal.bind.TimeTypeAdapter:<clinit>()V",
            "method_body": "public static final TypeAdapterFactory FACTORY = new TypeAdapterFactory() {\n@SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n@Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\nreturn typeToken.getRawType() == Time.class ? (TypeAdapter<T>) new TimeTypeAdapter() : null;\n}\n};",
            "method_id": 74
        },
        {
            "method_signature": "com.google.gson.internal.Excluder:<clinit>()V",
            "method_body": "private static final double IGNORE_VERSIONS = -1.0d;\npublic static final Excluder DEFAULT = new Excluder();\n\nprivate double version = IGNORE_VERSIONS;\nprivate int modifiers = Modifier.TRANSIENT | Modifier.STATIC;\nprivate boolean serializeInnerClasses = true;\nprivate boolean requireExpose;\nprivate List<ExclusionStrategy> serializationStrategies = Collections.emptyList();\nprivate List<ExclusionStrategy> deserializationStrategies = Collections.emptyList();\n\n@Override protected Excluder clone() {\ntry {\nreturn (Excluder) super.clone();\n} catch (CloneNotSupportedException e) {\nthrow new AssertionError(e);\n}\n}",
            "method_id": 75
        },
        {
            "method_signature": "com.google.gson.internal.$Gson$Types:getRawType(Ljava/lang/reflect/Type;)Ljava/lang/Class;",
            "method_body": "public static Class<?> getRawType(Type type) {\nif (type instanceof Class<?>) {\n// type is a normal class.\nreturn (Class<?>) type;\n\n} else if (type instanceof ParameterizedType) {\nParameterizedType parameterizedType = (ParameterizedType) type;\n\n// I'm not exactly sure why getRawType() returns Type instead of Class.\n// Neal isn't either but suspects some pathological case related\n// to nested classes exists.\nType rawType = parameterizedType.getRawType();\ncheckArgument(rawType instanceof Class);\nreturn (Class<?>) rawType;\n\n} else if (type instanceof GenericArrayType) {\nType componentType = ((GenericArrayType)type).getGenericComponentType();\nreturn Array.newInstance(getRawType(componentType), 0).getClass();\n\n} else if (type instanceof TypeVariable) {\n// we could use the variable's bounds, but that won't work if there are multiple.\n// having a raw type that's more general than necessary is okay\nreturn Object.class;\n\n} else if (type instanceof WildcardType) {\nreturn getRawType(((WildcardType) type).getUpperBounds()[0]);\n\n} else {\nString className = type == null ? \"null\" : type.getClass().getName();\nthrow new IllegalArgumentException(\"Expected a Class, ParameterizedType, or \"\n+ \"GenericArrayType, but <\" + type + \"> is of type \" + className);\n}\n}",
            "method_id": 76
        },
        {
            "method_signature": "com.google.gson.stream.JsonWriter:setSerializeNulls(Z)V",
            "method_body": "public final void setSerializeNulls(boolean serializeNulls) {\nthis.serializeNulls = serializeNulls;\n}",
            "method_id": 77
        },
        {
            "method_signature": "com.google.gson.internal.ConstructorConstructor:newDefaultImplementationConstructor(Ljava/lang/reflect/Type;Ljava/lang/Class;)Lcom/google/gson/internal/ObjectConstructor;",
            "method_body": "private <T> ObjectConstructor<T> newDefaultImplementationConstructor(\nfinal Type type, Class<? super T> rawType) {\nif (Collection.class.isAssignableFrom(rawType)) {\nif (SortedSet.class.isAssignableFrom(rawType)) {\nreturn new ObjectConstructor<T>() {\n@Override public T construct() {\nreturn (T) new TreeSet<Object>();\n}\n};\n} else if (EnumSet.class.isAssignableFrom(rawType)) {\nreturn new ObjectConstructor<T>() {\n@SuppressWarnings(\"rawtypes\")\n@Override public T construct() {\nif (type instanceof ParameterizedType) {\nType elementType = ((ParameterizedType) type).getActualTypeArguments()[0];\nif (elementType instanceof Class) {\nreturn (T) EnumSet.noneOf((Class)elementType);\n} else {\nthrow new JsonIOException(\"Invalid EnumSet type: \" + type.toString());\n}\n} else {\nthrow new JsonIOException(\"Invalid EnumSet type: \" + type.toString());\n}\n}\n};\n} else if (Set.class.isAssignableFrom(rawType)) {\nreturn new ObjectConstructor<T>() {\n@Override public T construct() {\nreturn (T) new LinkedHashSet<Object>();\n}\n};\n} else if (Queue.class.isAssignableFrom(rawType)) {\nreturn new ObjectConstructor<T>() {\n@Override public T construct() {\nreturn (T) new ArrayDeque<Object>();\n}\n};\n} else {\nreturn new ObjectConstructor<T>() {\n@Override public T construct() {\nreturn (T) new ArrayList<Object>();\n}\n};\n}\n}\n\nif (Map.class.isAssignableFrom(rawType)) {\nif (ConcurrentNavigableMap.class.isAssignableFrom(rawType)) {\nreturn new ObjectConstructor<T>() {\n@Override public T construct() {\nreturn (T) new ConcurrentSkipListMap<Object, Object>();\n}\n};\n} else if (ConcurrentMap.class.isAssignableFrom(rawType)) {\nreturn new ObjectConstructor<T>() {\n@Override public T construct() {\nreturn (T) new ConcurrentHashMap<Object, Object>();\n}\n};\n} else if (SortedMap.class.isAssignableFrom(rawType)) {\nreturn new ObjectConstructor<T>() {\n@Override public T construct() {\nreturn (T) new TreeMap<Object, Object>();\n}\n};\n} else if (type instanceof ParameterizedType && !(String.class.isAssignableFrom(\nTypeToken.get(((ParameterizedType) type).getActualTypeArguments()[0]).getRawType()))) {\nreturn new ObjectConstructor<T>() {\n@Override public T construct() {\nreturn (T) new LinkedHashMap<Object, Object>();\n}\n};\n} else {\nreturn new ObjectConstructor<T>() {\n@Override public T construct() {\nreturn (T) new LinkedTreeMap<String, Object>();\n}\n};\n}\n}\n\nreturn null;\n}",
            "method_id": 78
        },
        {
            "method_signature": "com.google.gson.internal.ConstructorConstructor:newDefaultConstructor(Ljava/lang/Class;)Lcom/google/gson/internal/ObjectConstructor;",
            "method_body": "private <T> ObjectConstructor<T> newDefaultConstructor(Class<? super T> rawType) {\ntry {\nfinal Constructor<? super T> constructor = rawType.getDeclaredConstructor();\nif (!constructor.isAccessible()) {\nconstructor.setAccessible(true);\n}\nreturn new ObjectConstructor<T>() {\n@SuppressWarnings(\"unchecked\") // T is the same raw type as is requested\n@Override public T construct() {\ntry {\nObject[] args = null;\nreturn (T) constructor.newInstance(args);\n} catch (InstantiationException e) {\n// TODO: JsonParseException ?\nthrow new RuntimeException(\"Failed to invoke \" + constructor + \" with no args\", e);\n} catch (InvocationTargetException e) {\n// TODO: don't wrap if cause is unchecked!\n// TODO: JsonParseException ?\nthrow new RuntimeException(\"Failed to invoke \" + constructor + \" with no args\",\ne.getTargetException());\n} catch (IllegalAccessException e) {\nthrow new AssertionError(e);\n}\n}\n};\n} catch (NoSuchMethodException e) {\nreturn null;\n}\n}",
            "method_id": 79
        },
        {
            "method_signature": "com.google.gson.internal.bind.ArrayTypeAdapter$1:create(Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;)Lcom/google/gson/TypeAdapter;",
            "method_body": "@Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\nType type = typeToken.getType();\nif (!(type instanceof GenericArrayType || type instanceof Class && ((Class<?>) type).isArray())) {\nreturn null;\n}\n\nType componentType = $Gson$Types.getArrayComponentType(type);\nTypeAdapter<?> componentTypeAdapter = gson.getAdapter(TypeToken.get(componentType));\nreturn new ArrayTypeAdapter(\ngson, componentTypeAdapter, $Gson$Types.getRawType(componentType));\n}",
            "method_id": 80
        },
        {
            "method_signature": "com.google.gson.internal.Excluder:excludeClass(Ljava/lang/Class;Z)Z",
            "method_body": "public boolean excludeClass(Class<?> clazz, boolean serialize) {\nif (version != Excluder.IGNORE_VERSIONS\n&& !isValidVersion(clazz.getAnnotation(Since.class), clazz.getAnnotation(Until.class))) {\nreturn true;\n}\n\nif (!serializeInnerClasses && isInnerClass(clazz)) {\nreturn true;\n}\n\nif (isAnonymousOrLocal(clazz)) {\nreturn true;\n}\n\nList<ExclusionStrategy> list = serialize ? serializationStrategies : deserializationStrategies;\nfor (ExclusionStrategy exclusionStrategy : list) {\nif (exclusionStrategy.shouldSkipClass(clazz)) {\nreturn true;\n}\n}\n\nreturn false;\n}",
            "method_id": 81
        },
        {
            "method_signature": "com.google.gson.TypeAdapter:nullSafe()Lcom/google/gson/TypeAdapter;",
            "method_body": "public final TypeAdapter<T> nullSafe() {\nreturn new TypeAdapter<T>() {\n@Override public void write(JsonWriter out, T value) throws IOException {\nif (value == null) {\nout.nullValue();\n} else {\nTypeAdapter.this.write(out, value);\n}\n}\n@Override public T read(JsonReader reader) throws IOException {\nif (reader.peek() == JsonToken.NULL) {\nreader.nextNull();\nreturn null;\n}\nreturn TypeAdapter.this.read(reader);\n}\n};\n}",
            "method_id": 82
        },
        {
            "method_signature": "com.google.gson.internal.$Gson$Types:resolve(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;",
            "method_body": "public static Type resolve(Type context, Class<?> contextRawType, Type toResolve) {\n// this implementation is made a little more complicated in an attempt to avoid object-creation\nwhile (true) {\nif (toResolve instanceof TypeVariable) {\nTypeVariable<?> typeVariable = (TypeVariable<?>) toResolve;\ntoResolve = resolveTypeVariable(context, contextRawType, typeVariable);\nif (toResolve == typeVariable) {\nreturn toResolve;\n}\n\n} else if (toResolve instanceof Class && ((Class<?>) toResolve).isArray()) {\nClass<?> original = (Class<?>) toResolve;\nType componentType = original.getComponentType();\nType newComponentType = resolve(context, contextRawType, componentType);\nreturn componentType == newComponentType\n? original\n: arrayOf(newComponentType);\n\n} else if (toResolve instanceof GenericArrayType) {\nGenericArrayType original = (GenericArrayType) toResolve;\nType componentType = original.getGenericComponentType();\nType newComponentType = resolve(context, contextRawType, componentType);\nreturn componentType == newComponentType\n? original\n: arrayOf(newComponentType);\n\n} else if (toResolve instanceof ParameterizedType) {\nParameterizedType original = (ParameterizedType) toResolve;\nType ownerType = original.getOwnerType();\nType newOwnerType = resolve(context, contextRawType, ownerType);\nboolean changed = newOwnerType != ownerType;\n\nType[] args = original.getActualTypeArguments();\nfor (int t = 0, length = args.length; t < length; t++) {\nType resolvedTypeArgument = resolve(context, contextRawType, args[t]);\nif (resolvedTypeArgument != args[t]) {\nif (!changed) {\nargs = args.clone();\nchanged = true;\n}\nargs[t] = resolvedTypeArgument;\n}\n}\n\nreturn changed\n? newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args)\n: original;\n\n} else if (toResolve instanceof WildcardType) {\nWildcardType original = (WildcardType) toResolve;\nType[] originalLowerBound = original.getLowerBounds();\nType[] originalUpperBound = original.getUpperBounds();\n\nif (originalLowerBound.length == 1) {\nType lowerBound = resolve(context, contextRawType, originalLowerBound[0]);\nif (lowerBound != originalLowerBound[0]) {\nreturn supertypeOf(lowerBound);\n}\n} else if (originalUpperBound.length == 1) {\nType upperBound = resolve(context, contextRawType, originalUpperBound[0]);\nif (upperBound != originalUpperBound[0]) {\nreturn subtypeOf(upperBound);\n}\n}\nreturn original;\n\n} else {\nreturn toResolve;\n}\n}\n}",
            "method_id": 83
        },
        {
            "method_signature": "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:excludeField(Ljava/lang/reflect/Field;ZLcom/google/gson/internal/Excluder;)Z",
            "method_body": "static boolean excludeField(Field f, boolean serialize, Excluder excluder) {\nreturn !excluder.excludeClass(f.getType(), serialize) && !excluder.excludeField(f, serialize);\n}",
            "method_id": 84
        },
        {
            "method_signature": "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:create(Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;)Lcom/google/gson/TypeAdapter;",
            "method_body": "@Override public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {\nClass<? super T> raw = type.getRawType();\n\nif (!Object.class.isAssignableFrom(raw)) {\nreturn null; // it's a primitive!\n}\n\nObjectConstructor<T> constructor = constructorConstructor.get(type);\nreturn new Adapter<T>(constructor, getBoundFields(gson, type, raw));\n}",
            "method_id": 85
        },
        {
            "method_signature": "com.google.gson.internal.bind.TypeAdapters$33:create(Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;)Lcom/google/gson/TypeAdapter;",
            "method_body": "public static <TT> TypeAdapterFactory newFactory(\nfinal Class<TT> unboxed, final Class<TT> boxed, final TypeAdapter<? super TT> typeAdapter) {\nreturn new TypeAdapterFactory() {\n@SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n@Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\nClass<? super T> rawType = typeToken.getRawType();\nreturn (rawType == unboxed || rawType == boxed) ? (TypeAdapter<T>) typeAdapter : null;\n}\n@Override public String toString() {\nreturn \"Factory[type=\" + boxed.getName()\n+ \"+\" + unboxed.getName() + \",adapter=\" + typeAdapter + \"]\";\n}\n};\n}",
            "method_id": 86
        },
        {
            "method_signature": "com.google.gson.internal.Streams:writerForAppendable(Ljava/lang/Appendable;)Ljava/io/Writer;",
            "method_body": "public static Writer writerForAppendable(Appendable appendable) {\nreturn appendable instanceof Writer ? (Writer) appendable : new AppendableWriter(appendable);\n}",
            "method_id": 87
        },
        {
            "method_signature": "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:createBoundField(Lcom/google/gson/Gson;Ljava/lang/reflect/Field;Ljava/lang/String;Lcom/google/gson/reflect/TypeToken;ZZ)Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$BoundField;",
            "method_body": "private ReflectiveTypeAdapterFactory.BoundField createBoundField(\nfinal Gson context, final Field field, final String name,\nfinal TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\nfinal boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());\n// special casing primitives here saves ~5% on Android...\nJsonAdapter annotation = field.getAnnotation(JsonAdapter.class);\nTypeAdapter<?> mapped = null;\nif (annotation != null) {\nmapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);\n}\nfinal boolean jsonAdapterPresent = mapped != null;\nif (mapped == null) mapped = context.getAdapter(fieldType);\n\nfinal TypeAdapter<?> typeAdapter = mapped;\nreturn new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) // the type adapter and field type always agree\n@Override void write(JsonWriter writer, Object value)\nthrows IOException, IllegalAccessException {\nObject fieldValue = field.get(value);\nTypeAdapter t =\nnew TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());\nt.write(writer, fieldValue);\n}\n@Override void read(JsonReader reader, Object value)\nthrows IOException, IllegalAccessException {\nObject fieldValue = typeAdapter.read(reader);\nif (fieldValue != null || !isPrimitive) {\nfield.set(value, fieldValue);\n}\n}\n@Override public boolean writeField(Object value) throws IOException, IllegalAccessException {\nif (!serialized) return false;\nObject fieldValue = field.get(value);\nreturn fieldValue != value; // avoid recursion for example for Throwable.cause\n}\n};\n}",
            "method_id": 88
        },
        {
            "method_signature": "com.google.gson.stream.JsonWriter:setLenient(Z)V",
            "method_body": "public final void setLenient(boolean lenient) {\nthis.lenient = lenient;\n}",
            "method_id": 89
        },
        {
            "method_signature": "com.google.gson.stream.JsonWriter:setHtmlSafe(Z)V",
            "method_body": "public final void setHtmlSafe(boolean htmlSafe) {\nthis.htmlSafe = htmlSafe;\n}",
            "method_id": 90
        },
        {
            "method_signature": "com.google.gson.internal.ConstructorConstructor:get(Lcom/google/gson/reflect/TypeToken;)Lcom/google/gson/internal/ObjectConstructor;",
            "method_body": "public <T> ObjectConstructor<T> get(TypeToken<T> typeToken) {\nfinal Type type = typeToken.getType();\nfinal Class<? super T> rawType = typeToken.getRawType();\n\n// first try an instance creator\n\n@SuppressWarnings(\"unchecked\") // types must agree\nfinal InstanceCreator<T> typeCreator = (InstanceCreator<T>) instanceCreators.get(type);\nif (typeCreator != null) {\nreturn new ObjectConstructor<T>() {\n@Override public T construct() {\nreturn typeCreator.createInstance(type);\n}\n};\n}\n\n// Next try raw type match for instance creators\n@SuppressWarnings(\"unchecked\") // types must agree\nfinal InstanceCreator<T> rawTypeCreator =\n(InstanceCreator<T>) instanceCreators.get(rawType);\nif (rawTypeCreator != null) {\nreturn new ObjectConstructor<T>() {\n@Override public T construct() {\nreturn rawTypeCreator.createInstance(type);\n}\n};\n}\n\nObjectConstructor<T> defaultConstructor = newDefaultConstructor(rawType);\nif (defaultConstructor != null) {\nreturn defaultConstructor;\n}\n\nObjectConstructor<T> defaultImplementation = newDefaultImplementationConstructor(type, rawType);\nif (defaultImplementation != null) {\nreturn defaultImplementation;\n}\n\n// finally try unsafe\nreturn newUnsafeAllocator(type, rawType);\n}",
            "method_id": 91
        },
        {
            "method_signature": "com.google.gson.Gson:atomicLongArrayAdapter(Lcom/google/gson/TypeAdapter;)Lcom/google/gson/TypeAdapter;",
            "method_body": "private static TypeAdapter<AtomicLongArray> atomicLongArrayAdapter(final TypeAdapter<Number> longAdapter) {\nreturn new TypeAdapter<AtomicLongArray>() {\n@Override public void write(JsonWriter out, AtomicLongArray value) throws IOException {\nout.beginArray();\nfor (int i = 0, length = value.length(); i < length; i++) {\nlongAdapter.write(out, value.get(i));\n}\nout.endArray();\n}\n@Override public AtomicLongArray read(JsonReader in) throws IOException {\nList<Long> list = new ArrayList<Long>();\nin.beginArray();\nwhile (in.hasNext()) {\nlong value = longAdapter.read(in).longValue();\nlist.add(value);\n}\nin.endArray();\nint length = list.size();\nAtomicLongArray array = new AtomicLongArray(length);\nfor (int i = 0; i < length; ++i) {\narray.set(i, list.get(i));\n}\nreturn array;\n}\n}.nullSafe();\n}",
            "method_id": 92
        },
        {
            "method_signature": "com.google.gson.internal.bind.MapTypeAdapterFactory:create(Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;)Lcom/google/gson/TypeAdapter;",
            "method_body": "@Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\nType type = typeToken.getType();\n\nClass<? super T> rawType = typeToken.getRawType();\nif (!Map.class.isAssignableFrom(rawType)) {\nreturn null;\n}\n\nClass<?> rawTypeOfSrc = $Gson$Types.getRawType(type);\nType[] keyAndValueTypes = $Gson$Types.getMapKeyAndValueTypes(type, rawTypeOfSrc);\nTypeAdapter<?> keyAdapter = getKeyAdapter(gson, keyAndValueTypes[0]);\nTypeAdapter<?> valueAdapter = gson.getAdapter(TypeToken.get(keyAndValueTypes[1]));\nObjectConstructor<T> constructor = constructorConstructor.get(typeToken);\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n// we don't define a type parameter for the key or value types\nTypeAdapter<T> result = new Adapter(gson, keyAndValueTypes[0], keyAdapter,\nkeyAndValueTypes[1], valueAdapter, constructor);\nreturn result;\n}",
            "method_id": 93
        },
        {
            "method_signature": "com.google.gson.internal.ConstructorConstructor$3:construct()Ljava/lang/Object;",
            "method_body": "private <T> ObjectConstructor<T> newDefaultConstructor(Class<? super T> rawType) {\ntry {\nfinal Constructor<? super T> constructor = rawType.getDeclaredConstructor();\nif (!constructor.isAccessible()) {\nconstructor.setAccessible(true);\n}\nreturn new ObjectConstructor<T>() {\n@SuppressWarnings(\"unchecked\") // T is the same raw type as is requested\n@Override public T construct() {\ntry {\nObject[] args = null;\nreturn (T) constructor.newInstance(args);\n} catch (InstantiationException e) {\n// TODO: JsonParseException ?\nthrow new RuntimeException(\"Failed to invoke \" + constructor + \" with no args\", e);\n} catch (InvocationTargetException e) {\n// TODO: don't wrap if cause is unchecked!\n// TODO: JsonParseException ?\nthrow new RuntimeException(\"Failed to invoke \" + constructor + \" with no args\",\ne.getTargetException());\n} catch (IllegalAccessException e) {\nthrow new AssertionError(e);\n}\n}\n};\n} catch (NoSuchMethodException e) {\nreturn null;\n}\n}",
            "method_id": 94
        },
        {
            "method_signature": "com.google.gson.internal.Primitives:add(Ljava/util/Map;Ljava/util/Map;Ljava/lang/Class;Ljava/lang/Class;)V",
            "method_body": "private static void add(Map<Class<?>, Class<?>> forward,\nMap<Class<?>, Class<?>> backward, Class<?> key, Class<?> value) {\nforward.put(key, value);\nbackward.put(value, key);\n}",
            "method_id": 95
        },
        {
            "method_signature": "com.google.gson.Gson:doubleAdapter(Z)Lcom/google/gson/TypeAdapter;",
            "method_body": "private TypeAdapter<Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\nif (serializeSpecialFloatingPointValues) {\nreturn TypeAdapters.DOUBLE;\n}\nreturn new TypeAdapter<Number>() {\n@Override public Double read(JsonReader in) throws IOException {\nif (in.peek() == JsonToken.NULL) {\nin.nextNull();\nreturn null;\n}\nreturn in.nextDouble();\n}\n@Override public void write(JsonWriter out, Number value) throws IOException {\nif (value == null) {\nout.nullValue();\nreturn;\n}\ndouble doubleValue = value.doubleValue();\ncheckValidFloatingPoint(doubleValue);\nout.value(value);\n}\n};\n}",
            "method_id": 96
        },
        {
            "method_signature": "com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:<init>(Lcom/google/gson/Gson;Lcom/google/gson/TypeAdapter;Ljava/lang/reflect/Type;)V",
            "method_body": "TypeAdapterRuntimeTypeWrapper(Gson context, TypeAdapter<T> delegate, Type type) {\nthis.context = context;\nthis.delegate = delegate;\nthis.type = type;\n}",
            "method_id": 97
        },
        {
            "method_signature": "com.google.gson.internal.Excluder:excludeField(Ljava/lang/reflect/Field;Z)Z",
            "method_body": "public boolean excludeField(Field field, boolean serialize) {\nif ((modifiers & field.getModifiers()) != 0) {\nreturn true;\n}\n\nif (version != Excluder.IGNORE_VERSIONS\n&& !isValidVersion(field.getAnnotation(Since.class), field.getAnnotation(Until.class))) {\nreturn true;\n}\n\nif (field.isSynthetic()) {\nreturn true;\n}\n\nif (requireExpose) {\nExpose annotation = field.getAnnotation(Expose.class);\nif (annotation == null || (serialize ? !annotation.serialize() : !annotation.deserialize())) {\nreturn true;\n}\n}\n\nif (!serializeInnerClasses && isInnerClass(field.getType())) {\nreturn true;\n}\n\nif (isAnonymousOrLocal(field.getType())) {\nreturn true;\n}\n\nList<ExclusionStrategy> list = serialize ? serializationStrategies : deserializationStrategies;\nif (!list.isEmpty()) {\nFieldAttributes fieldAttributes = new FieldAttributes(field);\nfor (ExclusionStrategy exclusionStrategy : list) {\nif (exclusionStrategy.shouldSkipField(fieldAttributes)) {\nreturn true;\n}\n}\n}\n\nreturn false;\n}",
            "method_id": 98
        },
        {
            "method_signature": "com.google.gson.reflect.TypeToken:getSuperclassTypeParameter(Ljava/lang/Class;)Ljava/lang/reflect/Type;",
            "method_body": "static Type getSuperclassTypeParameter(Class<?> subclass) {\nType superclass = subclass.getGenericSuperclass();\nif (superclass instanceof Class) {\nthrow new RuntimeException(\"Missing type parameter.\");\n}\nParameterizedType parameterized = (ParameterizedType) superclass;\nreturn $Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n}",
            "method_id": 99
        },
        {
            "method_signature": "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:<init>(Lcom/google/gson/internal/ConstructorConstructor;)V",
            "method_body": "public JsonAdapterAnnotationTypeAdapterFactory(ConstructorConstructor constructorConstructor) {\nthis.constructorConstructor = constructorConstructor;\n}",
            "method_id": 100
        },
        {
            "method_signature": "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:create(Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;)Lcom/google/gson/TypeAdapter;",
            "method_body": "public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> targetType) {\nJsonAdapter annotation = targetType.getRawType().getAnnotation(JsonAdapter.class);\nif (annotation == null) {\nreturn null;\n}\nreturn (TypeAdapter<T>) getTypeAdapter(constructorConstructor, gson, targetType, annotation);\n}",
            "method_id": 101
        },
        {
            "method_signature": "com.google.gson.internal.UnsafeAllocator:create()Lcom/google/gson/internal/UnsafeAllocator;",
            "method_body": "public abstract <T> T newInstance(Class<T> c) throws Exception;\n\npublic static UnsafeAllocator create() {\n// try JVM\n// public class Unsafe {\n//   public Object allocateInstance(Class<?> type);\n// }\ntry {\nClass<?> unsafeClass = Class.forName(\"sun.misc.Unsafe\");\nField f = unsafeClass.getDeclaredField(\"theUnsafe\");\nf.setAccessible(true);\nfinal Object unsafe = f.get(null);\nfinal Method allocateInstance = unsafeClass.getMethod(\"allocateInstance\", Class.class);\nreturn new UnsafeAllocator() {\n@Override\n@SuppressWarnings(\"unchecked\")\npublic <T> T newInstance(Class<T> c) throws Exception {\nassertInstantiable(c);\nreturn (T) allocateInstance.invoke(unsafe, c);\n}\n};\n} catch (Exception ignored) {\n}\n\n// try dalvikvm, post-gingerbread\n// public class ObjectStreamClass {\n//   private static native int getConstructorId(Class<?> c);\n//   private static native Object newInstance(Class<?> instantiationClass, int methodId);\n// }\ntry {\nMethod getConstructorId = ObjectStreamClass.class\n.getDeclaredMethod(\"getConstructorId\", Class.class);\ngetConstructorId.setAccessible(true);\nfinal int constructorId = (Integer) getConstructorId.invoke(null, Object.class);\nfinal Method newInstance = ObjectStreamClass.class\n.getDeclaredMethod(\"newInstance\", Class.class, int.class);\nnewInstance.setAccessible(true);\nreturn new UnsafeAllocator() {\n@Override\n@SuppressWarnings(\"unchecked\")\npublic <T> T newInstance(Class<T> c) throws Exception {\nassertInstantiable(c);\nreturn (T) newInstance.invoke(null, c, constructorId);\n}\n};\n} catch (Exception ignored) {\n}\n\n// try dalvikvm, pre-gingerbread\n// public class ObjectInputStream {\n//   private static native Object newInstance(\n//     Class<?> instantiationClass, Class<?> constructorClass);\n// }\ntry {\nfinal Method newInstance = ObjectInputStream.class\n.getDeclaredMethod(\"newInstance\", Class.class, Class.class);\nnewInstance.setAccessible(true);\nreturn new UnsafeAllocator() {\n@Override\n@SuppressWarnings(\"unchecked\")\npublic <T> T newInstance(Class<T> c) throws Exception {\nassertInstantiable(c);\nreturn (T) newInstance.invoke(null, c, Object.class);\n}\n};\n} catch (Exception ignored) {\n}\n\n// give up\nreturn new UnsafeAllocator() {\n@Override\npublic <T> T newInstance(Class<T> c) {\nthrow new UnsupportedOperationException(\"Cannot allocate \" + c);\n}\n};\n}",
            "method_id": 102
        },
        {
            "method_signature": "com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:write(Lcom/google/gson/stream/JsonWriter;Ljava/lang/Object;)V",
            "method_body": "public void write(JsonWriter out, T value) throws IOException {\n// Order of preference for choosing type adapters\n// First preference: a type adapter registered for the runtime type\n// Second preference: a type adapter registered for the declared type\n// Third preference: reflective type adapter for the runtime type (if it is a sub class of the declared type)\n// Fourth preference: reflective type adapter for the declared type\n\nTypeAdapter chosen = delegate;\nType runtimeType = getRuntimeTypeIfMoreSpecific(type, value);\nif (runtimeType != type) {\nTypeAdapter runtimeTypeAdapter = context.getAdapter(TypeToken.get(runtimeType));\nif (!(runtimeTypeAdapter instanceof ReflectiveTypeAdapterFactory.Adapter)) {\n// The user registered a type adapter for the runtime type, so we will use that\nchosen = runtimeTypeAdapter;\n} else if (!(delegate instanceof ReflectiveTypeAdapterFactory.Adapter)) {\n// The user registered a type adapter for Base class, so we prefer it over the\n// reflective type adapter for the runtime type\nchosen = delegate;\n} else {\n// Use the type adapter for runtime type\nchosen = runtimeTypeAdapter;\n}\n}\nchosen.write(out, value);\n}",
            "method_id": 103
        },
        {
            "method_signature": "com.google.gson.internal.Excluder:isAnonymousOrLocal(Ljava/lang/Class;)Z",
            "method_body": "private boolean isAnonymousOrLocal(Class<?> clazz) {\nreturn !Enum.class.isAssignableFrom(clazz)\n&& (clazz.isAnonymousClass() || clazz.isLocalClass());\n}",
            "method_id": 104
        },
        {
            "method_signature": "com.google.gson.Gson$FutureTypeAdapter:setDelegate(Lcom/google/gson/TypeAdapter;)V",
            "method_body": "public void setDelegate(TypeAdapter<T> typeAdapter) {\nif (delegate != null) {\nthrow new AssertionError();\n}\ndelegate = typeAdapter;\n}",
            "method_id": 105
        },
        {
            "method_signature": "com.google.gson.stream.JsonWriter:isLenient()Z",
            "method_body": "public boolean isLenient() {\nreturn lenient;\n}",
            "method_id": 106
        },
        {
            "method_signature": "com.google.gson.internal.bind.SqlDateTypeAdapter:<clinit>()V",
            "method_body": "public static final TypeAdapterFactory FACTORY = new TypeAdapterFactory() {\n@SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n@Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\nreturn typeToken.getRawType() == java.sql.Date.class\n? (TypeAdapter<T>) new SqlDateTypeAdapter() : null;\n}\n};",
            "method_id": 107
        },
        {
            "method_signature": "com.google.gson.reflect.TypeToken:<init>(Ljava/lang/reflect/Type;)V",
            "method_body": "TypeToken(Type type) {\nthis.type = $Gson$Types.canonicalize($Gson$Preconditions.checkNotNull(type));\nthis.rawType = (Class<? super T>) $Gson$Types.getRawType(this.type);\nthis.hashCode = this.type.hashCode();\n}",
            "method_id": 108
        },
        {
            "method_signature": "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter:<init>(Lcom/google/gson/internal/ObjectConstructor;Ljava/util/Map;)V",
            "method_body": "abstract boolean writeField(Object value) throws IOException, IllegalAccessException;\nabstract void write(JsonWriter writer, Object value) throws IOException, IllegalAccessException;\nabstract void read(JsonReader reader, Object value) throws IOException, IllegalAccessException;\n}\n\npublic static final class Adapter<T> extends TypeAdapter<T> {\nprivate final ObjectConstructor<T> constructor;\nprivate final Map<String, BoundField> boundFields;\n\nAdapter(ObjectConstructor<T> constructor, Map<String, BoundField> boundFields) {\nthis.constructor = constructor;\nthis.boundFields = boundFields;\n}\n\n@Override public T read(JsonReader in) throws IOException {\nif (in.peek() == JsonToken.NULL) {\nin.nextNull();\nreturn null;\n}\n\nT instance = constructor.construct();\n\ntry {\nin.beginObject();\nwhile (in.hasNext()) {\nString name = in.nextName();\nBoundField field = boundFields.get(name);\nif (field == null || !field.deserialized) {\nin.skipValue();\n} else {\nfield.read(in, instance);\n}\n}\n} catch (IllegalStateException e) {\nthrow new JsonSyntaxException(e);\n} catch (IllegalAccessException e) {\nthrow new AssertionError(e);\n}\nin.endObject();\nreturn instance;\n}\n\n@Override public void write(JsonWriter out, T value) throws IOException {\nif (value == null) {\nout.nullValue();\nreturn;\n}\n\nout.beginObject();\ntry {\nfor (BoundField boundField : boundFields.values()) {\nif (boundField.writeField(value)) {\nout.name(boundField.name);\nboundField.write(out, value);\n}\n}\n} catch (IllegalAccessException e) {\nthrow new AssertionError(e);\n}\nout.endObject();\n}\n}",
            "method_id": 109
        },
        {
            "method_signature": "com.google.gson.stream.JsonWriter:open(ILjava/lang/String;)Lcom/google/gson/stream/JsonWriter;",
            "method_body": "private JsonWriter open(int empty, String openBracket) throws IOException {\nbeforeValue();\npush(empty);\nout.write(openBracket);\nreturn this;\n}",
            "method_id": 110
        },
        {
            "method_signature": "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter:write(Lcom/google/gson/stream/JsonWriter;Ljava/lang/Object;)V",
            "method_body": "abstract boolean writeField(Object value) throws IOException, IllegalAccessException;\nabstract void write(JsonWriter writer, Object value) throws IOException, IllegalAccessException;\nabstract void read(JsonReader reader, Object value) throws IOException, IllegalAccessException;\n}\n\npublic static final class Adapter<T> extends TypeAdapter<T> {\nprivate final ObjectConstructor<T> constructor;\nprivate final Map<String, BoundField> boundFields;\n\nAdapter(ObjectConstructor<T> constructor, Map<String, BoundField> boundFields) {\nthis.constructor = constructor;\nthis.boundFields = boundFields;\n}\n\n@Override public T read(JsonReader in) throws IOException {\nif (in.peek() == JsonToken.NULL) {\nin.nextNull();\nreturn null;\n}\n\nT instance = constructor.construct();\n\ntry {\nin.beginObject();\nwhile (in.hasNext()) {\nString name = in.nextName();\nBoundField field = boundFields.get(name);\nif (field == null || !field.deserialized) {\nin.skipValue();\n} else {\nfield.read(in, instance);\n}\n}\n} catch (IllegalStateException e) {\nthrow new JsonSyntaxException(e);\n} catch (IllegalAccessException e) {\nthrow new AssertionError(e);\n}\nin.endObject();\nreturn instance;\n}\n\n@Override public void write(JsonWriter out, T value) throws IOException {\nif (value == null) {\nout.nullValue();\nreturn;\n}\n\nout.beginObject();\ntry {\nfor (BoundField boundField : boundFields.values()) {\nif (boundField.writeField(value)) {\nout.name(boundField.name);\nboundField.write(out, value);\n}\n}\n} catch (IllegalAccessException e) {\nthrow new AssertionError(e);\n}\nout.endObject();\n}\n}",
            "method_id": 111
        },
        {
            "method_signature": "com.google.gson.internal.ConstructorConstructor:<init>(Ljava/util/Map;)V",
            "method_body": "public ConstructorConstructor(Map<Type, InstanceCreator<?>> instanceCreators) {\nthis.instanceCreators = instanceCreators;\n}",
            "method_id": 112
        }
    ]
}
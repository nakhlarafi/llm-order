{
    "bug_id": 5,
    "test_id": 0,
    "test_name": "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE",
    "test_body": "public void testCodec98NPE() throws Exception {\nbyte[] codec98 = StringUtils.getBytesUtf8(Base64TestData.CODEC_98_NPE);\nByteArrayInputStream data = new ByteArrayInputStream(codec98);\nBase64InputStream stream = new Base64InputStream(data);\n// This line causes an NPE in commons-codec-1.4.jar:\nbyte[] decodedBytes = Base64TestData.streamToBytes(stream, new byte[1024]);\nString decoded = StringUtils.newStringUtf8(decodedBytes);\nassertEquals(\n\"codec-98 NPE Base64InputStream\", Base64TestData.CODEC_98_NPE_DECODED, decoded\n);\n}\n",
    "stack_trace": "java.lang.NullPointerException\nat org.apache.commons.codec.binary.Base64.decode(Base64.java:594)\nat org.apache.commons.codec.binary.Base64InputStream.read(Base64InputStream.java:159)\nat org.apache.commons.codec.binary.Base64TestData.fill(Base64TestData.java:177)\nat org.apache.commons.codec.binary.Base64TestData.streamToBytes(Base64TestData.java:148)\nat org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE(Base64InputStreamTest.java:61)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:containsBase64Byte([B)Z",
            "method_body": "private static boolean containsBase64Byte(byte[] arrayOctet) {\nfor (int i = 0; i < arrayOctet.length; i++) {\nif (isBase64(arrayOctet[i])) {\nreturn true;\n}\n}\nreturn false;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:isBase64(B)Z",
            "method_body": "public static boolean isBase64(byte octet) {\nreturn octet == PAD || (octet >= 0 && octet < DECODE_TABLE.length && DECODE_TABLE[octet] != -1);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.codec.binary.StringUtils:getBytesUnchecked(Ljava/lang/String;Ljava/lang/String;)[B",
            "method_body": "public static byte[] getBytesUnchecked(String string, String charsetName) {\nif (string == null) {\nreturn null;\n}\ntry {\nreturn string.getBytes(charsetName);\n} catch (UnsupportedEncodingException e) {\nthrow StringUtils.newIllegalStateException(charsetName, e);\n}\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64InputStream:<init>(Ljava/io/InputStream;ZI[B)V",
            "method_body": "private final boolean doEncode;\nprivate final byte[] singleByte = new byte[1];\nthis(in, false);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.codec.binary.StringUtils:getBytesUtf8(Ljava/lang/String;)[B",
            "method_body": "public static byte[] getBytesUtf8(String string) {\nreturn StringUtils.getBytesUnchecked(string, CharEncoding.UTF_8);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:<init>(I[BZ)V",
            "method_body": "public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {\nif (lineSeparator == null) {\nlineLength = 0;  // disable chunk-separating\nlineSeparator = CHUNK_SEPARATOR;  // this just gets ignored\n}\nthis.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;\nthis.lineSeparator = new byte[lineSeparator.length];\nSystem.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);\nif (lineLength > 0) {\nthis.encodeSize = 4 + lineSeparator.length;\n} else {\nthis.encodeSize = 4;\n}\nthis.decodeSize = this.encodeSize - 1;\nif (containsBase64Byte(lineSeparator)) {\nString sep = StringUtils.newStringUtf8(lineSeparator);\nthrow new IllegalArgumentException(\"lineSeperator must not contain base64 characters: [\" + sep + \"]\");\n}\nthis.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:decode([BII)V",
            "method_body": "void decode(byte[] in, int inPos, int inAvail) {\nif (eof) {\nreturn;\n}\nif (inAvail < 0) {\neof = true;\n}\nfor (int i = 0; i < inAvail; i++) {\nif (buffer == null || buffer.length - pos < decodeSize) {\nresizeBuffer();\n}\nbyte b = in[inPos++];\nif (b == PAD) {\n// We're done.\neof = true;\nbreak;\n} else {\nif (b >= 0 && b < DECODE_TABLE.length) {\nint result = DECODE_TABLE[b];\nif (result >= 0) {\nmodulus = (++modulus) % 4;\nx = (x << 6) + result;\nif (modulus == 0) {\nbuffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\nbuffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\nbuffer[pos++] = (byte) (x & MASK_8BITS);\n}\n}\n}\n}\n}\n\n// Two forms of EOF as far as base64 decoder is concerned: actual\n// EOF (-1) and first time '=' character is encountered in stream.\n// This approach makes the '=' padding characters completely optional.\nif (eof && modulus != 0) {\n\nx = x << 6;\nswitch (modulus) {\ncase 2 :\nx = x << 6;\nbuffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\nbreak;\ncase 3 :\nbuffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\nbuffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\nbreak;\n}\n}\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:<clinit>()V",
            "method_body": "public static final int PEM_CHUNK_SIZE = 64;\n\n/**\n* Chunk separator per RFC 2045 section 2.1.\n*\n* <p>\n* N.B. The next major release may break compatibility and make this field private.\n* </p>\n*\n* @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045 section 2.1</a>\n*/\nstatic final byte[] CHUNK_SEPARATOR = {'\\r', '\\n'};",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:avail()I",
            "method_body": "int avail() {\nreturn buffer != null ? pos - readPos : 0;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64InputStream:read([BII)I",
            "method_body": "public int read(byte b[], int offset, int len) throws IOException {\nif (b == null) {\nthrow new NullPointerException();\n} else if (offset < 0 || len < 0) {\nthrow new IndexOutOfBoundsException();\n} else if (offset > b.length || offset + len > b.length) {\nthrow new IndexOutOfBoundsException();\n} else if (len == 0) {\nreturn 0;\n} else {\nif (!base64.hasData()) {\nbyte[] buf = new byte[doEncode ? 4096 : 8192];\nint c = in.read(buf);\n// A little optimization to avoid System.arraycopy()\n// when possible.\nif (c > 0 && b.length == len) {\nbase64.setInitialBuffer(b, offset, len);\n}\nif (doEncode) {\nbase64.encode(buf, 0, c);\n} else {\nbase64.decode(buf, 0, c);\n}\n}\nreturn base64.readResults(b, offset, len);\n}\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:setInitialBuffer([BII)V",
            "method_body": "void setInitialBuffer(byte[] out, int outPos, int outAvail) {\n// We can re-use consumer's original output array under\n// special circumstances, saving on some System.arraycopy().\nif (out != null && out.length == outAvail) {\nbuffer = out;\npos = outPos;\nreadPos = outPos;\n}\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64InputStream:<init>(Ljava/io/InputStream;)V",
            "method_body": "public Base64InputStream(InputStream in) {\nthis(in, false);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:readResults([BII)I",
            "method_body": "int readResults(byte[] b, int bPos, int bAvail) {\nif (buffer != null) {\nint len = Math.min(avail(), bAvail);\nif (buffer != b) {\nSystem.arraycopy(buffer, readPos, b, bPos, len);\nreadPos += len;\nif (readPos >= pos) {\nbuffer = null;\n}\n} else {\n// Re-using the original consumer's output array is only\n// allowed for one round.\nbuffer = null;\n}\nreturn len;\n}\nreturn eof ? -1 : 0;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:hasData()Z",
            "method_body": "boolean hasData() {\nreturn this.buffer != null;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:<init>(Z)V",
            "method_body": "public Base64(boolean urlSafe) {\nthis(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64InputStream:<init>(Ljava/io/InputStream;Z)V",
            "method_body": "public Base64InputStream(InputStream in, boolean doEncode) {\nsuper(in);\nthis.doEncode = doEncode;\nthis.base64 = new Base64(false);\n}",
            "method_id": 15
        }
    ]
}
{
    "bug_id": 13,
    "test_id": 0,
    "test_name": "org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic",
    "test_body": "public void testIsDoubleMetaphoneEqualBasic() {\nfinal String[][] testFixture = new String[][] { { \n\"\", \"\" }, {\n\"Case\", \"case\" }, {\n\"CASE\", \"Case\" }, {\n\"caSe\", \"cAsE\" }, {\n\"cookie\", \"quick\" }, {\n\"quick\", \"cookie\" }, {\n\"Brian\", \"Bryan\" }, {\n\"Auto\", \"Otto\" }, {\n\"Steven\", \"Stefan\" }, {\n\"Philipowitz\", \"Filipowicz\" }\n};\ndoubleMetaphoneEqualTest(testFixture, false);\ndoubleMetaphoneEqualTest(testFixture, true);\n}\n",
    "stack_trace": "java.lang.NullPointerException\nat org.apache.commons.codec.language.DoubleMetaphone.isDoubleMetaphoneEqual(DoubleMetaphone.java:244)\nat org.apache.commons.codec.language.DoubleMetaphoneTest.doubleMetaphoneEqualTest(DoubleMetaphoneTest.java:1039)\nat org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic(DoubleMetaphoneTest.java:1136)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:<init>()V",
            "method_body": "public DoubleMetaphone() {\nsuper();\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:<clinit>()V",
            "method_body": "private static final String VOWELS = \"AEIOUY\";\n\n/**\n* Prefixes when present which are not pronounced\n*/\nprivate static final String[] SILENT_START =\n{ \"GN\", \"KN\", \"PN\", \"WR\", \"PS\" };",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:isDoubleMetaphoneEqual(Ljava/lang/String;Ljava/lang/String;Z)Z",
            "method_body": "public boolean isDoubleMetaphoneEqual(final String value1, final String value2, final boolean alternate) {\nreturn doubleMetaphone(value1, alternate).equals(doubleMetaphone(value2, alternate));\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:doubleMetaphone(Ljava/lang/String;Z)Ljava/lang/String;",
            "method_body": "public String doubleMetaphone(String value, final boolean alternate) {\nvalue = cleanInput(value);\nif (value == null) {\nreturn null;\n}\n\nfinal boolean slavoGermanic = isSlavoGermanic(value);\nint index = isSilentStart(value) ? 1 : 0;\n\nfinal DoubleMetaphoneResult result = new DoubleMetaphoneResult(this.getMaxCodeLen());\n\nwhile (!result.isComplete() && index <= value.length() - 1) {\nswitch (value.charAt(index)) {\ncase 'A':\ncase 'E':\ncase 'I':\ncase 'O':\ncase 'U':\ncase 'Y':\nindex = handleAEIOUY(result, index);\nbreak;\ncase 'B':\nresult.append('P');\nindex = charAt(value, index + 1) == 'B' ? index + 2 : index + 1;\nbreak;\ncase '\\u00C7':\n// A C with a Cedilla\nresult.append('S');\nindex++;\nbreak;\ncase 'C':\nindex = handleC(value, result, index);\nbreak;\ncase 'D':\nindex = handleD(value, result, index);\nbreak;\ncase 'F':\nresult.append('F');\nindex = charAt(value, index + 1) == 'F' ? index + 2 : index + 1;\nbreak;\ncase 'G':\nindex = handleG(value, result, index, slavoGermanic);\nbreak;\ncase 'H':\nindex = handleH(value, result, index);\nbreak;\ncase 'J':\nindex = handleJ(value, result, index, slavoGermanic);\nbreak;\ncase 'K':\nresult.append('K');\nindex = charAt(value, index + 1) == 'K' ? index + 2 : index + 1;\nbreak;\ncase 'L':\nindex = handleL(value, result, index);\nbreak;\ncase 'M':\nresult.append('M');\nindex = conditionM0(value, index) ? index + 2 : index + 1;\nbreak;\ncase 'N':\nresult.append('N');\nindex = charAt(value, index + 1) == 'N' ? index + 2 : index + 1;\nbreak;\ncase '\\u00D1':\n// N with a tilde (spanish ene)\nresult.append('N');\nindex++;\nbreak;\ncase 'P':\nindex = handleP(value, result, index);\nbreak;\ncase 'Q':\nresult.append('K');\nindex = charAt(value, index + 1) == 'Q' ? index + 2 : index + 1;\nbreak;\ncase 'R':\nindex = handleR(value, result, index, slavoGermanic);\nbreak;\ncase 'S':\nindex = handleS(value, result, index, slavoGermanic);\nbreak;\ncase 'T':\nindex = handleT(value, result, index);\nbreak;\ncase 'V':\nresult.append('F');\nindex = charAt(value, index + 1) == 'V' ? index + 2 : index + 1;\nbreak;\ncase 'W':\nindex = handleW(value, result, index);\nbreak;\ncase 'X':\nindex = handleX(value, result, index);\nbreak;\ncase 'Z':\nindex = handleZ(value, result, index, slavoGermanic);\nbreak;\ndefault:\nindex++;\nbreak;\n}\n}\n\nreturn alternate ? result.getAlternate() : result.getPrimary();\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:cleanInput(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "private String cleanInput(String input) {\nif (input == null) {\nreturn null;\n}\ninput = input.trim();\nif (input.length() == 0) {\nreturn null;\n}\nreturn input.toUpperCase(java.util.Locale.ENGLISH);\n}",
            "method_id": 4
        }
    ]
}
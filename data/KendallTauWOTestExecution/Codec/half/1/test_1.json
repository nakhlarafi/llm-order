{
    "bug_id": 1,
    "test_id": 1,
    "test_name": "org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence",
    "test_body": null,
    "stack_trace": "junit.framework.ComparisonFailure: tr:  expected:<[I]> but was:<[\u0130]>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.TestCase.assertEquals(TestCase.java:261)\nat org.apache.commons.codec.StringEncoderAbstractTest.testLocaleIndependence(StringEncoderAbstractTest.java:91)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.codec.language.Metaphone:encode(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String encode(String pString) {\nreturn metaphone(pString);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:<init>()V",
            "method_body": "public DoubleMetaphone() {\nsuper();\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.codec.language.Metaphone:metaphone(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String metaphone(String txt) {\nboolean hard = false ;\nif ((txt == null) || (txt.length() == 0)) {\nreturn \"\" ;\n}\n// single character is itself\nif (txt.length() == 1) {\nreturn txt.toUpperCase() ;\n}\n\nchar[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n\nStringBuffer local = new StringBuffer(40); // manipulate\nStringBuffer code = new StringBuffer(10) ; //   output\n// handle initial 2 characters exceptions\nswitch(inwd[0]) {\ncase 'K' :\ncase 'G' :\ncase 'P' : /* looking for KN, etc*/\nif (inwd[1] == 'N') {\nlocal.append(inwd, 1, inwd.length - 1);\n} else {\nlocal.append(inwd);\n}\nbreak;\ncase 'A': /* looking for AE */\nif (inwd[1] == 'E') {\nlocal.append(inwd, 1, inwd.length - 1);\n} else {\nlocal.append(inwd);\n}\nbreak;\ncase 'W' : /* looking for WR or WH */\nif (inwd[1] == 'R') {   // WR -> R\nlocal.append(inwd, 1, inwd.length - 1);\nbreak ;\n}\nif (inwd[1] == 'H') {\nlocal.append(inwd, 1, inwd.length - 1);\nlocal.setCharAt(0, 'W'); // WH -> W\n} else {\nlocal.append(inwd);\n}\nbreak;\ncase 'X' : /* initial X becomes S */\ninwd[0] = 'S';\nlocal.append(inwd);\nbreak ;\ndefault :\nlocal.append(inwd);\n} // now local has working string with initials fixed\n\nint wdsz = local.length();\nint n = 0 ;\n\nwhile ((code.length() < this.getMaxCodeLen()) &&\n(n < wdsz) ) { // max code size of 4 works well\nchar symb = local.charAt(n) ;\n// remove duplicate letters except C\nif ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\nn++ ;\n} else { // not dup\nswitch(symb) {\ncase 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\nif (n == 0) {\ncode.append(symb);\n}\nbreak ; // only use vowel if leading char\ncase 'B' :\nif ( isPreviousChar(local, n, 'M') &&\nisLastChar(wdsz, n) ) { // B is silent if word ends in MB\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C' : // lots of C special cases\n/* discard if SCI, SCE or SCY */\nif ( isPreviousChar(local, n, 'S') &&\n!isLastChar(wdsz, n) &&\n(FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) {\nbreak;\n}\nif (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz, n) &&\n(FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\ncode.append('S');\nbreak; // CI,CE,CY -> S\n}\nif (isPreviousChar(local, n, 'S') &&\nisNextChar(local, n, 'H') ) { // SCH->sk\ncode.append('K') ;\nbreak ;\n}\nif (isNextChar(local, n, 'H')) { // detect CH\nif ((n == 0) &&\n(wdsz >= 3) &&\nisVowel(local,2) ) { // CH consonant -> K consonant\ncode.append('K');\n} else {\ncode.append('X'); // CHvowel -> X\n}\n} else {\ncode.append('K');\n}\nbreak ;\ncase 'D' :\nif (!isLastChar(wdsz, n + 1) &&\nisNextChar(local, n, 'G') &&\n(FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J\ncode.append('J'); n += 2 ;\n} else {\ncode.append('T');\n}\nbreak ;\ncase 'G' : // GH silent at end or before consonant\nif (isLastChar(wdsz, n + 1) &&\nisNextChar(local, n, 'H')) {\nbreak;\n}\nif (!isLastChar(wdsz, n + 1) &&\nisNextChar(local,n,'H') &&\n!isVowel(local,n+2)) {\nbreak;\n}\nif ((n > 0) &&\n( regionMatch(local, n, \"GN\") ||\nregionMatch(local, n, \"GNED\") ) ) {\nbreak; // silent G\n}\nif (isPreviousChar(local, n, 'G')) {\nhard = true ;\n} else {\nhard = false ;\n}\nif (!isLastChar(wdsz, n) &&\n(FRONTV.indexOf(local.charAt(n + 1)) >= 0) &&\n(!hard)) {\ncode.append('J');\n} else {\ncode.append('K');\n}\nbreak ;\ncase 'H':\nif (isLastChar(wdsz, n)) {\nbreak ; // terminal H\n}\nif ((n > 0) &&\n(VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\nbreak;\n}\nif (isVowel(local,n+1)) {\ncode.append('H'); // Hvowel\n}\nbreak;\ncase 'F':\ncase 'J' :\ncase 'L' :\ncase 'M':\ncase 'N' :\ncase 'R' :\ncode.append(symb);\nbreak;\ncase 'K' :\nif (n > 0) { // not initial\nif (!isPreviousChar(local, n, 'C')) {\ncode.append(symb);\n}\n} else {\ncode.append(symb); // initial K\n}\nbreak ;\ncase 'P' :\nif (isNextChar(local,n,'H')) {\n// PH -> F\ncode.append('F');\n} else {\ncode.append(symb);\n}\nbreak ;\ncase 'Q' :\ncode.append('K');\nbreak;\ncase 'S' :\nif (regionMatch(local,n,\"SH\") ||\nregionMatch(local,n,\"SIO\") ||\nregionMatch(local,n,\"SIA\")) {\ncode.append('X');\n} else {\ncode.append('S');\n}\nbreak;\ncase 'T' :\nif (regionMatch(local,n,\"TIA\") ||\nregionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\n// Silent if in \"TCH\"\nbreak;\n}\n// substitute numeral 0 for TH (resembles theta after all)\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n} else {\ncode.append('T');\n}\nbreak ;\ncase 'V' :\ncode.append('F'); break ;\ncase 'W' : case 'Y' : // silent if not followed by vowel\nif (!isLastChar(wdsz,n) &&\nisVowel(local,n+1)) {\ncode.append(symb);\n}\nbreak ;\ncase 'X' :\ncode.append('K'); code.append('S');\nbreak ;\ncase 'Z' :\ncode.append('S'); break ;\n} // end switch\nn++ ;\n} // end else from symb != 'C'\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\nreturn code.toString();\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.codec.language.DoubleMetaphone:<clinit>()V",
            "method_body": "private static final String VOWELS = \"AEIOUY\";\n\n/**\n* Prefixes when present which are not pronounced\n*/\nprivate static final String[] SILENT_START =\n{ \"GN\", \"KN\", \"PN\", \"WR\", \"PS\" };",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.codec.language.Metaphone:<init>()V",
            "method_body": "public Metaphone() {\nsuper();\n}",
            "method_id": 4
        }
    ]
}
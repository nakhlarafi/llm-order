{
    "bug_id": 60,
    "test_id": 0,
    "test_name": "org.jsoup.select.QueryParserTest.testParsesSingleQuoteInContains",
    "test_body": "@Test(expected = Selector.SelectorParseException.class)  public void testParsesSingleQuoteInContains() {\nEvaluator parse = QueryParser.parse(\"p:contains(One \\\" One)\");\n}\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.select.QueryParser:parse(Ljava/lang/String;)Lorg/jsoup/select/Evaluator;",
            "method_body": "public static Evaluator parse(String query) {\nQueryParser p = new QueryParser(query);\nreturn p.parse();\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:chompBalanced(CC)Ljava/lang/String;",
            "method_body": "public String chompBalanced(char open, char close) {\nint start = -1;\nint end = -1;\nint depth = 0;\nchar last = 0;\nboolean inQuote = false;\n\ndo {\nif (isEmpty()) break;\nCharacter c = consume();\nif (last == 0 || last != ESC) {\nif ((c.equals('\\'') || c.equals('\"')) && c != open)\ninQuote = !inQuote;\nif (inQuote)\ncontinue;\nif (c.equals(open)) {\ndepth++;\nif (start == -1)\nstart = pos;\n}\nelse if (c.equals(close))\ndepth--;\n}\n\nif (depth > 0 && last != 0)\nend = pos; // don't include the outer match pair in the return\nlast = c;\n} while (depth > 0);\nfinal String out = (end >= 0) ? queue.substring(start, end) : \"\";\nreturn out;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.jsoup.select.QueryParser:<init>(Ljava/lang/String;)V",
            "method_body": "private QueryParser(String query) {\nthis.query = query;\nthis.tq = new TokenQueue(query);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:<init>(Ljava/lang/String;)V",
            "method_body": "private String queue;\nprivate int pos = 0;\n\nprivate static final char ESC = '\\\\'; // escape char for chomp balanced.\n\n/**\nCreate a new TokenQueue.\n@param data string of data to back queue.\n*/\npublic TokenQueue(String data) {\nValidate.notNull(data);\nqueue = data;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.jsoup.helper.Validate:notNull(Ljava/lang/Object;)V",
            "method_body": "public static void notNull(Object obj) {\nif (obj == null)\nthrow new IllegalArgumentException(\"Object must not be null\");\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.jsoup.select.QueryParser:parse()Lorg/jsoup/select/Evaluator;",
            "method_body": "Evaluator parse() {\ntq.consumeWhitespace();\n\nif (tq.matchesAny(combinators)) { // if starts with a combinator, use root as elements\nevals.add(new StructuralEvaluator.Root());\ncombinator(tq.consume());\n} else {\nfindElements();\n}\n\nwhile (!tq.isEmpty()) {\n// hierarchy and extras\nboolean seenWhite = tq.consumeWhitespace();\n\nif (tq.matchesAny(combinators)) {\ncombinator(tq.consume());\n} else if (seenWhite) {\ncombinator(' ');\n} else { // E.class, E#id, E[attr] etc. AND\nfindElements(); // take next el, #. etc off queue\n}\n}\n\nif (evals.size() == 1)\nreturn evals.get(0);\n\nreturn new CombiningEvaluator.And(evals);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:consumeWhitespace()Z",
            "method_body": "public boolean consumeWhitespace() {\nboolean seen = false;\nwhile (matchesWhitespace()) {\npos++;\nseen = true;\n}\nreturn seen;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:matchesWhitespace()Z",
            "method_body": "public boolean matchesWhitespace() {\nreturn !isEmpty() && StringUtil.isWhitespace(queue.charAt(pos));\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:isEmpty()Z",
            "method_body": "public boolean isEmpty() {\nreturn remainingLength() == 0;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:matchesAny([Ljava/lang/String;)Z",
            "method_body": "public boolean matchesAny(String... seq) {\nfor (String s : seq) {\nif (matches(s))\nreturn true;\n}\nreturn false;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:matches(Ljava/lang/String;)Z",
            "method_body": "public boolean matches(String seq) {\nreturn queue.regionMatches(true, pos, seq, 0, seq.length());\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.jsoup.select.Evaluator:<init>()V",
            "method_body": "protected Evaluator() {\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:consume()C",
            "method_body": "public char consume() {\nreturn queue.charAt(pos++);\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.jsoup.select.CombiningEvaluator:<init>()V",
            "method_body": "final ArrayList<Evaluator> evaluators;\nint num = 0;\n\nCombiningEvaluator() {\nsuper();\nevaluators = new ArrayList<Evaluator>();\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.jsoup.select.QueryParser:findElements()V",
            "method_body": "private void findElements() {\nif (tq.matchChomp(\"#\"))\nbyId();\nelse if (tq.matchChomp(\".\"))\nbyClass();\nelse if (tq.matchesWord() || tq.matches(\"*|\"))\nbyTag();\nelse if (tq.matches(\"[\"))\nbyAttribute();\nelse if (tq.matchChomp(\"*\"))\nallElements();\nelse if (tq.matchChomp(\":lt(\"))\nindexLessThan();\nelse if (tq.matchChomp(\":gt(\"))\nindexGreaterThan();\nelse if (tq.matchChomp(\":eq(\"))\nindexEquals();\nelse if (tq.matches(\":has(\"))\nhas();\nelse if (tq.matches(\":contains(\"))\ncontains(false);\nelse if (tq.matches(\":containsOwn(\"))\ncontains(true);\nelse if (tq.matches(\":containsData(\"))\ncontainsData();\nelse if (tq.matches(\":matches(\"))\nmatches(false);\nelse if (tq.matches(\":matchesOwn(\"))\nmatches(true);\nelse if (tq.matches(\":not(\"))\nnot();\nelse if (tq.matchChomp(\":nth-child(\"))\ncssNthChild(false, false);\nelse if (tq.matchChomp(\":nth-last-child(\"))\ncssNthChild(true, false);\nelse if (tq.matchChomp(\":nth-of-type(\"))\ncssNthChild(false, true);\nelse if (tq.matchChomp(\":nth-last-of-type(\"))\ncssNthChild(true, true);\nelse if (tq.matchChomp(\":first-child\"))\nevals.add(new Evaluator.IsFirstChild());\nelse if (tq.matchChomp(\":last-child\"))\nevals.add(new Evaluator.IsLastChild());\nelse if (tq.matchChomp(\":first-of-type\"))\nevals.add(new Evaluator.IsFirstOfType());\nelse if (tq.matchChomp(\":last-of-type\"))\nevals.add(new Evaluator.IsLastOfType());\nelse if (tq.matchChomp(\":only-child\"))\nevals.add(new Evaluator.IsOnlyChild());\nelse if (tq.matchChomp(\":only-of-type\"))\nevals.add(new Evaluator.IsOnlyOfType());\nelse if (tq.matchChomp(\":empty\"))\nevals.add(new Evaluator.IsEmpty());\nelse if (tq.matchChomp(\":root\"))\nevals.add(new Evaluator.IsRoot());\nelse // unhandled\nthrow new Selector.SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:matchChomp(Ljava/lang/String;)Z",
            "method_body": "public boolean matchChomp(String seq) {\nif (matches(seq)) {\npos += seq.length();\nreturn true;\n} else {\nreturn false;\n}\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.jsoup.helper.Validate:notEmpty(Ljava/lang/String;)V",
            "method_body": "public static void notEmpty(String string) {\nif (string == null || string.length() == 0)\nthrow new IllegalArgumentException(\"String must not be empty\");\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:matchesWord()Z",
            "method_body": "public boolean matchesWord() {\nreturn !isEmpty() && Character.isLetterOrDigit(queue.charAt(pos));\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.jsoup.select.QueryParser:byTag()V",
            "method_body": "private void byTag() {\nString tagName = tq.consumeElementSelector();\n\nValidate.notEmpty(tagName);\n\n// namespaces: wildcard match equals(tagName) or ending in \":\"+tagName\nif (tagName.startsWith(\"*|\")) {\nevals.add(new CombiningEvaluator.Or(new Evaluator.Tag(tagName.trim().toLowerCase()), new Evaluator.TagEndsWith(tagName.replace(\"*|\", \":\").trim().toLowerCase())));\n} else {\n// namespaces: if element name is \"abc:def\", selector must be \"abc|def\", so flip:\nif (tagName.contains(\"|\"))\ntagName = tagName.replace(\"|\", \":\");\n\nevals.add(new Evaluator.Tag(tagName.trim()));\n}\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:consumeElementSelector()Ljava/lang/String;",
            "method_body": "public String consumeElementSelector() {\nint start = pos;\nwhile (!isEmpty() && (matchesWord() || matchesAny(\"*|\",\"|\", \"_\", \"-\")))\npos++;\n\nreturn queue.substring(start, pos);\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.jsoup.select.Evaluator$Tag:<init>(Ljava/lang/String;)V",
            "method_body": "public abstract boolean matches(Element root, Element element);\n\n/**\n* Evaluator for tag name\n*/\npublic static final class Tag extends Evaluator {\nprivate String tagName;\n\npublic Tag(String tagName) {\nthis.tagName = tagName;\n}\n\n@Override\npublic boolean matches(Element root, Element element) {\nreturn (element.tagName().equalsIgnoreCase(tagName));\n}\n\n@Override\npublic String toString() {\nreturn String.format(\"%s\", tagName);\n}\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:consume(Ljava/lang/String;)V",
            "method_body": "public void consume(String seq) {\nif (!matches(seq))\nthrow new IllegalStateException(\"Queue did not match expected sequence\");\nint len = seq.length();\nif (len > remainingLength())\nthrow new IllegalStateException(\"Queue not long enough to consume sequence\");\n\npos += len;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.jsoup.helper.Validate:notEmpty(Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public static void notEmpty(String string, String msg) {\nif (string == null || string.length() == 0)\nthrow new IllegalArgumentException(msg);\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:unescape(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public static String unescape(String in) {\nStringBuilder out = new StringBuilder();\nchar last = 0;\nfor (char c : in.toCharArray()) {\nif (c == ESC) {\nif (last != 0 && last == ESC)\nout.append(c);\n}\nelse\nout.append(c);\nlast = c;\n}\nreturn out.toString();\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.jsoup.select.Evaluator$ContainsText:<init>(Ljava/lang/String;)V",
            "method_body": "public ContainsText(String searchText) {\nthis.searchText = searchText.toLowerCase();\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:remainingLength()I",
            "method_body": "private int remainingLength() {\nreturn queue.length() - pos;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.jsoup.select.CombiningEvaluator:updateNumEvaluators()V",
            "method_body": "void updateNumEvaluators() {\n// used so we don't need to bash on size() for every match test\nnum = evaluators.size();\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.jsoup.helper.StringUtil:<clinit>()V",
            "method_body": "private static final String[] padding = {\"\", \" \", \"  \", \"   \", \"    \", \"     \", \"      \", \"       \", \"        \", \"         \", \"          \"};\nprivate static final String[] padding = {\"\", \" \", \"  \", \"   \", \"    \", \"     \", \"      \", \"       \", \"        \", \"         \", \"          \"};",
            "method_id": 27
        },
        {
            "method_signature": "org.jsoup.helper.StringUtil:isWhitespace(I)Z",
            "method_body": "public static boolean isWhitespace(int c){\nreturn c == ' ' || c == '\\t' || c == '\\n' || c == '\\f' || c == '\\r';\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.jsoup.select.QueryParser:<clinit>()V",
            "method_body": "private final static String[] combinators = {\",\", \">\", \"+\", \"~\", \" \"};\nprivate final static String[] combinators = {\",\", \">\", \"+\", \"~\", \" \"};",
            "method_id": 29
        },
        {
            "method_signature": "org.jsoup.select.QueryParser:contains(Z)V",
            "method_body": "private void contains(boolean own) {\ntq.consume(own ? \":containsOwn\" : \":contains\");\nString searchText = TokenQueue.unescape(tq.chompBalanced('(', ')'));\nValidate.notEmpty(searchText, \":contains(text) query must not be empty\");\nif (own)\nevals.add(new Evaluator.ContainsOwnText(searchText));\nelse\nevals.add(new Evaluator.ContainsText(searchText));\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.jsoup.select.CombiningEvaluator:<init>(Ljava/util/Collection;)V",
            "method_body": "CombiningEvaluator(Collection<Evaluator> evaluators) {\nthis();\nthis.evaluators.addAll(evaluators);\nupdateNumEvaluators();\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.jsoup.select.CombiningEvaluator$And:<init>(Ljava/util/Collection;)V",
            "method_body": "And(Collection<Evaluator> evaluators) {\nsuper(evaluators);\n}",
            "method_id": 32
        }
    ]
}
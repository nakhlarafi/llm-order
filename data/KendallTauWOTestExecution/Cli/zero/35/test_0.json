{
    "bug_id": 35,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.bug.BugCLI252Test.testExactOptionNameMatch",
    "test_body": "public void testExactOptionNameMatch() throws ParseException {\nnew DefaultParser().parse(getOptions(), new String[]{\"--prefix\"});\n}\n",
    "stack_trace": "org.apache.commons.cli.AmbiguousOptionException: Ambiguous option: '--prefix'  (could be: 'prefix', 'prefixplusplus')\nat org.apache.commons.cli.DefaultParser.handleLongOptionWithoutEqual(DefaultParser.java:398)\nat org.apache.commons.cli.DefaultParser.handleLongOption(DefaultParser.java:371)\nat org.apache.commons.cli.DefaultParser.handleToken(DefaultParser.java:239)\nat org.apache.commons.cli.DefaultParser.parse(DefaultParser.java:120)\nat org.apache.commons.cli.DefaultParser.parse(DefaultParser.java:76)\nat org.apache.commons.cli.DefaultParser.parse(DefaultParser.java:60)\nat org.apache.commons.cli.bug.BugCLI252Test.testExactOptionNameMatch(BugCLI252Test.java:10)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Options:getRequiredOptions()Ljava/util/List;",
            "method_body": "public List getRequiredOptions()\n{\nreturn Collections.unmodifiableList(requiredOpts);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Lorg/apache/commons/cli/Option$Builder;)V",
            "method_body": "private Option(final Builder builder)\n{\nthis.argName = builder.argName;\nthis.description = builder.description;\nthis.longOpt = builder.longOpt;\nthis.numberOfArgs = builder.numberOfArgs;\nthis.opt = builder.opt;\nthis.optionalArg = builder.optionalArg;\nthis.required = builder.required;\nthis.type = builder.type;\nthis.valuesep = builder.valuesep;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.cli.UnrecognizedOptionException:<init>(Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public UnrecognizedOptionException(String message, String option)\n{\nthis(message);\nthis.option = option;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.cli.AmbiguousOptionException:createMessage(Ljava/lang/String;Ljava/util/Collection;)Ljava/lang/String;",
            "method_body": "private static String createMessage(String option, Collection<String> matchingOptions)\n{\nStringBuilder buf = new StringBuilder(\"Ambiguous option: '\");\nbuf.append(option);\nbuf.append(\"'  (could be: \");\n\nIterator<String> it = matchingOptions.iterator();\nwhile (it.hasNext())\n{\nbuf.append(\"'\");\nbuf.append(it.next());\nbuf.append(\"'\");\nif (it.hasNext())\n{\nbuf.append(\", \");\n}\n}\nbuf.append(\")\");\n\nreturn buf.toString();\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:<init>(Ljava/lang/String;)V",
            "method_body": "private Builder(final String opt) throws IllegalArgumentException\n{\nOptionValidator.validateOption(opt);\nthis.opt = opt;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidChar(C)Z",
            "method_body": "private static boolean isValidChar(char c)\n{\nreturn Character.isJavaIdentifierPart(c);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getKey()Ljava/lang/String;",
            "method_body": "String getKey()\n{\n// if 'opt' is null, then it is a 'long' option\nreturn (opt == null) ? longOpt : opt;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasLongOpt()Z",
            "method_body": "public boolean hasLongOpt()\n{\nreturn longOpt != null;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:validateOption(Ljava/lang/String;)V",
            "method_body": "static void validateOption(String opt) throws IllegalArgumentException\n{\n// if opt is NULL do not check further\nif (opt == null)\n{\nreturn;\n}\n\n// handle the single character opt\nif (opt.length() == 1)\n{\nchar ch = opt.charAt(0);\n\nif (!isValidOpt(ch))\n{\nthrow new IllegalArgumentException(\"Illegal option name '\" + ch + \"'\");\n}\n}\n\n// handle the multi character opt\nelse\n{\nfor (char ch : opt.toCharArray())\n{\nif (!isValidChar(ch))\n{\nthrow new IllegalArgumentException(\"The option '\" + opt + \"' contains an illegal \"\n+ \"character : '\" + ch + \"'\");\n}\n}\n}\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidOpt(C)Z",
            "method_body": "private static boolean isValidOpt(char c)\n{\nreturn isValidChar(c) || c == '?' || c == '@';\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.cli.Option:builder(Ljava/lang/String;)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public static Builder builder(final String opt)\n{\nreturn new Builder(opt);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(Option opt)\n{\nString key = opt.getKey();\n\n// add it to the long option list\nif (opt.hasLongOpt())\n{\nlongOpts.put(opt.getLongOpt(), opt);\n}\n\n// if the option is required add it to the required list\nif (opt.isRequired())\n{\nif (requiredOpts.contains(key))\n{\nrequiredOpts.remove(requiredOpts.indexOf(key));\n}\nrequiredOpts.add(key);\n}\n\nshortOpts.put(key, opt);\n\nreturn this;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(String opt, String longOpt, boolean hasArg, String description)\n{\naddOption(new Option(opt, longOpt, hasArg, description));\nreturn this;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)V",
            "method_body": "public Option(String opt, String longOpt, boolean hasArg, String description)\nthrows IllegalArgumentException\n{\n// ensure that the option is valid\nOptionValidator.validateOption(opt);\n\nthis.opt = opt;\nthis.longOpt = longOpt;\n\n// if hasArg is set then the number of arguments is 1\nif (hasArg)\n{\nthis.numberOfArgs = 1;\n}\n\nthis.description = description;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOptionGroups()Ljava/util/Collection;",
            "method_body": "Collection<OptionGroup> getOptionGroups()\n{\nreturn new HashSet<OptionGroup>(optionGroups.values());\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Ljava/util/Properties;Z)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption)\nthrows ParseException\n{\nthis.options = options;\nthis.stopAtNonOption = stopAtNonOption;\nskipParsing = false;\ncurrentOption = null;\nexpectedOpts = new ArrayList(options.getRequiredOptions());\n\n// clear the data from the groups\nfor (OptionGroup group : options.getOptionGroups())\n{\ngroup.setSelected(null);\n}\n\ncmd = new CommandLine();\n\nif (arguments != null)\n{\nfor (String argument : arguments)\n{\nhandleToken(argument);\n}\n}\n\n// check the arguments of the last option\ncheckRequiredArgs();\n\n// add the default options\nhandleProperties(properties);\n\ncheckRequiredOptions();\n\nreturn cmd;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:<init>()V",
            "method_body": "protected CommandLine()\n{\n// nothing to do\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments) throws ParseException\n{\nreturn parse(options, arguments, null);\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.cli.AmbiguousOptionException:<init>(Ljava/lang/String;Ljava/util/Collection;)V",
            "method_body": "public AmbiguousOptionException(String option, Collection<String> matchingOptions)\n{\nsuper(createMessage(option, matchingOptions), option);\nthis.matchingOptions = matchingOptions;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getLongOpt()Ljava/lang/String;",
            "method_body": "public String getLongOpt()\n{\nreturn longOpt;\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.cli.UnrecognizedOptionException:<init>(Ljava/lang/String;)V",
            "method_body": "public UnrecognizedOptionException(String message)\n{\nsuper(message);\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:longOpt(Ljava/lang/String;)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder longOpt(final String longOpt)\n{\nthis.longOpt = longOpt;\nreturn this;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.cli.Option:isRequired()Z",
            "method_body": "public boolean isRequired()\n{\nreturn required;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:handleLongOptionWithoutEqual(Ljava/lang/String;)V",
            "method_body": "private void handleLongOptionWithoutEqual(String token) throws ParseException\n{\nList<String> matchingOpts = options.getMatchingOptions(token);\nif (matchingOpts.isEmpty())\n{\nhandleUnknownToken(currentToken);\n}\nelse if (matchingOpts.size() > 1)\n{\nthrow new AmbiguousOptionException(token, matchingOpts);\n}\nelse\n{\nhandleOption(options.getOption(matchingOpts.get(0)));\n}\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:build()Lorg/apache/commons/cli/Option;",
            "method_body": "public Option build()\n{\nif (opt == null && longOpt == null)\n{\nthrow new IllegalArgumentException(\"Either opt or longOpt must be specified\");\n}\nreturn new Option(this);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.cli.ParseException:<init>(Ljava/lang/String;)V",
            "method_body": "public ParseException(String message)\n{\nsuper(message);\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:handleToken(Ljava/lang/String;)V",
            "method_body": "private void handleToken(String token) throws ParseException\n{\ncurrentToken = token;\n\nif (skipParsing)\n{\ncmd.addArg(token);\n}\nelse if (\"--\".equals(token))\n{\nskipParsing = true;\n}\nelse if (currentOption != null && currentOption.acceptsArg() && isArgument(token))\n{\ncurrentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token));\n}\nelse if (token.startsWith(\"--\"))\n{\nhandleLongOption(token);\n}\nelse if (token.startsWith(\"-\") && !\"-\".equals(token))\n{\nhandleShortAndLongOption(token);\n}\nelse\n{\nhandleUnknownToken(token);\n}\n\nif (currentOption != null && !currentOption.acceptsArg())\n{\ncurrentOption = null;\n}\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getMatchingOptions(Ljava/lang/String;)Ljava/util/List;",
            "method_body": "public List<String> getMatchingOptions(String opt)\n{\nopt = Util.stripLeadingHyphens(opt);\n\nList<String> matchingOpts = new ArrayList<String>();\n\n// for a perfect match return the single option only\n\nfor (String longOpt : longOpts.keySet())\n{\nif (longOpt.startsWith(opt))\n{\nmatchingOpts.add(longOpt);\n}\n}\n\nreturn matchingOpts;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.cli.Util:stripLeadingHyphens(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "static String stripLeadingHyphens(String str)\n{\nif (str == null)\n{\nreturn null;\n}\nif (str.startsWith(\"--\"))\n{\nreturn str.substring(2, str.length());\n}\nelse if (str.startsWith(\"-\"))\n{\nreturn str.substring(1, str.length());\n}\n\nreturn str;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.cli.Option:builder()Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public static Builder builder()\n{\nreturn builder(null);\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:handleLongOption(Ljava/lang/String;)V",
            "method_body": "private void handleLongOption(String token) throws ParseException\n{\nif (token.indexOf('=') == -1)\n{\nhandleLongOptionWithoutEqual(token);\n}\nelse\n{\nhandleLongOptionWithEqual(token);\n}\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Ljava/util/Properties;)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException\n{\nreturn parse(options, arguments, properties, false);\n}",
            "method_id": 31
        }
    ]
}
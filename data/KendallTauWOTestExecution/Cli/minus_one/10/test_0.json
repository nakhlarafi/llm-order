{
    "bug_id": 10,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.ParseRequiredTest.testReuseOptionsTwice",
    "test_body": "public void testReuseOptionsTwice() throws Exception\n{\nOptions opts = new Options();\nopts.addOption(OptionBuilder.isRequired().create('v'));\nGnuParser parser = new GnuParser();\n// first parsing\nparser.parse(opts, new String[] { \"-v\" });\ntry\n{\n// second parsing, with the same Options instance and an invalid command line\nparser.parse(opts, new String[0]);\nfail(\"MissingOptionException not thrown\");\n}\ncatch (MissingOptionException e)\n{\n// expected\n}\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: MissingOptionException not thrown\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.TestCase.fail(TestCase.java:227)\nat org.apache.commons.cli.ParseRequiredTest.testReuseOptionsTwice(ParseRequiredTest.java:157)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.GnuParser:flatten(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Z)[Ljava/lang/String;",
            "method_body": "protected String[] flatten(Options options, String[] arguments,\nboolean stopAtNonOption)\n{\ninit();\n\nboolean eatTheRest = false;\nOption currentOption = null;\n\nfor (int i = 0; i < arguments.length; i++)\n{\nif (\"--\".equals(arguments[i]))\n{\neatTheRest = true;\ntokens.add(\"--\");\n}\nelse if (\"-\".equals(arguments[i]))\n{\ntokens.add(\"-\");\n}\nelse if (arguments[i].startsWith(\"-\"))\n{\nOption option = options.getOption(arguments[i]);\n\n// this is not an Option\nif (option == null)\n{\n// handle special properties Option\nOption specialOption =\noptions.getOption(arguments[i].substring(0, 2));\n\nif (specialOption != null)\n{\ntokens.add(arguments[i].substring(0, 2));\ntokens.add(arguments[i].substring(2));\n}\nelse if (stopAtNonOption)\n{\neatTheRest = true;\ntokens.add(arguments[i]);\n}\nelse\n{\ntokens.add(arguments[i]);\n}\n}\nelse\n{\n// WARNING: Findbugs reports major problems with the following code.\n//          As option cannot be null, currentOption cannot and\n//          much of the code below is never going to be run.\n\ncurrentOption = option;\n\n// special option\nOption specialOption =\noptions.getOption(arguments[i].substring(0, 2));\n\nif ((specialOption != null) && (option == null))\n{\ntokens.add(arguments[i].substring(0, 2));\ntokens.add(arguments[i].substring(2));\n}\nelse if ((currentOption != null) && currentOption.hasArg())\n{\nif (currentOption.hasArg())\n{\ntokens.add(arguments[i]);\ncurrentOption = null;\n}\nelse if (currentOption.hasArgs())\n{\ntokens.add(arguments[i]);\n}\nelse if (stopAtNonOption)\n{\neatTheRest = true;\ntokens.add(\"--\");\ntokens.add(arguments[i]);\n}\nelse\n{\ntokens.add(arguments[i]);\n}\n}\nelse if (currentOption != null)\n{\ntokens.add(arguments[i]);\n}\nelse if (stopAtNonOption)\n{\neatTheRest = true;\ntokens.add(\"--\");\ntokens.add(arguments[i]);\n}\nelse\n{\ntokens.add(arguments[i]);\n}\n}\n}\nelse\n{\ntokens.add(arguments[i]);\n}\n\nif (eatTheRest)\n{\nfor (i++; i < arguments.length; i++)\n{\ntokens.add(arguments[i]);\n}\n}\n}\n\nreturn (String[]) tokens.toArray(new String[tokens.size()]);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.cli.GnuParser:init()V",
            "method_body": "private void init()\n{\ntokens.clear();\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.cli.Util:stripLeadingHyphens(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "static String stripLeadingHyphens(String str)\n{\nif (str == null) {\nreturn null;\n}\nif (str.startsWith(\"--\"))\n{\nreturn str.substring(2, str.length());\n}\nelse if (str.startsWith(\"-\"))\n{\nreturn str.substring(1, str.length());\n}\n\nreturn str;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:addOption(Lorg/apache/commons/cli/Option;)V",
            "method_body": "void addOption(Option opt)\n{\noptions.add(opt);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:<init>()V",
            "method_body": "CommandLine()\n{\n// nothing to do\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:withDescription(Ljava/lang/String;)Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder withDescription(String newDescription)\n{\nOptionBuilder.description = newDescription;\n\nreturn instance;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:isRequired()Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder isRequired()\n{\nOptionBuilder.required = true;\n\nreturn instance;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:hasArg()Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder hasArg()\n{\nOptionBuilder.numberOfArgs = 1;\n\nreturn instance;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:withLongOpt(Ljava/lang/String;)Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder withLongOpt(String newLongopt)\n{\nOptionBuilder.longopt = newLongopt;\n\nreturn instance;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:reset()V",
            "method_body": "private static void reset()\n{\ndescription = null;\nargName = \"arg\";\nlongopt = null;\ntype = null;\nrequired = false;\nnumberOfArgs = Option.UNINITIALIZED;\n\n\n// PMM 9/6/02 - these were missing\noptionalArg = false;\nvaluesep = (char) 0;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:<clinit>()V",
            "method_body": "private static String longopt;\n\n/** option description */\nprivate static String description;\n\n/** argument name */\nprivate static String argName;\n\n/** is required? */\nprivate static boolean required;\n\n/** the number of arguments */\nprivate static int numberOfArgs = Option.UNINITIALIZED;\n\n/** option type */\nprivate static Object type;\n\n/** option can have an optional argument value */\nprivate static boolean optionalArg;\n\n/** value separator for argument value */\nprivate static char valuesep;\n\n/** option builder instance */\nprivate static OptionBuilder instance = new OptionBuilder();\n\n/**\n* private constructor to prevent instances being created\n*/\nprivate OptionBuilder()\n{\n// hide the constructor\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:<init>()V",
            "method_body": "private OptionBuilder()\n{\n// hide the constructor\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidChar(C)Z",
            "method_body": "private static boolean isValidChar(char c)\n{\nreturn Character.isJavaIdentifierPart(c);\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidOpt(C)Z",
            "method_body": "private static boolean isValidOpt(char c)\n{\nreturn (isValidChar(c) || (c == ' ') || (c == '?') || c == '@');\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.cli.Option:clearValues()V",
            "method_body": "void clearValues() {\nthis.values.clear();\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hashCode()I",
            "method_body": "public int hashCode()\n{\nint result;\nresult = ( opt != null ? opt.hashCode() : 0 );\nresult = 31 * result + ( longOpt != null ? longOpt.hashCode() : 0 );\nreturn result;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setValueSeparator(C)V",
            "method_body": "public void setValueSeparator(char sep)\n{\nthis.valuesep = sep;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setArgs(I)V",
            "method_body": "public void setArgs(int num)\n{\nthis.numberOfArgs = num;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setArgName(Ljava/lang/String;)V",
            "method_body": "public void setArgName(String argName)\n{\nthis.argName = argName;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setRequired(Z)V",
            "method_body": "public void setRequired(boolean required)\n{\nthis.required = required;\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.cli.Option:isRequired()Z",
            "method_body": "public boolean isRequired()\n{\nreturn this.required;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasArg()Z",
            "method_body": "public boolean hasArg()\n{\nreturn (this.numberOfArgs > 0) || (numberOfArgs == UNLIMITED_VALUES);\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasLongOpt()Z",
            "method_body": "public boolean hasLongOpt()\n{\nreturn (this.longOpt != null);\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setOptionalArg(Z)V",
            "method_body": "public void setOptionalArg(boolean optionalArg)\n{\nthis.optionalArg = optionalArg;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setLongOpt(Ljava/lang/String;)V",
            "method_body": "public void setLongOpt(String longOpt)\n{\nthis.longOpt = longOpt;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getLongOpt()Ljava/lang/String;",
            "method_body": "public String getLongOpt()\n{\nreturn this.longOpt;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setType(Ljava/lang/Object;)V",
            "method_body": "public void setType(Object type)\n{\nthis.type = type;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getKey()Ljava/lang/String;",
            "method_body": "String getKey()\n{\n// if 'opt' is null, then it is a 'long' option\nif (opt == null)\n{\nreturn this.longOpt;\n}\n\nreturn this.opt;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)V",
            "method_body": "public Option(String opt, String longOpt, boolean hasArg,\nString description)\nthrows IllegalArgumentException\n{\n// ensure that the option is valid\nOptionValidator.validateOption(opt);\n\nthis.opt = opt;\nthis.longOpt = longOpt;\n\n// if hasArg is set then the number of arguments is 1\nif (hasArg)\n{\nthis.numberOfArgs = 1;\n}\n\nthis.description = description;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOptionGroup(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/OptionGroup;",
            "method_body": "public OptionGroup getOptionGroup(Option opt)\n{\nreturn (OptionGroup) optionGroups.get(opt.getKey());\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.cli.Options:hasOption(Ljava/lang/String;)Z",
            "method_body": "public boolean hasOption(String opt)\n{\nopt = Util.stripLeadingHyphens(opt);\n\nreturn shortOpts.containsKey(opt) || longOpts.containsKey(opt);\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOption(Ljava/lang/String;)Lorg/apache/commons/cli/Option;",
            "method_body": "public Option getOption(String opt)\n{\nopt = Util.stripLeadingHyphens(opt);\n\nif (shortOpts.containsKey(opt))\n{\nreturn (Option) shortOpts.get(opt);\n}\n\nreturn (Option) longOpts.get(opt);\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getRequiredOptions()Ljava/util/List;",
            "method_body": "public List getRequiredOptions()\n{\nreturn requiredOpts;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.cli.Options:helpOptions()Ljava/util/List;",
            "method_body": "List helpOptions()\n{\nList opts = new ArrayList(shortOpts.values());\n\n// now look through the long opts to see if there are any Long-opt\n// only options\nIterator iter = longOpts.values().iterator();\n\nwhile (iter.hasNext())\n{\nObject item = iter.next();\n\nif (!opts.contains(item))\n{\nopts.add(item);\n}\n}\n\nreturn new ArrayList(opts);\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(Option opt)\n{\nString key = opt.getKey();\n\n// add it to the long option list\nif (opt.hasLongOpt())\n{\nlongOpts.put(opt.getLongOpt(), opt);\n}\n\n// if the option is required add it to the required list\nif (opt.isRequired() )\n{\nif( requiredOpts.contains(key) ) {\nrequiredOpts.remove( requiredOpts.indexOf(key) );\n}\nrequiredOpts.add(key);\n}\n\nshortOpts.put(key, opt);\n\nreturn this;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(String opt, String longOpt, boolean hasArg,\nString description)\n{\naddOption(new Option(opt, longOpt, hasArg, description));\n\nreturn this;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:processOption(Ljava/lang/String;Ljava/util/ListIterator;)V",
            "method_body": "protected void processOption(String arg, ListIterator iter)\nthrows ParseException\n{\nboolean hasOption = getOptions().hasOption(arg);\n\n// if there is no option throw an UnrecognisedOptionException\nif (!hasOption)\n{\nthrow new UnrecognizedOptionException(\"Unrecognized option: \"\n+ arg);\n}\n\n// get the option represented by arg\nfinal Option opt = getOptions().getOption(arg);\n\n// if the option is a required option remove the option from\n// the requiredOptions list\nif (opt.isRequired())\n{\ngetRequiredOptions().remove(opt.getKey());\n}\n\n// if the option is in an OptionGroup make that option the selected\n// option of the group\nif (getOptions().getOptionGroup(opt) != null)\n{\nOptionGroup group = getOptions().getOptionGroup(opt);\n\nif (group.isRequired())\n{\ngetRequiredOptions().remove(group);\n}\n\ngroup.setSelected(opt);\n}\n\n// if the option takes an argument value\nif (opt.hasArg())\n{\nprocessArgs(opt, iter);\n}\n\n\n// set the option on the command line\ncmd.addOption(opt);\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:checkRequiredOptions()V",
            "method_body": "protected void checkRequiredOptions()\nthrows MissingOptionException\n{\n// if there are required options that have not been\n// processsed\nif (getRequiredOptions().size() > 0)\n{\nIterator iter = getRequiredOptions().iterator();\nStringBuffer buff = new StringBuffer(\"Missing required option\");\nbuff.append(getRequiredOptions().size() == 1 ? \"\" : \"s\");\nbuff.append(\": \");\n\n\n// loop through the required options\nwhile (iter.hasNext())\n{\nbuff.append(iter.next());\nbuff.append(\", \");\n}\n\nthrow new MissingOptionException(buff.substring(0, buff.length() - 2));\n}\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:processProperties(Ljava/util/Properties;)V",
            "method_body": "protected void processProperties(Properties properties)\n{\nif (properties == null)\n{\nreturn;\n}\n\nfor (Enumeration e = properties.propertyNames(); e.hasMoreElements();)\n{\nString option = e.nextElement().toString();\n\nif (!cmd.hasOption(option))\n{\nOption opt = getOptions().getOption(option);\n\n// get the value from the properties instance\nString value = properties.getProperty(option);\n\nif (opt.hasArg())\n{\nif ((opt.getValues() == null)\n|| (opt.getValues().length == 0))\n{\ntry\n{\nopt.addValueForProcessing(value);\n}\ncatch (RuntimeException exp)\n{\n// if we cannot add the value don't worry about it\n}\n}\n}\nelse if (!(\"yes\".equalsIgnoreCase(value)\n|| \"true\".equalsIgnoreCase(value)\n|| \"1\".equalsIgnoreCase(value)))\n{\n// if the value is not yes, true or 1 then don't add the\n// option to the CommandLine\nbreak;\n}\n\ncmd.addOption(opt);\n}\n}\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Ljava/util/Properties;Z)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments,\nProperties properties, boolean stopAtNonOption)\nthrows ParseException\n{\n// clear out the data in options in case it's been used before (CLI-71)\nfor (Iterator it = options.helpOptions().iterator(); it.hasNext();) {\nOption opt = (Option) it.next();\nopt.clearValues();\n}\n\n// initialise members\nsetOptions(options);\n\ncmd = new CommandLine();\n\nboolean eatTheRest = false;\n\nif (arguments == null)\n{\narguments = new String[0];\n}\n\nList tokenList = Arrays.asList(flatten(getOptions(),\narguments,\nstopAtNonOption));\n\nListIterator iterator = tokenList.listIterator();\n\n// process each flattened token\nwhile (iterator.hasNext())\n{\nString t = (String) iterator.next();\n\n// the value is the double-dash\nif (\"--\".equals(t))\n{\neatTheRest = true;\n}\n\n// the value is a single dash\nelse if (\"-\".equals(t))\n{\nif (stopAtNonOption)\n{\neatTheRest = true;\n}\nelse\n{\ncmd.addArg(t);\n}\n}\n\n// the value is an option\nelse if (t.startsWith(\"-\"))\n{\nif (stopAtNonOption && !getOptions().hasOption(t))\n{\neatTheRest = true;\ncmd.addArg(t);\n}\nelse\n{\nprocessOption(t, iterator);\n}\n}\n\n// the value is an argument\nelse\n{\ncmd.addArg(t);\n\nif (stopAtNonOption)\n{\neatTheRest = true;\n}\n}\n\n// eat the remaining tokens\nif (eatTheRest)\n{\nwhile (iterator.hasNext())\n{\nString str = (String) iterator.next();\n\n// ensure only one double-dash is added\nif (!\"--\".equals(str))\n{\ncmd.addArg(str);\n}\n}\n}\n}\n\nprocessProperties(properties);\ncheckRequiredOptions();\n\nreturn cmd;\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments)\nthrows ParseException\n{\nreturn parse(options, arguments, null, false);\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:getRequiredOptions()Ljava/util/List;",
            "method_body": "protected List getRequiredOptions() {\nreturn requiredOptions;\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:getOptions()Lorg/apache/commons/cli/Options;",
            "method_body": "protected Options getOptions() {\nreturn options;\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.cli.GnuParser:<init>()V",
            "method_body": "private ArrayList tokens = new ArrayList();\ntokens.clear();\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:validateOption(Ljava/lang/String;)V",
            "method_body": "static void validateOption(String opt)\nthrows IllegalArgumentException\n{\n// check that opt is not NULL\nif (opt == null)\n{\nreturn;\n}\n\n// handle the single character opt\nelse if (opt.length() == 1)\n{\nchar ch = opt.charAt(0);\n\nif (!isValidOpt(ch))\n{\nthrow new IllegalArgumentException(\"illegal option value '\" + ch\n+ \"'\");\n}\n}\n\n// handle the multi character opt\nelse\n{\nchar[] chars = opt.toCharArray();\n\nfor (int i = 0; i < chars.length; i++)\n{\nif (!isValidChar(chars[i]))\n{\nthrow new IllegalArgumentException(\n\"opt contains illegal character value '\" + chars[i]\n+ \"'\");\n}\n}\n}\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public Option(String opt, String description)\nthrows IllegalArgumentException\n{\nthis(opt, null, false, description);\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:create(Ljava/lang/String;)Lorg/apache/commons/cli/Option;",
            "method_body": "public static Option create(String opt)\nthrows IllegalArgumentException\n{\n// create the option\nOption option = new Option(opt, description);\n\n\n// set the option properties\noption.setLongOpt(longopt);\noption.setRequired(required);\noption.setOptionalArg(optionalArg);\noption.setArgs(numberOfArgs);\noption.setType(type);\noption.setValueSeparator(valuesep);\noption.setArgName(argName);\n\n\n// reset the OptionBuilder properties\nOptionBuilder.reset();\n\n// return the Option instance\nreturn option;\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:create(C)Lorg/apache/commons/cli/Option;",
            "method_body": "public static Option create(char opt)\nthrows IllegalArgumentException\n{\nreturn create(String.valueOf(opt));\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.cli.Options:<init>()V",
            "method_body": "public Options()\n{\n// nothing to do\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:setOptions(Lorg/apache/commons/cli/Options;)V",
            "method_body": "protected void setOptions(final Options options) {\nthis.options = options;\nthis.requiredOptions = options.getRequiredOptions();\n}",
            "method_id": 49
        }
    ]
}
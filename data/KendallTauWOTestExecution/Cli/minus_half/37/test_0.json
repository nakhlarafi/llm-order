{
    "bug_id": 37,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.bug.BugCLI265Test.shouldParseShortOptionWithoutValue",
    "test_body": "public void shouldParseShortOptionWithoutValue() throws Exception {\nString[] twoShortOptions = new String[]{\"-t1\", \"-last\"};\nfinal CommandLine commandLine = parser.parse(options, twoShortOptions);\nassertTrue(commandLine.hasOption(\"t1\"));\nassertNotEquals(\"Second option has been used as value for first option\", \"-last\", commandLine.getOptionValue(\"t1\"));\nassertTrue(\"Second option has not been detected\", commandLine.hasOption(\"last\"));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: Second option has been used as value for first option. Actual: -last\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failEquals(Assert.java:185)\nat org.junit.Assert.assertNotEquals(Assert.java:161)\nat org.apache.commons.cli.bug.BugCLI265Test.shouldParseShortOptionWithoutValue(BugCLI265Test.java:52)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:numberOfArgs(I)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder numberOfArgs(final int numberOfArgs)\n{\nthis.numberOfArgs = numberOfArgs;\nreturn this;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOptionGroup(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/OptionGroup;",
            "method_body": "public OptionGroup getOptionGroup(Option opt)\n{\nreturn optionGroups.get(opt.getKey());\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidChar(C)Z",
            "method_body": "private static boolean isValidChar(char c)\n{\nreturn Character.isJavaIdentifierPart(c);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getMatchingOptions(Ljava/lang/String;)Ljava/util/List;",
            "method_body": "public List<String> getMatchingOptions(String opt)\n{\nopt = Util.stripLeadingHyphens(opt);\n\nList<String> matchingOpts = new ArrayList<String>();\n\n// for a perfect match return the single option only\nif (longOpts.keySet().contains(opt))\n{\nreturn Collections.singletonList(opt);\n}\n\nfor (String longOpt : longOpts.keySet())\n{\nif (longOpt.startsWith(opt))\n{\nmatchingOpts.add(longOpt);\n}\n}\n\nreturn matchingOpts;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getValuesList()Ljava/util/List;",
            "method_body": "public List<String> getValuesList()\n{\nreturn values;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Option:acceptsArg()Z",
            "method_body": "boolean acceptsArg()\n{\nreturn (hasArg() || hasArgs() || hasOptionalArg()) && (numberOfArgs <= 0 || values.size() < numberOfArgs);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasArg()Z",
            "method_body": "public boolean hasArg()\n{\nreturn numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.cli.Options:hasLongOption(Ljava/lang/String;)Z",
            "method_body": "public boolean hasLongOption(String opt)\n{\nopt = Util.stripLeadingHyphens(opt);\n\nreturn longOpts.containsKey(opt);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.cli.Option:add(Ljava/lang/String;)V",
            "method_body": "private void add(String value)\n{\nif (!acceptsArg())\n{\nthrow new RuntimeException(\"Cannot add value, list full.\");\n}\n\n// store value\nvalues.add(value);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.cli.Option:builder(Ljava/lang/String;)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public static Builder builder(final String opt)\n{\nreturn new Builder(opt);\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:validateOption(Ljava/lang/String;)V",
            "method_body": "static void validateOption(String opt) throws IllegalArgumentException\n{\n// if opt is NULL do not check further\nif (opt == null)\n{\nreturn;\n}\n\n// handle the single character opt\nif (opt.length() == 1)\n{\nchar ch = opt.charAt(0);\n\nif (!isValidOpt(ch))\n{\nthrow new IllegalArgumentException(\"Illegal option name '\" + ch + \"'\");\n}\n}\n\n// handle the multi character opt\nelse\n{\nfor (char ch : opt.toCharArray())\n{\nif (!isValidChar(ch))\n{\nthrow new IllegalArgumentException(\"The option '\" + opt + \"' contains an illegal \"\n+ \"character : '\" + ch + \"'\");\n}\n}\n}\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:handleToken(Ljava/lang/String;)V",
            "method_body": "private void handleToken(String token) throws ParseException\n{\ncurrentToken = token;\n\nif (skipParsing)\n{\ncmd.addArg(token);\n}\nelse if (\"--\".equals(token))\n{\nskipParsing = true;\n}\nelse if (currentOption != null && currentOption.acceptsArg() && isArgument(token))\n{\ncurrentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token));\n}\nelse if (token.startsWith(\"--\"))\n{\nhandleLongOption(token);\n}\nelse if (token.startsWith(\"-\") && !\"-\".equals(token))\n{\nhandleShortAndLongOption(token);\n}\nelse\n{\nhandleUnknownToken(token);\n}\n\nif (currentOption != null && !currentOption.acceptsArg())\n{\ncurrentOption = null;\n}\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Ljava/util/Properties;)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException\n{\nreturn parse(options, arguments, properties, false);\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:hasArg()Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder hasArg()\n{\nreturn hasArg(true);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.cli.Option:processValue(Ljava/lang/String;)V",
            "method_body": "private void processValue(String value)\n{\n// this Option has a separator character\nif (hasValueSeparator())\n{\n// get the separator character\nchar sep = getValueSeparator();\n\n// store the index for the value separator\nint index = value.indexOf(sep);\n\n// while there are more value separators\nwhile (index != -1)\n{\n// next value to be added\nif (values.size() == numberOfArgs - 1)\n{\nbreak;\n}\n\n// store\nadd(value.substring(0, index));\n\n// parse\nvalue = value.substring(index + 1);\n\n// get new index\nindex = value.indexOf(sep);\n}\n}\n\n// store the actual value or the last value that has been parsed\nadd(value);\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:argName(Ljava/lang/String;)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder argName(final String argName)\n{\nthis.argName = argName;\nreturn this;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:build()Lorg/apache/commons/cli/Option;",
            "method_body": "public Option build()\n{\nif (opt == null && longOpt == null)\n{\nthrow new IllegalArgumentException(\"Either opt or longOpt must be specified\");\n}\nreturn new Option(this);\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:<init>(Ljava/lang/String;)V",
            "method_body": "private Builder(final String opt) throws IllegalArgumentException\n{\nOptionValidator.validateOption(opt);\nthis.opt = opt;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:hasArg(Z)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder hasArg(final boolean hasArg)\n{\n// set to UNINITIALIZED when no arg is specified to be compatible with OptionBuilder\nnumberOfArgs = hasArg ? 1 : Option.UNINITIALIZED;\nreturn this;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.cli.Util:stripLeadingAndTrailingQuotes(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "static String stripLeadingAndTrailingQuotes(String str)\n{\nint length = str.length();\nif (length > 1 && str.startsWith(\"\\\"\") && str.endsWith(\"\\\"\") && str.substring(1, length - 1).indexOf('\"') == -1)\n{\nstr = str.substring(1, length - 1);\n}\n\nreturn str;\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.cli.Options:hasShortOption(Ljava/lang/String;)Z",
            "method_body": "public boolean hasShortOption(String opt)\n{\nopt = Util.stripLeadingHyphens(opt);\n\nreturn shortOpts.containsKey(opt);\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:handleProperties(Ljava/util/Properties;)V",
            "method_body": "private void handleProperties(Properties properties) throws ParseException\n{\nif (properties == null)\n{\nreturn;\n}\n\nfor (Enumeration<?> e = properties.propertyNames(); e.hasMoreElements();)\n{\nString option = e.nextElement().toString();\n\nOption opt = options.getOption(option);\nif (opt == null)\n{\nthrow new UnrecognizedOptionException(\"Default option wasn't defined\", option);\n}\n\n// if the option is part of a group, check if another option of the group has been selected\nOptionGroup group = options.getOptionGroup(opt);\nboolean selected = group != null && group.getSelected() != null;\n\nif (!cmd.hasOption(option) && !selected)\n{\n// get the value from the properties\nString value = properties.getProperty(option);\n\nif (opt.hasArg())\n{\nif (opt.getValues() == null || opt.getValues().length == 0)\n{\nopt.addValueForProcessing(value);\n}\n}\nelse if (!(\"yes\".equalsIgnoreCase(value)\n|| \"true\".equalsIgnoreCase(value)\n|| \"1\".equalsIgnoreCase(value)))\n{\n// if the value is not yes, true or 1 then don't add the option to the CommandLine\ncontinue;\n}\n\nhandleOption(opt);\ncurrentOption = null;\n}\n}\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getRequiredOptions()Ljava/util/List;",
            "method_body": "public List getRequiredOptions()\n{\nreturn Collections.unmodifiableList(requiredOpts);\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.cli.Option:clone()Ljava/lang/Object;",
            "method_body": "public Object clone()\n{\ntry\n{\nOption option = (Option) super.clone();\noption.values = new ArrayList<String>(values);\nreturn option;\n}\ncatch (CloneNotSupportedException cnse)\n{\nthrow new RuntimeException(\"A CloneNotSupportedException was thrown: \" + cnse.getMessage());\n}\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.cli.Option:addValueForProcessing(Ljava/lang/String;)V",
            "method_body": "void addValueForProcessing(String value)\n{\nif (numberOfArgs == UNINITIALIZED)\n{\nthrow new RuntimeException(\"NO_ARGS_ALLOWED\");\n}\nprocessValue(value);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)V",
            "method_body": "public static final int UNINITIALIZED = -1;\nprivate int numberOfArgs = UNINITIALIZED;\nprivate Class<?> type = String.class;\nprivate List<String> values = new ArrayList<String>();\n{\nthis.argName = builder.argName;\nthis.description = builder.description;\nthis.longOpt = builder.longOpt;\nthis.numberOfArgs = builder.numberOfArgs;\nthis.opt = builder.opt;\nthis.optionalArg = builder.optionalArg;\nthis.required = builder.required;\nthis.type = builder.type;\nthis.valuesep = builder.valuesep;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.cli.Option$Builder:optionalArg(Z)Lorg/apache/commons/cli/Option$Builder;",
            "method_body": "public Builder optionalArg(final boolean isOptional)\n{\nthis.optionalArg = isOptional;\nreturn this;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.cli.Option:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object o)\n{\nif (this == o)\n{\nreturn true;\n}\nif (o == null || getClass() != o.getClass())\n{\nreturn false;\n}\n\nOption option = (Option) o;\n\n\nif (opt != null ? !opt.equals(option.opt) : option.opt != null)\n{\nreturn false;\n}\nif (longOpt != null ? !longOpt.equals(option.longOpt) : option.longOpt != null)\n{\nreturn false;\n}\n\nreturn true;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(Option opt)\n{\nString key = opt.getKey();\n\n// add it to the long option list\nif (opt.hasLongOpt())\n{\nlongOpts.put(opt.getLongOpt(), opt);\n}\n\n// if the option is required add it to the required list\nif (opt.isRequired())\n{\nif (requiredOpts.contains(key))\n{\nrequiredOpts.remove(requiredOpts.indexOf(key));\n}\nrequiredOpts.add(key);\n}\n\nshortOpts.put(key, opt);\n\nreturn this;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.cli.Option:isRequired()Z",
            "method_body": "public boolean isRequired()\n{\nreturn required;\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:getOptionValues(Ljava/lang/String;)[Ljava/lang/String;",
            "method_body": "public String[] getOptionValues(String opt)\n{\nList<String> values = new ArrayList<String>();\n\nfor (Option option : options)\n{\nif (opt.equals(option.getOpt()) || opt.equals(option.getLongOpt()))\n{\nvalues.addAll(option.getValuesList());\n}\n}\n\nreturn values.isEmpty() ? null : values.toArray(new String[values.size()]);\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:isOption(Ljava/lang/String;)Z",
            "method_body": "private boolean isOption(String token)\n{\nreturn isLongOption(token) || isShortOption(token);\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:isShortOption(Ljava/lang/String;)Z",
            "method_body": "private boolean isShortOption(String token)\n{\n// short options (-S, -SV, -S=V, -SV1=V2, -S1S2)\nreturn token.startsWith(\"-\") && token.length() >= 2 && options.hasShortOption(token.substring(1, 2));\n\n// remove leading \"-\" and \"=value\"\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:<init>()V",
            "method_body": "protected CommandLine()\n{\n// nothing to do\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments) throws ParseException\n{\nreturn parse(options, arguments, null);\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:addOption(Lorg/apache/commons/cli/Option;)V",
            "method_body": "protected void addOption(Option opt)\n{\noptions.add(opt);\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOptionGroups()Ljava/util/Collection;",
            "method_body": "Collection<OptionGroup> getOptionGroups()\n{\nreturn new HashSet<OptionGroup>(optionGroups.values());\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Lorg/apache/commons/cli/Option$Builder;)V",
            "method_body": "private Option(final Builder builder)\n{\nthis.argName = builder.argName;\nthis.description = builder.description;\nthis.longOpt = builder.longOpt;\nthis.numberOfArgs = builder.numberOfArgs;\nthis.opt = builder.opt;\nthis.optionalArg = builder.optionalArg;\nthis.required = builder.required;\nthis.type = builder.type;\nthis.valuesep = builder.valuesep;\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:isArgument(Ljava/lang/String;)Z",
            "method_body": "private boolean isArgument(String token)\n{\nreturn !isOption(token) || isNegativeNumber(token);\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:isLongOption(Ljava/lang/String;)Z",
            "method_body": "private boolean isLongOption(String token)\n{\nif (!token.startsWith(\"-\") || token.length() == 1)\n{\nreturn false;\n}\n\nint pos = token.indexOf(\"=\");\nString t = pos == -1 ? token : token.substring(0, pos);\n\nif (!options.getMatchingOptions(t).isEmpty())\n{\n// long or partial long options (--L, -L, --L=V, -L=V, --l, --l=V)\nreturn true;\n}\nelse if (getLongPrefix(token) != null && !token.startsWith(\"--\"))\n{\n// -LV\nreturn true;\n}\n\nreturn false;\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:getOptionValue(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String getOptionValue(String opt)\n{\nString[] values = getOptionValues(opt);\n\nreturn (values == null) ? null : values[0];\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:handleShortAndLongOption(Ljava/lang/String;)V",
            "method_body": "private void handleShortAndLongOption(String token) throws ParseException\n{\nString t = Util.stripLeadingHyphens(token);\n\nint pos = t.indexOf('=');\n\nif (t.length() == 1)\n{\n// -S\nif (options.hasShortOption(t))\n{\nhandleOption(options.getOption(t));\n}\nelse\n{\nhandleUnknownToken(token);\n}\n}\nelse if (pos == -1)\n{\n// no equal sign found (-xxx)\nif (options.hasShortOption(t))\n{\nhandleOption(options.getOption(t));\n}\nelse if (!options.getMatchingOptions(t).isEmpty())\n{\n// -L or -l\nhandleLongOptionWithoutEqual(token);\n}\nelse\n{\n// look for a long prefix (-Xmx512m)\nString opt = getLongPrefix(t);\n\nif (opt != null && options.getOption(opt).acceptsArg())\n{\nhandleOption(options.getOption(opt));\ncurrentOption.addValueForProcessing(t.substring(opt.length()));\ncurrentOption = null;\n}\nelse if (isJavaProperty(t))\n{\n// -SV1 (-Dflag)\nhandleOption(options.getOption(t.substring(0, 1)));\ncurrentOption.addValueForProcessing(t.substring(1));\ncurrentOption = null;\n}\nelse\n{\n// -S1S2S3 or -S1S2V\nhandleConcatenatedOptions(token);\n}\n}\n}\nelse\n{\n// equal sign found (-xxx=yyy)\nString opt = t.substring(0, pos);\nString value = t.substring(pos + 1);\n\nif (opt.length() == 1)\n{\n// -S=V\nOption option = options.getOption(opt);\nif (option != null && option.acceptsArg())\n{\nhandleOption(option);\ncurrentOption.addValueForProcessing(value);\ncurrentOption = null;\n}\nelse\n{\nhandleUnknownToken(token);\n}\n}\nelse if (isJavaProperty(opt))\n{\n// -SV1=V2 (-Dkey=value)\nhandleOption(options.getOption(opt.substring(0, 1)));\ncurrentOption.addValueForProcessing(opt.substring(1));\ncurrentOption.addValueForProcessing(value);\ncurrentOption = null;\n}\nelse\n{\n// -L=V or -l=V\nhandleLongOptionWithEqual(token);\n}\n}\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:getLongPrefix(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "private String getLongPrefix(String token)\n{\nString t = Util.stripLeadingHyphens(token);\n\nint i;\nString opt = null;\nfor (i = t.length() - 2; i > 1; i--)\n{\nString prefix = t.substring(0, i);\nif (options.hasLongOption(prefix))\n{\nopt = prefix;\nbreak;\n}\n}\n\nreturn opt;\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getKey()Ljava/lang/String;",
            "method_body": "String getKey()\n{\n// if 'opt' is null, then it is a 'long' option\nreturn (opt == null) ? longOpt : opt;\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:checkRequiredOptions()V",
            "method_body": "private void checkRequiredOptions() throws MissingOptionException\n{\n// if there are required options that have not been processed\nif (!expectedOpts.isEmpty())\n{\nthrow new MissingOptionException(expectedOpts);\n}\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.cli.Util:stripLeadingHyphens(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "static String stripLeadingHyphens(String str)\n{\nif (str == null)\n{\nreturn null;\n}\nif (str.startsWith(\"--\"))\n{\nreturn str.substring(2, str.length());\n}\nelse if (str.startsWith(\"-\"))\n{\nreturn str.substring(1, str.length());\n}\n\nreturn str;\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOption(Ljava/lang/String;)Lorg/apache/commons/cli/Option;",
            "method_body": "public Option getOption(String opt)\n{\nopt = Util.stripLeadingHyphens(opt);\n\nif (shortOpts.containsKey(opt))\n{\nreturn shortOpts.get(opt);\n}\n\nreturn longOpts.get(opt);\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:handleOption(Lorg/apache/commons/cli/Option;)V",
            "method_body": "private void handleOption(Option option) throws ParseException\n{\n// check the previous option before handling the next one\ncheckRequiredArgs();\n\noption = (Option) option.clone();\n\nupdateRequiredOptions(option);\n\ncmd.addOption(option);\n\nif (option.hasArg())\n{\ncurrentOption = option;\n}\nelse\n{\ncurrentOption = null;\n}\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasLongOpt()Z",
            "method_body": "public boolean hasLongOpt()\n{\nreturn longOpt != null;\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:updateRequiredOptions(Lorg/apache/commons/cli/Option;)V",
            "method_body": "private void updateRequiredOptions(Option option) throws AlreadySelectedException\n{\nif (option.isRequired())\n{\nexpectedOpts.remove(option.getKey());\n}\n\n// if the option is in an OptionGroup make that option the selected option of the group\nif (options.getOptionGroup(option) != null)\n{\nOptionGroup group = options.getOptionGroup(option);\n\nif (group.isRequired())\n{\nexpectedOpts.remove(group);\n}\n\ngroup.setSelected(option);\n}\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getOpt()Ljava/lang/String;",
            "method_body": "public String getOpt()\n{\nreturn opt;\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasValueSeparator()Z",
            "method_body": "public boolean hasValueSeparator()\n{\nreturn valuesep > 0;\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Ljava/util/Properties;Z)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption)\nthrows ParseException\n{\nthis.options = options;\nthis.stopAtNonOption = stopAtNonOption;\nskipParsing = false;\ncurrentOption = null;\nexpectedOpts = new ArrayList(options.getRequiredOptions());\n\n// clear the data from the groups\nfor (OptionGroup group : options.getOptionGroups())\n{\ngroup.setSelected(null);\n}\n\ncmd = new CommandLine();\n\nif (arguments != null)\n{\nfor (String argument : arguments)\n{\nhandleToken(argument);\n}\n}\n\n// check the arguments of the last option\ncheckRequiredArgs();\n\n// add the default options\nhandleProperties(properties);\n\ncheckRequiredOptions();\n\nreturn cmd;\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:checkRequiredArgs()V",
            "method_body": "private void checkRequiredArgs() throws ParseException\n{\nif (currentOption != null && currentOption.requiresArg())\n{\nthrow new MissingArgumentException(currentOption);\n}\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:resolveOption(Ljava/lang/String;)Lorg/apache/commons/cli/Option;",
            "method_body": "private Option resolveOption(String opt)\n{\nopt = Util.stripLeadingHyphens(opt);\nfor (Option option : options)\n{\nif (opt.equals(option.getOpt()))\n{\nreturn option;\n}\n\nif (opt.equals(option.getLongOpt()))\n{\nreturn option;\n}\n\n}\nreturn null;\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:hasOption(Ljava/lang/String;)Z",
            "method_body": "public boolean hasOption(String opt)\n{\nreturn options.contains(resolveOption(opt));\n}",
            "method_id": 55
        }
    ]
}
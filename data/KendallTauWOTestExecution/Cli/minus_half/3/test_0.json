{
    "bug_id": 3,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.PatternOptionBuilderTest.testSimplePattern",
    "test_body": "public void testSimplePattern()\n{\ntry {\nOptions options = PatternOptionBuilder.parsePattern(\"a:b@cde>f+n%t/\");\nString[] args = new String[] { \"-c\", \"-a\", \"foo\", \"-b\", \"java.util.Vector\", \"-e\", \"build.xml\", \"-f\", \"java.util.Calendar\", \"-n\", \"4.5\", \"-t\", \"http://jakarta.apache.org/\" };\nCommandLineParser parser = new PosixParser();\nCommandLine line = parser.parse(options,args);\n// tests the char methods of CommandLine that delegate to\n// the String methods\nassertEquals(\"flag a\", \"foo\", line.getOptionValue(\"a\"));\nassertEquals(\"flag a\", \"foo\", line.getOptionValue('a'));\nassertEquals(\"string flag a\", \"foo\", line.getOptionObject(\"a\"));\nassertEquals(\"string flag a\", \"foo\", line.getOptionObject('a'));\nassertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject(\"b\"));\nassertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject('b'));\nassertEquals(\"boolean true flag c\", true, line.hasOption(\"c\"));\nassertEquals(\"boolean true flag c\", true, line.hasOption('c'));\nassertEquals(\"boolean false flag d\", false, line.hasOption(\"d\"));\nassertEquals(\"boolean false flag d\", false, line.hasOption('d'));\nassertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject(\"e\"));\nassertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject('e'));\nassertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject(\"f\"));\nassertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject('f'));\nassertEquals(\"number flag n\", new Double(4.5), line.getOptionObject(\"n\"));\nassertEquals(\"number flag n\", new Double(4.5), line.getOptionObject('n'));\nassertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject(\"t\"));\nassertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject('t'));\n/// DATES NOT SUPPORTED YET.\n//      assertEquals(\"number flag t\", new java.util.Date(1023400137276L), line.getOptionObject('z'));\n//     input is:  \"Thu Jun 06 17:48:57 EDT 2002\"\n}\ncatch( ParseException exp ) {\nfail( exp.getMessage() );\n}\ncatch( java.net.MalformedURLException exp ) {\nfail( exp.getMessage() );\n}\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: number flag n expected:<4.5> but was:<4.5>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.TestCase.assertEquals(TestCase.java:244)\nat org.apache.commons.cli.PatternOptionBuilderTest.testSimplePattern(PatternOptionBuilderTest.java:70)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Util:stripLeadingHyphens(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "static String stripLeadingHyphens(String str)\n{\nif (str.startsWith(\"--\"))\n{\nreturn str.substring(2, str.length());\n}\nelse if (str.startsWith(\"-\"))\n{\nreturn str.substring(1, str.length());\n}\n\nreturn str;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setValueSeparator(C)V",
            "method_body": "public void setValueSeparator(char sep)\n{\nthis.valuesep = sep;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getOpt()Ljava/lang/String;",
            "method_body": "public String getOpt()\n{\nreturn this.opt;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:processOptionToken(Ljava/lang/String;Z)V",
            "method_body": "private void processOptionToken(String token, boolean stopAtNonOption)\n{\nif (this.options.hasOption(token))\n{\ncurrentOption = this.options.getOption(token);\ntokens.add(token);\n}\nelse if (stopAtNonOption)\n{\neatTheRest = true;\n}\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:processProperties(Ljava/util/Properties;)V",
            "method_body": "private void processProperties(Properties properties)\n{\nif (properties == null)\n{\nreturn;\n}\n\nfor (Enumeration e = properties.propertyNames(); e.hasMoreElements();)\n{\nString option = e.nextElement().toString();\n\nif (!cmd.hasOption(option))\n{\nOption opt = options.getOption(option);\n\n// get the value from the properties instance\nString value = properties.getProperty(option);\n\nif (opt.hasArg())\n{\nif ((opt.getValues() == null)\n|| (opt.getValues().length == 0))\n{\ntry\n{\nopt.addValue(value);\n}\ncatch (RuntimeException exp)\n{\n// if we cannot add the value don't worry about it\n}\n}\n}\nelse if (!(\"yes\".equalsIgnoreCase(value)\n|| \"true\".equalsIgnoreCase(value)\n|| \"1\".equalsIgnoreCase(value)))\n{\n// if the value is not yes, true or 1 then don't add the\n// option to the CommandLine\nbreak;\n}\n\ncmd.addOption(opt);\n}\n}\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:<clinit>()V",
            "method_body": "private static String longopt;\n\n/** option description */\nprivate static String description;\n\n/** argument name */\nprivate static String argName;\n\n/** is required? */\nprivate static boolean required;\n\n/** the number of arguments */\nprivate static int numberOfArgs = Option.UNINITIALIZED;\n\n/** option type */\nprivate static Object type;\n\n/** option can have an optional argument value */\nprivate static boolean optionalArg;\n\n/** value separator for argument value */\nprivate static char valuesep;\n\n/** option builder instance */\nprivate static OptionBuilder instance = new OptionBuilder();\n\n/**\n* private constructor to prevent instances being created\n*/\nprivate OptionBuilder()\n{\n// hide the constructor\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:isRequired(Z)Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder isRequired(boolean newRequired)\n{\nOptionBuilder.required = newRequired;\n\nreturn instance;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidOpt(C)Z",
            "method_body": "private static boolean isValidOpt(char c)\n{\nreturn (isValidChar(c) || (c == ' ') || (c == '?') || c == '@');\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasLongOpt()Z",
            "method_body": "public boolean hasLongOpt()\n{\nreturn (this.longOpt != null);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOptionGroup(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/OptionGroup;",
            "method_body": "public OptionGroup getOptionGroup(Option opt)\n{\nreturn (OptionGroup) optionGroups.get(opt.getKey());\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:create(Ljava/lang/String;)Lorg/apache/commons/cli/Option;",
            "method_body": "public static Option create(String opt)\nthrows IllegalArgumentException\n{\n// create the option\nOption option = new Option(opt, description);\n\n\n// set the option properties\noption.setLongOpt(longopt);\noption.setRequired(required);\noption.setOptionalArg(optionalArg);\noption.setArgs(numberOfArgs);\noption.setType(type);\noption.setValueSeparator(valuesep);\noption.setArgName(argName);\n\n\n// reset the OptionBuilder properties\nOptionBuilder.reset();\n\n// return the Option instance\nreturn option;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.cli.Option:processValue(Ljava/lang/String;)V",
            "method_body": "private void processValue(String value)\n{\n// this Option has a separator character\nif (hasValueSeparator())\n{\n// get the separator character\nchar sep = getValueSeparator();\n\n// store the index for the value separator\nint index = value.indexOf(sep);\n\n// while there are more value separators\nwhile (index != -1)\n{\n// next value to be added\nif (values.size() == (numberOfArgs - 1))\n{\nbreak;\n}\n\n\n// store\nadd(value.substring(0, index));\n\n\n// parse\nvalue = value.substring(index + 1);\n\n\n// get new index\nindex = value.indexOf(sep);\n}\n}\n\n\n// store the actual value or the last value that has been parsed\nadd(value);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setLongOpt(Ljava/lang/String;)V",
            "method_body": "public void setLongOpt(String longOpt)\n{\nthis.longOpt = longOpt;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.cli.TypeHandler:createValue(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "public static Object createValue(String str, Class clazz)\n{\nif (PatternOptionBuilder.STRING_VALUE == clazz)\n{\nreturn str;\n}\nelse if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n{\nreturn createObject(str);\n}\nelse if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n{\nreturn createNumber(str);\n}\nelse if (PatternOptionBuilder.DATE_VALUE == clazz)\n{\nreturn createDate(str);\n}\nelse if (PatternOptionBuilder.CLASS_VALUE == clazz)\n{\nreturn createClass(str);\n}\nelse if (PatternOptionBuilder.FILE_VALUE == clazz)\n{\nreturn createFile(str);\n}\nelse if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n{\nreturn createFile(str);\n}\nelse if (PatternOptionBuilder.FILES_VALUE == clazz)\n{\nreturn createFiles(str);\n}\nelse if (PatternOptionBuilder.URL_VALUE == clazz)\n{\nreturn createURL(str);\n}\nelse\n{\nreturn null;\n}\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setArgs(I)V",
            "method_body": "public void setArgs(int num)\n{\nthis.numberOfArgs = num;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasValueSeparator()Z",
            "method_body": "public boolean hasValueSeparator()\n{\nreturn (this.valuesep > 0);\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:resolveOption(Ljava/lang/String;)Lorg/apache/commons/cli/Option;",
            "method_body": "private Option resolveOption( String opt )\n{\nopt = Util.stripLeadingHyphens(opt);\nfor ( Iterator it = options.iterator(); it.hasNext(); )\n{\nOption option = (Option) it.next();\nif (opt.equals(option.getOpt()))\n{\nreturn option;\n}\nif (opt.equals( option.getLongOpt()))\n{\nreturn option;\n}\n\n}\nreturn null;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:<init>()V",
            "method_body": "CommandLine()\n{\n// nothing to do\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidChar(C)Z",
            "method_body": "private static boolean isValidChar(char c)\n{\nreturn Character.isJavaIdentifierPart(c);\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getType()Ljava/lang/Object;",
            "method_body": "public Object getType()\n{\nreturn this.type;\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.cli.Util:stripLeadingAndTrailingQuotes(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "static String stripLeadingAndTrailingQuotes(String str)\n{\nif (str.startsWith(\"\\\"\")) {\nstr = str.substring(1, str.length());\n}\nif (str.endsWith(\"\\\"\")) {\nstr = str.substring(0, str.length()-1);\n}\nreturn str;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Ljava/util/Properties;Z)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments,\nProperties properties, boolean stopAtNonOption)\nthrows ParseException\n{\n// initialise members\nthis.options = options;\n\n// clear out the data in options in case it's been used before (CLI-71)\nfor (Iterator it = options.helpOptions().iterator(); it.hasNext();) {\nOption opt = (Option) it.next();\nopt.clearValues();\n}\n\nrequiredOptions = options.getRequiredOptions();\ncmd = new CommandLine();\n\nboolean eatTheRest = false;\n\nif (arguments == null)\n{\narguments = new String[0];\n}\n\nList tokenList = Arrays.asList(flatten(this.options,\narguments,\nstopAtNonOption));\n\nListIterator iterator = tokenList.listIterator();\n\n// process each flattened token\nwhile (iterator.hasNext())\n{\nString t = (String) iterator.next();\n\n// the value is the double-dash\nif (\"--\".equals(t))\n{\neatTheRest = true;\n}\n\n// the value is a single dash\nelse if (\"-\".equals(t))\n{\nif (stopAtNonOption)\n{\neatTheRest = true;\n}\nelse\n{\ncmd.addArg(t);\n}\n}\n\n// the value is an option\nelse if (t.startsWith(\"-\"))\n{\nif (stopAtNonOption && !options.hasOption(t))\n{\neatTheRest = true;\ncmd.addArg(t);\n}\nelse\n{\nprocessOption(t, iterator);\n}\n}\n\n// the value is an argument\nelse\n{\ncmd.addArg(t);\n\nif (stopAtNonOption)\n{\neatTheRest = true;\n}\n}\n\n// eat the remaining tokens\nif (eatTheRest)\n{\nwhile (iterator.hasNext())\n{\nString str = (String) iterator.next();\n\n// ensure only one double-dash is added\nif (!\"--\".equals(str))\n{\ncmd.addArg(str);\n}\n}\n}\n}\n\nprocessProperties(properties);\ncheckRequiredOptions();\n\nreturn cmd;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.cli.Option:addValue(Ljava/lang/String;)V",
            "method_body": "void addValue(String value)\n{\nswitch (numberOfArgs)\n{\ncase UNINITIALIZED:\nthrow new RuntimeException(\"NO_ARGS_ALLOWED\");\n\ndefault:\nprocessValue(value);\n}\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:flatten(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Z)[Ljava/lang/String;",
            "method_body": "protected String[] flatten(Options options, String[] arguments,\nboolean stopAtNonOption)\n{\ninit();\nthis.options = options;\n\n// an iterator for the command line tokens\nIterator iter = Arrays.asList(arguments).iterator();\nString token;\n\n// process each command line token\nwhile (iter.hasNext())\n{\n// get the next command line token\ntoken = (String) iter.next();\n\n// handle SPECIAL TOKEN\nif (token.startsWith(\"--\"))\n{\nif (token.indexOf('=') != -1)\n{\ntokens.add(token.substring(0, token.indexOf('=')));\ntokens.add(token.substring(token.indexOf('=') + 1,\ntoken.length()));\n}\nelse\n{\ntokens.add(token);\n}\n}\n\n// single hyphen\nelse if (\"-\".equals(token))\n{\nprocessSingleHyphen(token);\n}\nelse if (token.startsWith(\"-\"))\n{\nint tokenLength = token.length();\n\nif (tokenLength == 2)\n{\nprocessOptionToken(token, stopAtNonOption);\n}\nelse if (options.hasOption(token)) {\ntokens.add(token);\n}\n// requires bursting\nelse\n{\nburstToken(token, stopAtNonOption);\n}\n}\nelse\n{\nif (stopAtNonOption)\n{\nprocess(token);\n}\nelse\n{\ntokens.add(token);\n}\n}\n\ngobble(iter);\n}\n\nreturn (String[]) tokens.toArray(new String[] {  });\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getValues()[Ljava/lang/String;",
            "method_body": "public String[] getValues()\n{\nreturn hasNoValues()\n? null : (String[]) this.values.toArray(new String[] {  });\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.cli.PatternOptionBuilder:parsePattern(Ljava/lang/String;)Lorg/apache/commons/cli/Options;",
            "method_body": "public static Options parsePattern(String pattern)\n{\nint sz = pattern.length();\n\nchar opt = ' ';\nchar ch = ' ';\nboolean required = false;\nObject type = null;\n\nOptions options = new Options();\n\nfor (int i = 0; i < sz; i++)\n{\nch = pattern.charAt(i);\n\n// a value code comes after an option and specifies\n// details about it\nif (!isValueCode(ch))\n{\nif (opt != ' ')\n{\nOptionBuilder.hasArg(type != null);\nOptionBuilder.isRequired(required);\nOptionBuilder.withType(type);\n\n// we have a previous one to deal with\noptions.addOption(OptionBuilder.create(opt));\nrequired = false;\ntype = null;\nopt = ' ';\n}\n\nopt = ch;\n}\nelse if (ch == '!')\n{\nrequired = true;\n}\nelse\n{\ntype = getValueClass(ch);\n}\n}\n\nif (opt != ' ')\n{\nOptionBuilder.hasArg(type != null);\nOptionBuilder.isRequired(required);\nOptionBuilder.withType(type);\n\n// we have a final one to deal with\noptions.addOption(OptionBuilder.create(opt));\n}\n\nreturn options;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.cli.TypeHandler:createNumber(Ljava/lang/String;)Ljava/lang/Number;",
            "method_body": "public static Number createNumber(String str)\n{\ntry\n{\nreturn org.apache.commons.lang.math.NumberUtils.createNumber(str);\n}\ncatch (NumberFormatException nfe)\n{\nSystem.err.println(nfe.getMessage());\n}\n\nreturn null;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getKey()Ljava/lang/String;",
            "method_body": "String getKey()\n{\n// if 'opt' is null, then it is a 'long' option\nif (opt == null)\n{\nreturn this.longOpt;\n}\n\nreturn this.opt;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.cli.Options:helpOptions()Ljava/util/List;",
            "method_body": "List helpOptions()\n{\nList opts = new ArrayList(shortOpts.values());\n\n// now look through the long opts to see if there are any Long-opt\n// only options\nIterator iter = longOpts.values().iterator();\n\nwhile (iter.hasNext())\n{\nObject item = iter.next();\n\nif (!opts.contains(item))\n{\nopts.add(item);\n}\n}\n\nreturn new ArrayList(opts);\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.cli.Option:add(Ljava/lang/String;)V",
            "method_body": "private void add(String value)\n{\nif ((numberOfArgs > 0) && (values.size() > (numberOfArgs - 1)))\n{\nthrow new RuntimeException(\"Cannot add value, list full.\");\n}\n\n\n// store value\nthis.values.add(value);\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:getOptionObject(C)Ljava/lang/Object;",
            "method_body": "public Object getOptionObject(char opt)\n{\nreturn getOptionObject(String.valueOf(opt));\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.cli.TypeHandler:createObject(Ljava/lang/String;)Ljava/lang/Object;",
            "method_body": "public static Object createObject(String str)\n{\nClass cl = null;\n\ntry\n{\ncl = Class.forName(str);\n}\ncatch (ClassNotFoundException cnfe)\n{\nSystem.err.println(\"Unable to find: \" + str);\n\nreturn null;\n}\n\nObject instance = null;\n\ntry\n{\ninstance = cl.newInstance();\n}\ncatch (InstantiationException cnfe)\n{\nSystem.err.println(\"InstantiationException; Unable to create: \"\n+ str);\n\nreturn null;\n}\ncatch (IllegalAccessException cnfe)\n{\nSystem.err.println(\"IllegalAccessException; Unable to create: \"\n+ str);\n\nreturn null;\n}\n\nreturn instance;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:<init>()V",
            "method_body": "private OptionBuilder()\n{\n// hide the constructor\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(Option opt)\n{\nString key = opt.getKey();\n\n// add it to the long option list\nif (opt.hasLongOpt())\n{\nlongOpts.put(opt.getLongOpt(), opt);\n}\n\n// if the option is required add it to the required list\nif (opt.isRequired() )\n{\nif( requiredOpts.contains(key) ) {\nrequiredOpts.remove( requiredOpts.indexOf(key) );\n}\nrequiredOpts.add(key);\n}\n\nshortOpts.put(key, opt);\n\nreturn this;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOption(Ljava/lang/String;)Lorg/apache/commons/cli/Option;",
            "method_body": "public Option getOption(String opt)\n{\nopt = Util.stripLeadingHyphens(opt);\n\nif (shortOpts.containsKey(opt))\n{\nreturn (Option) shortOpts.get(opt);\n}\n\nreturn (Option) longOpts.get(opt);\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:processOption(Ljava/lang/String;Ljava/util/ListIterator;)V",
            "method_body": "private void processOption(String arg, ListIterator iter)\nthrows ParseException\n{\nboolean hasOption = options.hasOption(arg);\n\n// if there is no option throw an UnrecognisedOptionException\nif (!hasOption)\n{\nthrow new UnrecognizedOptionException(\"Unrecognized option: \"\n+ arg);\n}\n\n// get the option represented by arg\nfinal Option opt = options.getOption(arg);\n\n// if the option is a required option remove the option from\n// the requiredOptions list\nif (opt.isRequired())\n{\nrequiredOptions.remove(opt.getKey());\n}\n\n// if the option is in an OptionGroup make that option the selected\n// option of the group\nif (options.getOptionGroup(opt) != null)\n{\nOptionGroup group = options.getOptionGroup(opt);\n\nif (group.isRequired())\n{\nrequiredOptions.remove(group);\n}\n\ngroup.setSelected(opt);\n}\n\n// if the option takes an argument value\nif (opt.hasArg())\n{\nprocessArgs(opt, iter);\n}\n\n\n// set the option on the command line\ncmd.addOption(opt);\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:getOptionValue(C)Ljava/lang/String;",
            "method_body": "public String getOptionValue(char opt)\n{\nreturn getOptionValue(String.valueOf(opt));\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.cli.TypeHandler:createValue(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;",
            "method_body": "public static Object createValue(String str, Object obj)\n{\nreturn createValue(str, (Class) obj);\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:addOption(Lorg/apache/commons/cli/Option;)V",
            "method_body": "void addOption(Option opt)\n{\noptions.add(opt);\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setType(Ljava/lang/Object;)V",
            "method_body": "public void setType(Object type)\n{\nthis.type = type;\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.apache.commons.cli.Options:hasOption(Ljava/lang/String;)Z",
            "method_body": "public boolean hasOption(String opt)\n{\nopt = Util.stripLeadingHyphens(opt);\n\nreturn shortOpts.containsKey(opt) || longOpts.containsKey(opt);\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasArg()Z",
            "method_body": "public boolean hasArg()\n{\nreturn (this.numberOfArgs > 0) || (numberOfArgs == UNLIMITED_VALUES);\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:gobble(Ljava/util/Iterator;)V",
            "method_body": "private void gobble(Iterator iter)\n{\nif (eatTheRest)\n{\nwhile (iter.hasNext())\n{\ntokens.add(iter.next());\n}\n}\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setOptionalArg(Z)V",
            "method_body": "public void setOptionalArg(boolean optionalArg)\n{\nthis.optionalArg = optionalArg;\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.cli.Option:isRequired()Z",
            "method_body": "public boolean isRequired()\n{\nreturn this.required;\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:validateOption(Ljava/lang/String;)V",
            "method_body": "static void validateOption(String opt)\nthrows IllegalArgumentException\n{\n// check that opt is not NULL\nif (opt == null)\n{\nreturn;\n}\n\n// handle the single character opt\nelse if (opt.length() == 1)\n{\nchar ch = opt.charAt(0);\n\nif (!isValidOpt(ch))\n{\nthrow new IllegalArgumentException(\"illegal option value '\" + ch\n+ \"'\");\n}\n}\n\n// handle the multi character opt\nelse\n{\nchar[] chars = opt.toCharArray();\n\nfor (int i = 0; i < chars.length; i++)\n{\nif (!isValidChar(chars[i]))\n{\nthrow new IllegalArgumentException(\n\"opt contains illegal character value '\" + chars[i]\n+ \"'\");\n}\n}\n}\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.cli.Option:clearValues()V",
            "method_body": "void clearValues() {\nthis.values.clear();\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getLongOpt()Ljava/lang/String;",
            "method_body": "public String getLongOpt()\n{\nreturn this.longOpt;\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:getOptionObject(Ljava/lang/String;)Ljava/lang/Object;",
            "method_body": "public Object getOptionObject(String opt)\n{\nString res = getOptionValue(opt);\n\nOption option = resolveOption(opt);\nif (option == null)\n{\nreturn null;\n}\n\nObject type = option.getType();\n\nreturn (res == null)        ? null : TypeHandler.createValue(res, type);\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:hasArg(Z)Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder hasArg(boolean hasArg)\n{\nOptionBuilder.numberOfArgs = (hasArg == true) ? 1 : Option.UNINITIALIZED;\n\nreturn instance;\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:checkRequiredOptions()V",
            "method_body": "private void checkRequiredOptions()\nthrows MissingOptionException\n{\n// if there are required options that have not been\n// processsed\nif (requiredOptions.size() > 0)\n{\nIterator iter = requiredOptions.iterator();\nStringBuffer buff = new StringBuffer();\n\n// loop through the required options\nwhile (iter.hasNext())\n{\nbuff.append(iter.next());\n}\n\nthrow new MissingOptionException(buff.toString());\n}\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.apache.commons.cli.Options:<init>()V",
            "method_body": "public Options()\n{\n// nothing to do\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setRequired(Z)V",
            "method_body": "public void setRequired(boolean required)\n{\nthis.required = required;\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.apache.commons.cli.TypeHandler:createClass(Ljava/lang/String;)Ljava/lang/Class;",
            "method_body": "public static Class createClass(String str)\n{\ntry\n{\nreturn Class.forName(str);\n}\ncatch (ClassNotFoundException cnfe)\n{\nSystem.err.println(\"Unable to find: \" + str);\n\nreturn null;\n}\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:processArgs(Lorg/apache/commons/cli/Option;Ljava/util/ListIterator;)V",
            "method_body": "public void processArgs(Option opt, ListIterator iter)\nthrows ParseException\n{\n// loop until an option is found\nwhile (iter.hasNext())\n{\nString str = (String) iter.next();\n\n// found an Option, not an argument\nif (options.hasOption(str) && str.startsWith(\"-\"))\n{\niter.previous();\nbreak;\n}\n\n// found a value\ntry\n{\nopt.addValue( Util.stripLeadingAndTrailingQuotes(str) );\n}\ncatch (RuntimeException exp)\n{\niter.previous();\nbreak;\n}\n}\n\nif ((opt.getValues() == null) && !opt.hasOptionalArg())\n{\nthrow new MissingArgumentException(\"Missing argument for option:\"\n+ opt.getKey());\n}\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:hasOption(C)Z",
            "method_body": "public boolean hasOption(char opt)\n{\nreturn hasOption(String.valueOf(opt));\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:hasOption(Ljava/lang/String;)Z",
            "method_body": "public boolean hasOption(String opt)\n{\nreturn options.contains( resolveOption(opt));\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:getOptionValue(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String getOptionValue(String opt)\n{\nString[] values = getOptionValues(opt);\n\nreturn (values == null) ? null : values[0];\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:reset()V",
            "method_body": "private static void reset()\n{\ndescription = null;\nargName = \"arg\";\nlongopt = null;\ntype = null;\nrequired = false;\nnumberOfArgs = Option.UNINITIALIZED;\n\n\n// PMM 9/6/02 - these were missing\noptionalArg = false;\nvaluesep = (char) 0;\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)V",
            "method_body": "public Option(String opt, String longOpt, boolean hasArg,\nString description)\nthrows IllegalArgumentException\n{\n// ensure that the option is valid\nOptionValidator.validateOption(opt);\n\nthis.opt = opt;\nthis.longOpt = longOpt;\n\n// if hasArg is set then the number of arguments is 1\nif (hasArg)\n{\nthis.numberOfArgs = 1;\n}\n\nthis.hasArg = hasArg;\nthis.description = description;\n}",
            "method_id": 59
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getRequiredOptions()Ljava/util/List;",
            "method_body": "public List getRequiredOptions()\n{\nreturn requiredOpts;\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:withType(Ljava/lang/Object;)Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder withType(Object newType)\n{\nOptionBuilder.type = newType;\n\nreturn instance;\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.apache.commons.cli.Parser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments)\nthrows ParseException\n{\nreturn parse(options, arguments, null, false);\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hashCode()I",
            "method_body": "public int hashCode()\n{\nint result;\nresult = ( opt != null ? opt.hashCode() : 0 );\nresult = 31 * result + ( longOpt != null ? longOpt.hashCode() : 0 );\nreturn result;\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasNoValues()Z",
            "method_body": "private boolean hasNoValues()\n{\nreturn this.values.size() == 0;\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setArgName(Ljava/lang/String;)V",
            "method_body": "public void setArgName(String argName)\n{\nthis.argName = argName;\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public Option(String opt, String description)\nthrows IllegalArgumentException\n{\nthis(opt, null, false, description);\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.apache.commons.cli.PatternOptionBuilder:<clinit>()V",
            "method_body": "public static final Class STRING_VALUE = java.lang.String.class;\n\n/** Object class */\npublic static final Class OBJECT_VALUE = java.lang.Object.class;\n\n/** Number class */\npublic static final Class NUMBER_VALUE = java.lang.Number.class;\n\n/** Date class */\npublic static final Class DATE_VALUE = java.util.Date.class;\n\n/** Class class */\npublic static final Class CLASS_VALUE = java.lang.Class.class;\n\n/// can we do this one??\n// is meant to check that the file exists, else it errors.\n// ie) it's for reading not writing.\n\n/** FileInputStream class */\npublic static final Class EXISTING_FILE_VALUE =\njava.io.FileInputStream.class;\n\n/** File class */\npublic static final Class FILE_VALUE = java.io.File.class;\n\n/** File array class */\npublic static final Class FILES_VALUE = java.io.File[].class;\n\n/** URL class */\npublic static final Class URL_VALUE = java.net.URL.class;\n\n/**\n* <p>Retrieve the class that <code>ch</code> represents.</p>\n*\n* @param ch the specified character\n* @return The class that <code>ch</code> represents\n*/\npublic static Object getValueClass(char ch)\n{\nif (ch == '@')\n{\nreturn PatternOptionBuilder.OBJECT_VALUE;\n}\nelse if (ch == ':')\n{\nreturn PatternOptionBuilder.STRING_VALUE;\n}\nelse if (ch == '%')\n{\nreturn PatternOptionBuilder.NUMBER_VALUE;\n}\nelse if (ch == '+')\n{\nreturn PatternOptionBuilder.CLASS_VALUE;\n}\nelse if (ch == '#')\n{\nreturn PatternOptionBuilder.DATE_VALUE;\n}\nelse if (ch == '<')\n{\nreturn PatternOptionBuilder.EXISTING_FILE_VALUE;\n}\nelse if (ch == '>')\n{\nreturn PatternOptionBuilder.FILE_VALUE;\n}\nelse if (ch == '*')\n{\nreturn PatternOptionBuilder.FILES_VALUE;\n}\nelse if (ch == '/')\n{\nreturn PatternOptionBuilder.URL_VALUE;\n}\n\nreturn null;\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.apache.commons.cli.PatternOptionBuilder:getValueClass(C)Ljava/lang/Object;",
            "method_body": "public static Object getValueClass(char ch)\n{\nif (ch == '@')\n{\nreturn PatternOptionBuilder.OBJECT_VALUE;\n}\nelse if (ch == ':')\n{\nreturn PatternOptionBuilder.STRING_VALUE;\n}\nelse if (ch == '%')\n{\nreturn PatternOptionBuilder.NUMBER_VALUE;\n}\nelse if (ch == '+')\n{\nreturn PatternOptionBuilder.CLASS_VALUE;\n}\nelse if (ch == '#')\n{\nreturn PatternOptionBuilder.DATE_VALUE;\n}\nelse if (ch == '<')\n{\nreturn PatternOptionBuilder.EXISTING_FILE_VALUE;\n}\nelse if (ch == '>')\n{\nreturn PatternOptionBuilder.FILE_VALUE;\n}\nelse if (ch == '*')\n{\nreturn PatternOptionBuilder.FILES_VALUE;\n}\nelse if (ch == '/')\n{\nreturn PatternOptionBuilder.URL_VALUE;\n}\n\nreturn null;\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:create(C)Lorg/apache/commons/cli/Option;",
            "method_body": "public static Option create(char opt)\nthrows IllegalArgumentException\n{\nreturn create(String.valueOf(opt));\n}",
            "method_id": 69
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:getOptionValues(Ljava/lang/String;)[Ljava/lang/String;",
            "method_body": "public String[] getOptionValues(String opt)\n{\nOption key = resolveOption( opt );\n\nif (options.contains(key))\n{\nreturn key.getValues();\n}\n\nreturn null;\n}",
            "method_id": 70
        },
        {
            "method_signature": "org.apache.commons.cli.PatternOptionBuilder:isValueCode(C)Z",
            "method_body": "public static boolean isValueCode(char ch)\n{\nif ((ch != '@') && (ch != ':') && (ch != '%') && (ch != '+')\n&& (ch != '#') && (ch != '<') && (ch != '>') && (ch != '*')\n&& (ch != '/') && (ch != '!'))\n{\nreturn false;\n}\n\nreturn true;\n}",
            "method_id": 71
        },
        {
            "method_signature": "org.apache.commons.cli.PosixParser:init()V",
            "method_body": "private void init()\n{\neatTheRest = false;\ntokens.clear();\ncurrentOption = null;\n}",
            "method_id": 72
        },
        {
            "method_signature": "org.apache.commons.cli.TypeHandler:createFile(Ljava/lang/String;)Ljava/io/File;",
            "method_body": "public static File createFile(String str)\n{\nreturn new File(str);\n}",
            "method_id": 73
        }
    ]
}
{
    "bug_id": 40,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.TypeHandlerTest.testCreateValueInteger_failure",
    "test_body": "public void testCreateValueInteger_failure()\nthrows Exception\n{\nTypeHandler.createValue(\"just-a-string\", Integer.class);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: Expected exception: org.apache.commons.cli.ParseException\nat org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:32)\nat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\nat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\nat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\nat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\nat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\nat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\nat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\nat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\nat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\nat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\nat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\nat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\nat java.lang.reflect.Method.invoke(Method.java:498)\nat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\nat org.apache.tools.ant.Task.perform(Task.java:348)\nat org.apache.tools.ant.Target.execute(Target.java:392)\nat org.apache.tools.ant.Target.performTasks(Target.java:413)\nat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\nat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\nat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\nat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\nat org.apache.tools.ant.Main.runBuild(Main.java:811)\nat org.apache.tools.ant.Main.startAnt(Main.java:217)\nat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\nat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.TypeHandler:createValue(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n{\nif (PatternOptionBuilder.STRING_VALUE == clazz)\n{\nreturn (T) str;\n}\nelse if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n{\nreturn (T) createObject(str);\n}\nelse if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n{\nreturn (T) createNumber(str);\n}\nelse if (PatternOptionBuilder.DATE_VALUE == clazz)\n{\nreturn (T) createDate(str);\n}\nelse if (PatternOptionBuilder.CLASS_VALUE == clazz)\n{\nreturn (T) createClass(str);\n}\nelse if (PatternOptionBuilder.FILE_VALUE == clazz)\n{\nreturn (T) createFile(str);\n}\nelse if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n{\nreturn (T) openFile(str);\n}\nelse if (PatternOptionBuilder.FILES_VALUE == clazz)\n{\nreturn (T) createFiles(str);\n}\nelse if (PatternOptionBuilder.URL_VALUE == clazz)\n{\nreturn (T) createURL(str);\n}\nelse\n{\nreturn null;\n}\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.cli.PatternOptionBuilder:<clinit>()V",
            "method_body": "public static final Class<String> STRING_VALUE = String.class;\n\n/** Object class */\npublic static final Class<Object> OBJECT_VALUE = Object.class;\n\n/** Number class */\npublic static final Class<Number> NUMBER_VALUE = Number.class;\n\n/** Date class */\npublic static final Class<Date> DATE_VALUE = Date.class;\n\n/** Class class */\npublic static final Class<?> CLASS_VALUE = Class.class;\n\n/// can we do this one??\n// is meant to check that the file exists, else it errors.\n// ie) it's for reading not writing.\n\n/** FileInputStream class */\npublic static final Class<FileInputStream> EXISTING_FILE_VALUE = FileInputStream.class;\n\n/** File class */\npublic static final Class<File> FILE_VALUE = File.class;\n\n/** File array class */\npublic static final Class<File[]> FILES_VALUE = File[].class;\n\n/** URL class */\npublic static final Class<URL> URL_VALUE = URL.class;\n\n/**\n* Retrieve the class that <code>ch</code> represents.\n*\n* @param ch the specified character\n* @return The class that <code>ch</code> represents\n*/\npublic static Object getValueClass(final char ch)\n{\nswitch (ch)\n{\ncase '@':\nreturn PatternOptionBuilder.OBJECT_VALUE;\ncase ':':\nreturn PatternOptionBuilder.STRING_VALUE;\ncase '%':\nreturn PatternOptionBuilder.NUMBER_VALUE;\ncase '+':\nreturn PatternOptionBuilder.CLASS_VALUE;\ncase '#':\nreturn PatternOptionBuilder.DATE_VALUE;\ncase '<':\nreturn PatternOptionBuilder.EXISTING_FILE_VALUE;\ncase '>':\nreturn PatternOptionBuilder.FILE_VALUE;\ncase '*':\nreturn PatternOptionBuilder.FILES_VALUE;\ncase '/':\nreturn PatternOptionBuilder.URL_VALUE;\n}\n\nreturn null;\n}",
            "method_id": 1
        }
    ]
}
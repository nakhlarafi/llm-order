{
    "bug_id": 30,
    "test_id": 1,
    "test_name": "org.apache.commons.cli.DefaultParserTest.testPropertyOptionUnexpected",
    "test_body": null,
    "stack_trace": "java.lang.NullPointerException\nat org.apache.commons.cli.DefaultParser.handleProperties(DefaultParser.java:159)\nat org.apache.commons.cli.DefaultParser.parse(DefaultParser.java:127)\nat org.apache.commons.cli.DefaultParser.parse(DefaultParser.java:75)\nat org.apache.commons.cli.ParserTestCase.parse(ParserTestCase.java:877)\nat org.apache.commons.cli.ParserTestCase.testPropertyOptionUnexpected(ParserTestCase.java:1010)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:handleProperties(Ljava/util/Properties;)V",
            "method_body": "private void handleProperties(Properties properties) throws ParseException\n{\nif (properties == null)\n{\nreturn;\n}\n\nfor (Enumeration e = properties.propertyNames(); e.hasMoreElements();)\n{\nString option = e.nextElement().toString();\n\nif (!cmd.hasOption(option))\n{\nOption opt = options.getOption(option);\n\n// if the option is part of a group, check if another option of the group has been selected\n\n// get the value from the properties\nString value = properties.getProperty(option);\n\nif (opt.hasArg())\n{\nif (opt.getValues() == null || opt.getValues().length == 0)\n{\nopt.addValueForProcessing(value);\n}\n}\nelse if (!(\"yes\".equalsIgnoreCase(value)\n|| \"true\".equalsIgnoreCase(value)\n|| \"1\".equalsIgnoreCase(value)))\n{\n// if the value is not yes, true or 1 then don't add the option to the CommandLine\ncontinue;\n}\n\nhandleOption(opt);\ncurrentOption = null;\n}\n}\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOptionGroups()Ljava/util/Collection;",
            "method_body": "Collection getOptionGroups()\n{\nreturn new HashSet(optionGroups.values());\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(String opt, String longOpt, boolean hasArg, String description)\n{\naddOption(new Option(opt, longOpt, hasArg, description));\n\nreturn this;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(Option opt)\n{\nString key = opt.getKey();\n\n// add it to the long option list\nif (opt.hasLongOpt())\n{\nlongOpts.put(opt.getLongOpt(), opt);\n}\n\n// if the option is required add it to the required list\nif (opt.isRequired())\n{\nif (requiredOpts.contains(key))\n{\nrequiredOpts.remove(requiredOpts.indexOf(key));\n}\nrequiredOpts.add(key);\n}\n\nshortOpts.put(key, opt);\n\nreturn this;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getRequiredOptions()Ljava/util/List;",
            "method_body": "public List getRequiredOptions()\n{\nreturn requiredOpts;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOption(Ljava/lang/String;)Lorg/apache/commons/cli/Option;",
            "method_body": "public Option getOption(String opt)\n{\nopt = Util.stripLeadingHyphens(opt);\n\nif (shortOpts.containsKey(opt))\n{\nreturn (Option) shortOpts.get(opt);\n}\n\nreturn (Option) longOpts.get(opt);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)V",
            "method_body": "public Option(String opt, String longOpt, boolean hasArg, String description)\nthrows IllegalArgumentException\n{\n// ensure that the option is valid\nOptionValidator.validateOption(opt);\n\nthis.opt = opt;\nthis.longOpt = longOpt;\n\n// if hasArg is set then the number of arguments is 1\nif (hasArg)\n{\nthis.numberOfArgs = 1;\n}\n\nthis.description = description;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getLongOpt()Ljava/lang/String;",
            "method_body": "public String getLongOpt()\n{\nreturn longOpt;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasLongOpt()Z",
            "method_body": "public boolean hasLongOpt()\n{\nreturn longOpt != null;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.cli.Option:isRequired()Z",
            "method_body": "public boolean isRequired()\n{\nreturn required;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:validateOption(Ljava/lang/String;)V",
            "method_body": "static void validateOption(String opt) throws IllegalArgumentException\n{\n// check that opt is not NULL\nif (opt == null)\n{\nreturn;\n}\n\n// handle the single character opt\nif (opt.length() == 1)\n{\nchar ch = opt.charAt(0);\n\nif (!isValidOpt(ch))\n{\nthrow new IllegalArgumentException(\"Illegal option name '\" + ch + \"'\");\n}\n}\n\n// handle the multi character opt\nelse\n{\nchar[] chars = opt.toCharArray();\n\nfor (int i = 0; i < chars.length; i++)\n{\nif (!isValidChar(chars[i]))\n{\nthrow new IllegalArgumentException(\"The option '\" + opt + \"' contains an illegal character : '\" + chars[i] + \"'\");\n}\n}\n}\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidOpt(C)Z",
            "method_body": "private static boolean isValidOpt(char c)\n{\nreturn isValidChar(c) || c == '?' || c == '@';\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.cli.OptionValidator:isValidChar(C)Z",
            "method_body": "private static boolean isValidChar(char c)\n{\nreturn Character.isJavaIdentifierPart(c);\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:<init>()V",
            "method_body": "CommandLine()\n{\n// nothing to do\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.cli.CommandLine:hasOption(Ljava/lang/String;)Z",
            "method_body": "public boolean hasOption(String opt)\n{\nreturn options.contains(resolveOption(opt));\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.cli.Util:stripLeadingHyphens(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "static String stripLeadingHyphens(String str)\n{\nif (str == null)\n{\nreturn null;\n}\nif (str.startsWith(\"--\"))\n{\nreturn str.substring(2, str.length());\n}\nelse if (str.startsWith(\"-\"))\n{\nreturn str.substring(1, str.length());\n}\n\nreturn str;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Ljava/util/Properties;)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException\n{\nreturn parse(options, arguments, properties, false);\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:parse(Lorg/apache/commons/cli/Options;[Ljava/lang/String;Ljava/util/Properties;Z)Lorg/apache/commons/cli/CommandLine;",
            "method_body": "public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException\n{\nthis.options = options;\nthis.stopAtNonOption = stopAtNonOption;\nskipParsing = false;\ncurrentOption = null;\nexpectedOpts = new ArrayList(options.getRequiredOptions());\n\n// clear the data from the groups\nfor (Iterator it = options.getOptionGroups().iterator(); it.hasNext();)\n{\nOptionGroup group = (OptionGroup) it.next();\ngroup.setSelected(null);\n}\n\ncmd = new CommandLine();\n\nif (arguments != null)\n{\nfor (int i = 0; i < arguments.length; i++)\n{\nhandleToken(arguments[i]);\n}\n}\n\n// check the arguments of the last option\ncheckRequiredArgs();\n\n// add the default options\nhandleProperties(properties);\n\ncheckRequiredOptions();\n\nreturn cmd;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.cli.DefaultParser:checkRequiredArgs()V",
            "method_body": "private void checkRequiredArgs() throws ParseException\n{\nif (currentOption != null && currentOption.requiresArg())\n{\nthrow new MissingArgumentException(currentOption);\n}\n}",
            "method_id": 18
        }
    ]
}
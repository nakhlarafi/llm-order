{
    "bug_id": 92,
    "test_id": 0,
    "test_name": "org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge",
    "test_body": "public void testBinomialCoefficientLarge() throws Exception {\n// This tests all legal and illegal values for n <= 200.\nfor (int n = 0; n <= 200; n++) {\nfor (int k = 0; k <= n; k++) {\nlong ourResult = -1;\nlong exactResult = -1;\nboolean shouldThrow = false;\nboolean didThrow = false;\ntry {\nourResult = MathUtils.binomialCoefficient(n, k);\n} catch (ArithmeticException ex) {\ndidThrow = true;\n}\ntry {\nexactResult = binomialCoefficient(n, k);\n} catch (ArithmeticException ex) {\nshouldThrow = true;\n}\nassertEquals(n+\",\"+k, shouldThrow, didThrow);\nassertEquals(n+\",\"+k, exactResult, ourResult);\nassertTrue(n+\",\"+k, (n > 66 || !didThrow));\n}\n}\nlong ourResult = MathUtils.binomialCoefficient(300, 3);\nlong exactResult = binomialCoefficient(300, 3);\nassertEquals(exactResult, ourResult);\nourResult = MathUtils.binomialCoefficient(700, 697);\nexactResult = binomialCoefficient(700, 697);\nassertEquals(exactResult, ourResult);\n// This one should throw\ntry {\nMathUtils.binomialCoefficient(700, 300);\nfail(\"Expecting ArithmeticException\");\n} catch (ArithmeticException ex) {\n// Expected\n}\n// Larger values cannot be computed directly by our\n// test implementation because of stack limitations,\n// so we make little jumps to fill the cache.\nfor (int i = 2000; i <= 10000; i += 2000) {\nourResult = MathUtils.binomialCoefficient(i, 3);\nexactResult = binomialCoefficient(i, 3);\nassertEquals(exactResult, ourResult);\n}\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:159)\nat junit.framework.TestCase.assertEquals(TestCase.java:316)\nat org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:binomialCoefficientLog(II)D",
            "method_body": "public static double binomialCoefficientLog(final int n, final int k) {\nif (n < k) {\nthrow new IllegalArgumentException(\n\"must have n >= k for binomial coefficient (n,k)\");\n}\nif (n < 0) {\nthrow new IllegalArgumentException(\n\"must have n >= 0 for binomial coefficient (n,k)\");\n}\nif ((n == k) || (k == 0)) {\nreturn 0;\n}\nif ((k == 1) || (k == n - 1)) {\nreturn Math.log((double) n);\n}\n\n/*\n* For values small enough to do exact integer computation,\n* return the log of the exact value\n*/\n\n/*\n* Return the log of binomialCoefficientDouble for values that will not\n* overflow binomialCoefficientDouble\n*/\n\n/*\n* Sum logs for values that could overflow\n*/\ndouble logSum = 0;\n\n// n!/k!\nfor (int i = k + 1; i <= n; i++) {\nlogSum += Math.log((double)i);\n}\n\n// divide by (n-k)!\nfor (int i = 2; i <= n - k; i++) {\nlogSum -= Math.log((double)i);\n}\n\nreturn logSum;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:addAndCheck(JJLjava/lang/String;)J",
            "method_body": "private static long addAndCheck(long a, long b, String msg) {\nlong ret;\nif (a > b) {\n// use symmetry to reduce boundary cases\nret = addAndCheck(b, a, msg);\n} else {\n// assert a <= b\n\nif (a < 0) {\nif (b < 0) {\n// check for negative overflow\nif (Long.MIN_VALUE - b <= a) {\nret = a + b;\n} else {\nthrow new ArithmeticException(msg);\n}\n} else {\n// opposite sign addition is always safe\nret = a + b;\n}\n} else {\n// assert a >= 0\n// assert b >= 0\n\n// check for positive overflow\nif (a <= Long.MAX_VALUE - b) {\nret = a + b;\n} else {\nthrow new ArithmeticException(msg);\n}\n}\n}\nreturn ret;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:binomialCoefficient(II)J",
            "method_body": "public static long binomialCoefficient(final int n, final int k) {\nif (n < k) {\nthrow new IllegalArgumentException(\n\"must have n >= k for binomial coefficient (n,k)\");\n}\nif (n < 0) {\nthrow new IllegalArgumentException(\n\"must have n >= 0 for binomial coefficient (n,k)\");\n}\nif ((n == k) || (k == 0)) {\nreturn 1;\n}\nif ((k == 1) || (k == n - 1)) {\nreturn n;\n}\nlong result = Math.round(binomialCoefficientDouble(n, k));\nif (result == Long.MAX_VALUE) {\nthrow new ArithmeticException(\n\"result too large to represent in a long integer\");\n}\n// Use symmetry for large k\n\n// We use the formula\n// (n choose k) = n! / (n-k)! / k!\n// (n choose k) == ((n-k+1)*...*n) / (1*...*k)\n// which could be written\n// (n choose k) == (n-1 choose k-1) * n / k\n// For n <= 61, the naive implementation cannot overflow.\n// For n > 61 but n <= 66, the result cannot overflow,\n// but we must take care not to overflow intermediate values.\n// We know that (result * i) is divisible by j,\n// but (result * i) may overflow, so we split j:\n// Filter out the gcd, d, so j/d and i/d are integer.\n// result is divisible by (j/d) because (j/d)\n// is relative prime to (i/d) and is a divisor of\n// result * (i/d).\n// For n > 66, a result overflow might occur, so we check\n// the multiplication, taking care to not overflow\n// unnecessary.\nreturn result;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:addAndCheck(JJ)J",
            "method_body": "public static long addAndCheck(long a, long b) {\nreturn addAndCheck(a, b, \"overflow: add\");\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:binomialCoefficientDouble(II)D",
            "method_body": "public static double binomialCoefficientDouble(final int n, final int k) {\n\n\nreturn Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);\n}",
            "method_id": 4
        }
    ]
}
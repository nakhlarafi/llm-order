{
    "bug_id": 31,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.distribution.BinomialDistributionTest.testMath718",
    "test_body": "public void testMath718() {\n// for large trials the evaluation of ContinuedFraction was inaccurate\n// do a sweep over several large trials to test if the current implementation is\n// numerically stable.\nfor (int trials = 500000; trials < 20000000; trials += 100000) {\nBinomialDistribution dist = new BinomialDistribution(trials, 0.5);\nint p = dist.inverseCumulativeProbability(0.5);\nAssert.assertEquals(trials / 2, p);\n}\n}\n",
    "stack_trace": "org.apache.commons.math3.exception.ConvergenceException: illegal state: Continued fraction diverged to NaN for value 0.5\nat org.apache.commons.math3.util.ContinuedFraction.evaluate(ContinuedFraction.java:177)\nat org.apache.commons.math3.special.Beta.regularizedBeta(Beta.java:154)\nat org.apache.commons.math3.special.Beta.regularizedBeta(Beta.java:129)\nat org.apache.commons.math3.special.Beta.regularizedBeta(Beta.java:50)\nat org.apache.commons.math3.distribution.BinomialDistribution.cumulativeProbability(BinomialDistribution.java:101)\nat org.apache.commons.math3.distribution.AbstractIntegerDistribution.checkedCumulativeProbability(AbstractIntegerDistribution.java:201)\nat org.apache.commons.math3.distribution.AbstractIntegerDistribution.solveInverseCumulativeProbability(AbstractIntegerDistribution.java:143)\nat org.apache.commons.math3.distribution.AbstractIntegerDistribution.inverseCumulativeProbability(AbstractIntegerDistribution.java:116)\nat org.apache.commons.math3.distribution.BinomialDistributionTest.testMath718(BinomialDistributionTest.java:140)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.distribution.BinomialDistribution:cumulativeProbability(I)D",
            "method_body": "public double cumulativeProbability(int x) {\ndouble ret;\nif (x < 0) {\nret = 0.0;\n} else if (x >= numberOfTrials) {\nret = 1.0;\n} else {\nret = 1.0 - Beta.regularizedBeta(probabilityOfSuccess,\nx + 1.0, numberOfTrials - x);\n}\nreturn ret;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.BinomialDistribution:getSupportUpperBound()I",
            "method_body": "public int getSupportUpperBound() {\nreturn probabilityOfSuccess > 0.0 ? numberOfTrials : 0;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.special.Beta:regularizedBeta(DDDDI)D",
            "method_body": "public static double regularizedBeta(double x,\nfinal double a, final double b,\ndouble epsilon, int maxIterations) {\ndouble ret;\n\nif (Double.isNaN(x) ||\nDouble.isNaN(a) ||\nDouble.isNaN(b) ||\nx < 0 ||\nx > 1 ||\na <= 0.0 ||\nb <= 0.0) {\nret = Double.NaN;\n} else if (x > (a + 1.0) / (a + b + 2.0)) {\nret = 1.0 - regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);\n} else {\nContinuedFraction fraction = new ContinuedFraction() {\n\n@Override\nprotected double getB(int n, double x) {\ndouble ret;\ndouble m;\nif (n % 2 == 0) { // even\nm = n / 2.0;\nret = (m * (b - m) * x) /\n((a + (2 * m) - 1) * (a + (2 * m)));\n} else {\nm = (n - 1.0) / 2.0;\nret = -((a + m) * (a + b + m) * x) /\n((a + (2 * m)) * (a + (2 * m) + 1.0));\n}\nreturn ret;\n}\n\n@Override\nprotected double getA(int n, double x) {\nreturn 1.0;\n}\n};\nret = FastMath.exp((a * FastMath.log(x)) + (b * FastMath.log(1.0 - x)) -\nFastMath.log(a) - logBeta(a, b, epsilon, maxIterations)) *\n1.0 / fraction.evaluate(x, epsilon, maxIterations);\n}\n\nreturn ret;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.AbstractIntegerDistribution:checkedCumulativeProbability(I)D",
            "method_body": "private double checkedCumulativeProbability(int argument)\nthrows MathInternalError {\ndouble result = Double.NaN;\nresult = cumulativeProbability(argument);\nif (Double.isNaN(result)) {\nthrow new MathInternalError(LocalizedFormats\n.DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN, argument);\n}\nreturn result;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:log(D)D",
            "method_body": "public static double log(final double x) {\nreturn log(x, null);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.util.ContinuedFraction:evaluate(DDI)D",
            "method_body": "public double evaluate(double x, double epsilon, int maxIterations) {\nfinal double small = 1e-50;\ndouble hPrev = getA(0, x);\n\n// use the value of small as epsilon criteria for zero checks\nif (Precision.equals(hPrev, 0.0, small)) {\nhPrev = small;\n}\n\nint n = 1;\ndouble dPrev = 0.0;\ndouble p0 = 1.0;\ndouble q1 = 1.0;\ndouble cPrev = hPrev;\ndouble hN = hPrev;\n\nwhile (n < maxIterations) {\nfinal double a = getA(n, x);\nfinal double b = getB(n, x);\n\ndouble cN = a * hPrev + b * p0;\ndouble q2 = a * q1 + b * dPrev;\nif (Double.isInfinite(cN) || Double.isInfinite(q2)) {\ndouble scaleFactor = 1d;\ndouble lastScaleFactor = 1d;\nfinal int maxPower = 5;\nfinal double scale = FastMath.max(a,b);\nif (scale <= 0) {  // Can't scale\nthrow new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n}\nfor (int i = 0; i < maxPower; i++) {\nlastScaleFactor = scaleFactor;\nscaleFactor *= scale;\nif (a != 0.0 && a > b) {\ncN = hPrev / lastScaleFactor + (b / scaleFactor * p0);\nq2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n} else if (b != 0) {\ncN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\nq2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n}\nif (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\nbreak;\n}\n}\n}\n\nfinal double deltaN = cN / q2 / cPrev;\nhN = cPrev * deltaN;\n\nif (Double.isInfinite(hN)) {\nthrow new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\nx);\n}\nif (Double.isNaN(hN)) {\nthrow new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\nx);\n}\n\nif (FastMath.abs(deltaN - 1.0) < epsilon) {\nbreak;\n}\n\ndPrev = q1;\ncPrev = cN / q2;\np0 = hPrev;\nhPrev = cN;\nq1 = q2;\nn++;\n}\n\nif (n >= maxIterations) {\nthrow new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\nmaxIterations, x);\n}\n\nreturn hN;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.BinomialDistribution:getSupportLowerBound()I",
            "method_body": "public int getSupportLowerBound() {\nreturn probabilityOfSuccess < 1.0 ? 0 : numberOfTrials;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.special.Gamma:lanczos(D)D",
            "method_body": "public static double lanczos(final double x) {\ndouble sum = 0.0;\nfor (int i = LANCZOS.length - 1; i > 0; --i) {\nsum = sum + (LANCZOS[i] / (x + i));\n}\nreturn sum + LANCZOS[0];\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:sqrt(D)D",
            "method_body": "public static double sqrt(final double a) {\nreturn Math.sqrt(a);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.BinomialDistribution:<init>(ID)V",
            "method_body": "public BinomialDistribution(int trials, double p) {\nif (trials < 0) {\nthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_TRIALS,\ntrials);\n}\nif (p < 0 || p > 1) {\nthrow new OutOfRangeException(p, 0, 1);\n}\n\nprobabilityOfSuccess = p;\nnumberOfTrials = trials;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.BinomialDistribution:getNumericalMean()D",
            "method_body": "public double getNumericalMean() {\nreturn numberOfTrials * probabilityOfSuccess;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.special.Beta:logBeta(DDDI)D",
            "method_body": "public static double logBeta(double a, double b,\ndouble epsilon,\nint maxIterations) {\ndouble ret;\n\nif (Double.isNaN(a) ||\nDouble.isNaN(b) ||\na <= 0.0 ||\nb <= 0.0) {\nret = Double.NaN;\n} else {\nret = Gamma.logGamma(a) + Gamma.logGamma(b) -\nGamma.logGamma(a + b);\n}\n\nreturn ret;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.special.Gamma:logGamma(D)D",
            "method_body": "public static double logGamma(double x) {\ndouble ret;\n\nif (Double.isNaN(x) || (x <= 0.0)) {\nret = Double.NaN;\n} else {\ndouble g = 607.0 / 128.0;\ndouble sum = lanczos(x);\ndouble tmp = x + g + .5;\nret = ((x + .5) * FastMath.log(tmp)) - tmp +\nHALF_LOG_2_PI + FastMath.log(sum / x);\n}\n\nreturn ret;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:log(D[D)D",
            "method_body": "private static double log(final double x, final double[] hiPrec) {\nif (x==0) { // Handle special case of +0/-0\nreturn Double.NEGATIVE_INFINITY;\n}\nlong bits = Double.doubleToLongBits(x);\n\n/* Handle special cases of negative input, and NaN */\nif ((bits & 0x8000000000000000L) != 0 || x != x) {\nif (x != 0.0) {\nif (hiPrec != null) {\nhiPrec[0] = Double.NaN;\n}\n\nreturn Double.NaN;\n}\n}\n\n/* Handle special cases of Positive infinity. */\nif (x == Double.POSITIVE_INFINITY) {\nif (hiPrec != null) {\nhiPrec[0] = Double.POSITIVE_INFINITY;\n}\n\nreturn Double.POSITIVE_INFINITY;\n}\n\n/* Extract the exponent */\nint exp = (int)(bits >> 52)-1023;\n\nif ((bits & 0x7ff0000000000000L) == 0) {\n// Subnormal!\nif (x == 0) {\n// Zero\nif (hiPrec != null) {\nhiPrec[0] = Double.NEGATIVE_INFINITY;\n}\n\nreturn Double.NEGATIVE_INFINITY;\n}\n\n/* Normalize the subnormal number. */\nbits <<= 1;\nwhile ( (bits & 0x0010000000000000L) == 0) {\nexp--;\nbits <<= 1;\n}\n}\n\n\nif (exp == -1 || exp == 0) {\nif (x < 1.01 && x > 0.99 && hiPrec == null) {\n/* The normal method doesn't work well in the range [0.99, 1.01], so call do a straight\npolynomial expansion in higer precision. */\n\n/* Compute x - 1.0 and split it */\ndouble xa = x - 1.0;\ndouble xb = xa - x + 1.0;\ndouble tmp = xa * HEX_40000000;\ndouble aa = xa + tmp - tmp;\ndouble ab = xa - aa;\nxa = aa;\nxb = ab;\n\ndouble ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];\ndouble yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];\n\nfor (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {\n/* Multiply a = y * x */\naa = ya * xa;\nab = ya * xb + yb * xa + yb * xb;\n/* split, so now y = a */\ntmp = aa * HEX_40000000;\nya = aa + tmp - tmp;\nyb = aa - ya + ab;\n\n/* Add  a = y + lnQuickCoef */\naa = ya + LN_QUICK_COEF[i][0];\nab = yb + LN_QUICK_COEF[i][1];\n/* Split y = a */\ntmp = aa * HEX_40000000;\nya = aa + tmp - tmp;\nyb = aa - ya + ab;\n}\n\n/* Multiply a = y * x */\naa = ya * xa;\nab = ya * xb + yb * xa + yb * xb;\n/* split, so now y = a */\ntmp = aa * HEX_40000000;\nya = aa + tmp - tmp;\nyb = aa - ya + ab;\n\nreturn ya + yb;\n}\n}\n\n// lnm is a log of a number in the range of 1.0 - 2.0, so 0 <= lnm < ln(2)\ndouble lnm[] = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n\n/*\ndouble epsilon = x / Double.longBitsToDouble(bits & 0xfffffc0000000000L);\n\nepsilon -= 1.0;\n*/\n\n// y is the most significant 10 bits of the mantissa\n//double y = Double.longBitsToDouble(bits & 0xfffffc0000000000L);\n//double epsilon = (x - y) / y;\ndouble epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n\ndouble lnza = 0.0;\ndouble lnzb = 0.0;\n\nif (hiPrec != null) {\n/* split epsilon -> x */\ndouble tmp = epsilon * HEX_40000000;\ndouble aa = epsilon + tmp - tmp;\ndouble ab = epsilon - aa;\ndouble xa = aa;\ndouble xb = ab;\n\n/* Need a more accurate epsilon, so adjust the division. */\ndouble numer = bits & 0x3ffffffffffL;\ndouble denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);\naa = numer - xa*denom - xb * denom;\nxb += aa / denom;\n\n/* Remez polynomial evaluation */\ndouble ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];\ndouble yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];\n\nfor (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n/* Multiply a = y * x */\naa = ya * xa;\nab = ya * xb + yb * xa + yb * xb;\n/* split, so now y = a */\ntmp = aa * HEX_40000000;\nya = aa + tmp - tmp;\nyb = aa - ya + ab;\n\n/* Add  a = y + lnHiPrecCoef */\naa = ya + LN_HI_PREC_COEF[i][0];\nab = yb + LN_HI_PREC_COEF[i][1];\n/* Split y = a */\ntmp = aa * HEX_40000000;\nya = aa + tmp - tmp;\nyb = aa - ya + ab;\n}\n\n/* Multiply a = y * x */\naa = ya * xa;\nab = ya * xb + yb * xa + yb * xb;\n\n/* split, so now lnz = a */\n/*\ntmp = aa * 1073741824.0;\nlnza = aa + tmp - tmp;\nlnzb = aa - lnza + ab;\n*/\nlnza = aa + ab;\nlnzb = -(lnza - aa - ab);\n} else {\n/* High precision not required.  Eval Remez polynomial\nusing standard double precision */\nlnza = -0.16624882440418567;\nlnza = lnza * epsilon + 0.19999954120254515;\nlnza = lnza * epsilon + -0.2499999997677497;\nlnza = lnza * epsilon + 0.3333333333332802;\nlnza = lnza * epsilon + -0.5;\nlnza = lnza * epsilon + 1.0;\nlnza = lnza * epsilon;\n}\n\n/* Relative sizes:\n* lnzb     [0, 2.33E-10]\n* lnm[1]   [0, 1.17E-7]\n* ln2B*exp [0, 1.12E-4]\n* lnza      [0, 9.7E-4]\n* lnm[0]   [0, 0.692]\n* ln2A*exp [0, 709]\n*/\n\n/* Compute the following sum:\n* lnzb + lnm[1] + ln2B*exp + lnza + lnm[0] + ln2A*exp;\n*/\n\n//return lnzb + lnm[1] + ln2B*exp + lnza + lnm[0] + ln2A*exp;\ndouble a = LN_2_A*exp;\ndouble b = 0.0;\ndouble c = a+lnm[0];\ndouble d = -(c-a-lnm[0]);\na = c;\nb = b + d;\n\nc = a + lnza;\nd = -(c - a - lnza);\na = c;\nb = b + d;\n\nc = a + LN_2_B*exp;\nd = -(c - a - LN_2_B*exp);\na = c;\nb = b + d;\n\nc = a + lnm[1];\nd = -(c - a - lnm[1]);\na = c;\nb = b + d;\n\nc = a + lnzb;\nd = -(c - a - lnzb);\na = c;\nb = b + d;\n\nif (hiPrec != null) {\nhiPrec[0] = a;\nhiPrec[1] = b;\n}\n\nreturn a + b;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:exp(D)D",
            "method_body": "public static double exp(double x) {\nreturn exp(x, 0.0, null);\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.special.Beta$1:getA(ID)D",
            "method_body": "public static double regularizedBeta(double x,\nfinal double a, final double b,\ndouble epsilon, int maxIterations) {\ndouble ret;\n\nif (Double.isNaN(x) ||\nDouble.isNaN(a) ||\nDouble.isNaN(b) ||\nx < 0 ||\nx > 1 ||\na <= 0.0 ||\nb <= 0.0) {\nret = Double.NaN;\n} else if (x > (a + 1.0) / (a + b + 2.0)) {\nret = 1.0 - regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);\n} else {\nContinuedFraction fraction = new ContinuedFraction() {\n\n@Override\nprotected double getB(int n, double x) {\ndouble ret;\ndouble m;\nif (n % 2 == 0) { // even\nm = n / 2.0;\nret = (m * (b - m) * x) /\n((a + (2 * m) - 1) * (a + (2 * m)));\n} else {\nm = (n - 1.0) / 2.0;\nret = -((a + m) * (a + b + m) * x) /\n((a + (2 * m)) * (a + (2 * m) + 1.0));\n}\nreturn ret;\n}\n\n@Override\nprotected double getA(int n, double x) {\nreturn 1.0;\n}\n};\nret = FastMath.exp((a * FastMath.log(x)) + (b * FastMath.log(1.0 - x)) -\nFastMath.log(a) - logBeta(a, b, epsilon, maxIterations)) *\n1.0 / fraction.evaluate(x, epsilon, maxIterations);\n}\n\nreturn ret;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.special.Beta$1:<init>(DD)V",
            "method_body": "public static double regularizedBeta(double x,\nif (Double.isNaN(x) ||\n} else if (x > (a + 1.0) / (a + b + 2.0)) {\nret = 1.0 - regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);\nContinuedFraction fraction = new ContinuedFraction() {\nif (n % 2 == 0) { // even\nm = n / 2.0;\nret = (m * (b - m) * x) /\nm = (n - 1.0) / 2.0;\nret = -((a + m) * (a + b + m) * x) /\nreturn ret;\nreturn 1.0;\nret = FastMath.exp((a * FastMath.log(x)) + (b * FastMath.log(1.0 - x)) -\nreturn ret;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.BinomialDistribution:getNumericalVariance()D",
            "method_body": "public double getNumericalVariance() {\nfinal double p = probabilityOfSuccess;\nreturn numberOfTrials * p * (1 - p);\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.special.Beta:regularizedBeta(DDD)D",
            "method_body": "public static double regularizedBeta(double x, double a, double b) {\nreturn regularizedBeta(x, a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.special.Beta$1:getB(ID)D",
            "method_body": "public static double regularizedBeta(double x,\nfinal double a, final double b,\ndouble epsilon, int maxIterations) {\ndouble ret;\n\nif (Double.isNaN(x) ||\nDouble.isNaN(a) ||\nDouble.isNaN(b) ||\nx < 0 ||\nx > 1 ||\na <= 0.0 ||\nb <= 0.0) {\nret = Double.NaN;\n} else if (x > (a + 1.0) / (a + b + 2.0)) {\nret = 1.0 - regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);\n} else {\nContinuedFraction fraction = new ContinuedFraction() {\n\n@Override\nprotected double getB(int n, double x) {\ndouble ret;\ndouble m;\nif (n % 2 == 0) { // even\nm = n / 2.0;\nret = (m * (b - m) * x) /\n((a + (2 * m) - 1) * (a + (2 * m)));\n} else {\nm = (n - 1.0) / 2.0;\nret = -((a + m) * (a + b + m) * x) /\n((a + (2 * m)) * (a + (2 * m) + 1.0));\n}\nreturn ret;\n}\n\n@Override\nprotected double getA(int n, double x) {\nreturn 1.0;\n}\n};\nret = FastMath.exp((a * FastMath.log(x)) + (b * FastMath.log(1.0 - x)) -\nFastMath.log(a) - logBeta(a, b, epsilon, maxIterations)) *\n1.0 / fraction.evaluate(x, epsilon, maxIterations);\n}\n\nreturn ret;\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.math3.util.ContinuedFraction:<init>()V",
            "method_body": "protected ContinuedFraction() {\nsuper();\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.AbstractIntegerDistribution:solveInverseCumulativeProbability(DII)I",
            "method_body": "protected int solveInverseCumulativeProbability(final double p, int lower, int upper) {\nwhile (lower + 1 < upper) {\nint xm = (lower + upper) / 2;\nif (xm < lower || xm > upper) {\n/*\n* Overflow.\n* There will never be an overflow in both calculation methods\n* for xm at the same time\n*/\nxm = lower + (upper - lower) / 2;\n}\n\ndouble pm = checkedCumulativeProbability(xm);\nif (pm >= p) {\nupper = xm;\n} else {\nlower = xm;\n}\n}\nreturn upper;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:exp(DD[D)D",
            "method_body": "private static double exp(double x, double extra, double[] hiPrec) {\ndouble intPartA;\ndouble intPartB;\nint intVal;\n\n/* Lookup exp(floor(x)).\n* intPartA will have the upper 22 bits, intPartB will have the lower\n* 52 bits.\n*/\nif (x < 0.0) {\nintVal = (int) -x;\n\nif (intVal > 746) {\nif (hiPrec != null) {\nhiPrec[0] = 0.0;\nhiPrec[1] = 0.0;\n}\nreturn 0.0;\n}\n\nif (intVal > 709) {\n/* This will produce a subnormal output */\nfinal double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;\nif (hiPrec != null) {\nhiPrec[0] /= 285040095144011776.0;\nhiPrec[1] /= 285040095144011776.0;\n}\nreturn result;\n}\n\nif (intVal == 709) {\n/* exp(1.494140625) is nearly a machine number... */\nfinal double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;\nif (hiPrec != null) {\nhiPrec[0] /= 4.455505956692756620;\nhiPrec[1] /= 4.455505956692756620;\n}\nreturn result;\n}\n\nintVal++;\n\nintPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];\nintPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];\n\nintVal = -intVal;\n} else {\nintVal = (int) x;\n\nif (intVal > 709) {\nif (hiPrec != null) {\nhiPrec[0] = Double.POSITIVE_INFINITY;\nhiPrec[1] = 0.0;\n}\nreturn Double.POSITIVE_INFINITY;\n}\n\nintPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];\nintPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];\n}\n\n/* Get the fractional part of x, find the greatest multiple of 2^-10 less than\n* x and look up the exp function of it.\n* fracPartA will have the upper 22 bits, fracPartB the lower 52 bits.\n*/\nfinal int intFrac = (int) ((x - intVal) * 1024.0);\nfinal double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];\nfinal double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];\n\n/* epsilon is the difference in x from the nearest multiple of 2^-10.  It\n* has a value in the range 0 <= epsilon < 2^-10.\n* Do the subtraction from x as the last step to avoid possible loss of percison.\n*/\nfinal double epsilon = x - (intVal + intFrac / 1024.0);\n\n/* Compute z = exp(epsilon) - 1.0 via a minimax polynomial.  z has\nfull double precision (52 bits).  Since z < 2^-10, we will have\n62 bits of precision when combined with the contant 1.  This will be\nused in the last addition below to get proper rounding. */\n\n/* Remez generated polynomial.  Converges on the interval [0, 2^-10], error\nis less than 0.5 ULP */\ndouble z = 0.04168701738764507;\nz = z * epsilon + 0.1666666505023083;\nz = z * epsilon + 0.5000000000042687;\nz = z * epsilon + 1.0;\nz = z * epsilon + -3.940510424527919E-20;\n\n/* Compute (intPartA+intPartB) * (fracPartA+fracPartB) by binomial\nexpansion.\ntempA is exact since intPartA and intPartB only have 22 bits each.\ntempB will have 52 bits of precision.\n*/\ndouble tempA = intPartA * fracPartA;\ndouble tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;\n\n/* Compute the result.  (1+z)(tempA+tempB).  Order of operations is\nimportant.  For accuracy add by increasing size.  tempA is exact and\nmuch larger than the others.  If there are extra bits specified from the\npow() function, use them. */\nfinal double tempC = tempB + tempA;\nfinal double result;\nif (extra != 0.0) {\nresult = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;\n} else {\nresult = tempC*z + tempB + tempA;\n}\n\nif (hiPrec != null) {\n// If requesting high precision\nhiPrec[0] = tempA;\nhiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;\n}\n\nreturn result;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math3.distribution.AbstractIntegerDistribution:inverseCumulativeProbability(D)I",
            "method_body": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\nif (p < 0.0 || p > 1.0) {\nthrow new OutOfRangeException(p, 0, 1);\n}\n\nint lower = getSupportLowerBound();\nif (p == 0.0) {\nreturn lower;\n}\nif (lower == Integer.MIN_VALUE) {\nif (checkedCumulativeProbability(lower) >= p) {\nreturn lower;\n}\n} else {\nlower -= 1; // this ensures cumulativeProbability(lower) < p, which\n// is important for the solving step\n}\n\nint upper = getSupportUpperBound();\nif (p == 1.0) {\nreturn upper;\n}\n\n// use the one-sided Chebyshev inequality to narrow the bracket\n// cf. AbstractRealDistribution.inverseCumulativeProbability(double)\nfinal double mu = getNumericalMean();\nfinal double sigma = FastMath.sqrt(getNumericalVariance());\nfinal boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\nDouble.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\nif (chebyshevApplies) {\ndouble k = FastMath.sqrt((1.0 - p) / p);\ndouble tmp = mu - k * sigma;\nif (tmp > lower) {\nlower = ((int) Math.ceil(tmp)) - 1;\n}\nk = 1.0 / k;\ntmp = mu + k * sigma;\nif (tmp < upper) {\nupper = ((int) Math.ceil(tmp)) - 1;\n}\n}\n\nreturn solveInverseCumulativeProbability(p, lower, upper);\n}",
            "method_id": 24
        }
    ]
}
{
    "bug_id": 29,
    "test_id": 1,
    "test_name": "org.apache.commons.math3.linear.SparseRealVectorTest.testEbeDivideMixedTypes",
    "test_body": null,
    "stack_trace": "junit.framework.AssertionFailedError: entry #0, left = 0.0, right = 0.0 expected:<NaN> but was:<0.0>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.apache.commons.math3.linear.RealVectorAbstractTest.doTestEbeBinaryOperation(RealVectorAbstractTest.java:519)\nat org.apache.commons.math3.linear.RealVectorAbstractTest.testEbeDivideMixedTypes(RealVectorAbstractTest.java:595)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:ceil(D)D",
            "method_body": "public static double ceil(double x) {\ndouble y;\n\nif (x != x) { // NaN\nreturn x;\n}\n\ny = floor(x);\nif (y == x) {\nreturn y;\n}\n\ny += 1.0;\n\nif (y == 0) {\nreturn x*y;\n}\n\nreturn y;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:hashOf(I)I",
            "method_body": "private static int hashOf(final int key) {\nfinal int h = key ^ ((key >>> 20) ^ (key >>> 12));\nreturn h ^ (h >>> 7) ^ (h >>> 4);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:changeIndexSign(I)I",
            "method_body": "private static int changeIndexSign(final int index) {\nreturn -index - 1;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:get(I)D",
            "method_body": "public double get(final int key) {\n\nfinal int hash  = hashOf(key);\nint index = hash & mask;\nif (containsKey(key, index)) {\nreturn values[index];\n}\n\nif (states[index] == FREE) {\nreturn missingEntries;\n}\n\nint j = index;\nfor (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\nj = probe(perturb, j);\nindex = j & mask;\nif (containsKey(key, index)) {\nreturn values[index];\n}\n}\n\nreturn missingEntries;\n\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:<init>(D)V",
            "method_body": "public OpenIntToDoubleHashMap(final double missingEntries) {\nthis(DEFAULT_EXPECTED_SIZE, missingEntries);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator:key()I",
            "method_body": "public int key()\nthrows ConcurrentModificationException, NoSuchElementException {\nif (referenceCount != count) {\nthrow new ConcurrentModificationException();\n}\nif (current < 0) {\nthrow new NoSuchElementException();\n}\nreturn keys[current];\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:iterator()Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator;",
            "method_body": "public Iterator iterator() {\nreturn new Iterator();\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:put(ID)D",
            "method_body": "public double put(final int key, final double value) {\nint index = findInsertionIndex(key);\ndouble previous = missingEntries;\nboolean newMapping = true;\nif (index < 0) {\nindex = changeIndexSign(index);\nprevious = values[index];\nnewMapping = false;\n}\nkeys[index]   = key;\nstates[index] = FULL;\nvalues[index] = value;\nif (newMapping) {\n++size;\nif (shouldGrowTable()) {\ngrowTable();\n}\n++count;\n}\nreturn previous;\n\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator:hasNext()Z",
            "method_body": "public boolean hasNext() {\nreturn next >= 0;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:<init>(ID)V",
            "method_body": "public OpenIntToDoubleHashMap(final int expectedSize,\nfinal double missingEntries) {\nfinal int capacity = computeCapacity(expectedSize);\nkeys   = new int[capacity];\nvalues = new double[capacity];\nstates = new byte[capacity];\nthis.missingEntries = missingEntries;\nmask   = capacity - 1;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math3.linear.OpenMapRealVector:getEntries()Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;",
            "method_body": "private OpenIntToDoubleHashMap getEntries() {\nreturn entries;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.linear.OpenMapRealVector:setEntry(ID)V",
            "method_body": "public void setEntry(int index, double value) {\ncheckIndex(index);\nif (!isDefaultValue(value)) {\nentries.put(index, value);\n} else if (entries.containsKey(index)) {\nentries.remove(index);\n}\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:remove(I)D",
            "method_body": "public double remove(final int key) {\n\nfinal int hash  = hashOf(key);\nint index = hash & mask;\nif (containsKey(key, index)) {\nreturn doRemove(index);\n}\n\nif (states[index] == FREE) {\nreturn missingEntries;\n}\n\nint j = index;\nfor (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\nj = probe(perturb, j);\nindex = j & mask;\nif (containsKey(key, index)) {\nreturn doRemove(index);\n}\n}\n\nreturn missingEntries;\n\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:probe(II)I",
            "method_body": "private static int probe(final int perturb, final int j) {\nreturn (j << 2) + j + perturb + 1;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:containsKey(II)Z",
            "method_body": "private boolean containsKey(final int key, final int index) {\nreturn (key != 0 || states[index] == FULL) && keys[index] == key;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:doRemove(I)D",
            "method_body": "private double doRemove(int index) {\nkeys[index]   = 0;\nstates[index] = REMOVED;\nfinal double previous = values[index];\nvalues[index] = missingEntries;\n--size;\n++count;\nreturn previous;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:growTable()V",
            "method_body": "private void growTable() {\n\nfinal int oldLength      = states.length;\nfinal int[] oldKeys      = keys;\nfinal double[] oldValues = values;\nfinal byte[] oldStates   = states;\n\nfinal int newLength = RESIZE_MULTIPLIER * oldLength;\nfinal int[] newKeys = new int[newLength];\nfinal double[] newValues = new double[newLength];\nfinal byte[] newStates = new byte[newLength];\nfinal int newMask = newLength - 1;\nfor (int i = 0; i < oldLength; ++i) {\nif (oldStates[i] == FULL) {\nfinal int key = oldKeys[i];\nfinal int index = findInsertionIndex(newKeys, newStates, key, newMask);\nnewKeys[index]   = key;\nnewValues[index] = oldValues[i];\nnewStates[index] = FULL;\n}\n}\n\nmask   = newMask;\nkeys   = newKeys;\nvalues = newValues;\nstates = newStates;\n\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.linear.OpenMapRealVector:getDimension()I",
            "method_body": "public int getDimension() {\nreturn virtualSize;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.linear.OpenMapRealVector:<init>([D)V",
            "method_body": "public OpenMapRealVector(double[] values) {\nthis(values, DEFAULT_ZERO_TOLERANCE);\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:findInsertionIndex(I)I",
            "method_body": "private int findInsertionIndex(final int key) {\nreturn findInsertionIndex(keys, states, key, mask);\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.math3.linear.OpenMapRealVector:ebeDivide(Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/OpenMapRealVector;",
            "method_body": "public OpenMapRealVector ebeDivide(RealVector v) {\ncheckVectorDimensions(v.getDimension());\nOpenMapRealVector res = new OpenMapRealVector(this);\n/*\n* MATH-803: it is not sufficient to loop through non zero entries of\n* this only. Indeed, if this[i] = 0d and v[i] = 0d, then\n* this[i] / v[i] = NaN, and not 0d.\n*/\nIterator iter = entries.iterator();\nwhile (iter.hasNext()) {\niter.advance();\nres.setEntry(iter.key(), iter.value() / v.getEntry(iter.key()));\n}\nreturn res;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator:<init>(Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;)V",
            "method_body": "private Iterator() {\n\n// preserve the modification count of the map to detect concurrent modifications later\nreferenceCount = count;\n\n// initialize current index\nnext = -1;\ntry {\nadvance();\n} catch (NoSuchElementException nsee) {\n// ignored\n}\n\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math3.linear.OpenMapRealVector:<init>(Lorg/apache/commons/math3/linear/OpenMapRealVector;)V",
            "method_body": "public OpenMapRealVector(OpenMapRealVector v) {\nvirtualSize = v.getDimension();\nentries = new OpenIntToDoubleHashMap(v.getEntries());\nepsilon = v.epsilon;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator:advance()V",
            "method_body": "public void advance()\nthrows ConcurrentModificationException, NoSuchElementException {\n\nif (referenceCount != count) {\nthrow new ConcurrentModificationException();\n}\n\n// advance on step\ncurrent = next;\n\n// prepare next step\ntry {\nwhile (states[++next] != FULL) {\n// nothing to do\n}\n} catch (ArrayIndexOutOfBoundsException e) {\nnext = -2;\nif (current < 0) {\nthrow new NoSuchElementException();\n}\n}\n\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:computeCapacity(I)I",
            "method_body": "private static int computeCapacity(final int expectedSize) {\nif (expectedSize == 0) {\nreturn 1;\n}\nfinal int capacity   = (int) FastMath.ceil(expectedSize / LOAD_FACTOR);\nfinal int powerOfTwo = Integer.highestOneBit(capacity);\nif (powerOfTwo == capacity) {\nreturn capacity;\n}\nreturn nextPowerOfTwo(capacity);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math3.linear.RealVector:checkIndex(I)V",
            "method_body": "protected void checkIndex(final int index) {\nif (index < 0 ||\nindex >= getDimension()) {\nthrow new OutOfRangeException(LocalizedFormats.INDEX,\nindex, 0, getDimension() - 1);\n}\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math3.linear.RealVector:checkVectorDimensions(I)V",
            "method_body": "protected void checkVectorDimensions(int n) {\nint d = getDimension();\nif (d != n) {\nthrow new DimensionMismatchException(d, n);\n}\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:floor(D)D",
            "method_body": "public static double floor(double x) {\nlong y;\n\nif (x != x) { // NaN\nreturn x;\n}\n\nif (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {\nreturn x;\n}\n\ny = (long) x;\nif (x < 0 && y != x) {\ny--;\n}\n\nif (y == 0) {\nreturn x*y;\n}\n\nreturn y;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:perturb(I)I",
            "method_body": "private static int perturb(final int hash) {\nreturn hash & 0x7fffffff;\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.math3.linear.OpenMapRealVector:<init>([DD)V",
            "method_body": "public OpenMapRealVector(double[] values, double epsilon) {\nvirtualSize = values.length;\nentries = new OpenIntToDoubleHashMap(0.0);\nthis.epsilon = epsilon;\nfor (int key = 0; key < values.length; key++) {\ndouble value = values[key];\nif (!isDefaultValue(value)) {\nentries.put(key, value);\n}\n}\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:containsKey(I)Z",
            "method_body": "public boolean containsKey(final int key) {\n\nfinal int hash  = hashOf(key);\nint index = hash & mask;\nif (containsKey(key, index)) {\nreturn true;\n}\n\nif (states[index] == FREE) {\nreturn false;\n}\n\nint j = index;\nfor (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\nj = probe(perturb, j);\nindex = j & mask;\nif (containsKey(key, index)) {\nreturn true;\n}\n}\n\nreturn false;\n\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:<init>(Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;)V",
            "method_body": "public OpenIntToDoubleHashMap(final OpenIntToDoubleHashMap source) {\nfinal int length = source.keys.length;\nkeys = new int[length];\nSystem.arraycopy(source.keys, 0, keys, 0, length);\nvalues = new double[length];\nSystem.arraycopy(source.values, 0, values, 0, length);\nstates = new byte[length];\nSystem.arraycopy(source.states, 0, states, 0, length);\nmissingEntries = source.missingEntries;\nsize  = source.size;\nmask  = source.mask;\ncount = source.count;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math3.linear.OpenMapRealVector:getEntry(I)D",
            "method_body": "public double getEntry(int index) {\ncheckIndex(index);\nreturn entries.get(index);\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator:value()D",
            "method_body": "public double value()\nthrows ConcurrentModificationException, NoSuchElementException {\nif (referenceCount != count) {\nthrow new ConcurrentModificationException();\n}\nif (current < 0) {\nthrow new NoSuchElementException();\n}\nreturn values[current];\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math3.linear.OpenMapRealVector:isDefaultValue(D)Z",
            "method_body": "protected boolean isDefaultValue(double value) {\nreturn FastMath.abs(value) < epsilon;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:findInsertionIndex([I[BII)I",
            "method_body": "private static int findInsertionIndex(final int[] keys, final byte[] states,\nfinal int key, final int mask) {\nfinal int hash = hashOf(key);\nint index = hash & mask;\nif (states[index] == FREE) {\nreturn index;\n} else if (states[index] == FULL && keys[index] == key) {\nreturn changeIndexSign(index);\n}\n\nint perturb = perturb(hash);\nint j = index;\nif (states[index] == FULL) {\nwhile (true) {\nj = probe(perturb, j);\nindex = j & mask;\nperturb >>= PERTURB_SHIFT;\n\nif (states[index] != FULL || keys[index] == key) {\nbreak;\n}\n}\n}\n\nif (states[index] == FREE) {\nreturn index;\n} else if (states[index] == FULL) {\n// due to the loop exit condition,\n// if (states[index] == FULL) then keys[index] == key\nreturn changeIndexSign(index);\n}\n\nfinal int firstRemoved = index;\nwhile (true) {\nj = probe(perturb, j);\nindex = j & mask;\n\nif (states[index] == FREE) {\nreturn firstRemoved;\n} else if (states[index] == FULL && keys[index] == key) {\nreturn changeIndexSign(index);\n}\n\nperturb >>= PERTURB_SHIFT;\n\n}\n\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap:shouldGrowTable()Z",
            "method_body": "private boolean shouldGrowTable() {\nreturn size > (mask + 1) * LOAD_FACTOR;\n}",
            "method_id": 37
        }
    ]
}
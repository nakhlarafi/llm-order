{
    "bug_id": 63,
    "test_id": 0,
    "test_name": "org.apache.commons.math.util.MathUtilsTest.testArrayEquals",
    "test_body": "public void testArrayEquals() {\nassertFalse(MathUtils.equals(new double[] { 1d }, null));\nassertFalse(MathUtils.equals(null, new double[] { 1d }));\nassertTrue(MathUtils.equals((double[]) null, (double[]) null));\nassertFalse(MathUtils.equals(new double[] { 1d }, new double[0]));\nassertTrue(MathUtils.equals(new double[] { 1d }, new double[] { 1d }));\nassertTrue(MathUtils.equals(new double[] {\nDouble.POSITIVE_INFINITY,\nDouble.NEGATIVE_INFINITY, 1d, 0d\n}, new double[] {\nDouble.POSITIVE_INFINITY,\nDouble.NEGATIVE_INFINITY, 1d, 0d\n}));\nassertFalse(MathUtils.equals(new double[] { Double.NaN },\nnew double[] { Double.NaN }));\nassertFalse(MathUtils.equals(new double[] { Double.POSITIVE_INFINITY },\nnew double[] { Double.NEGATIVE_INFINITY }));\nassertFalse(MathUtils.equals(new double[] { 1d },\nnew double[] { FastMath.nextAfter(FastMath.nextAfter(1d, 2d), 2d) }));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError\nat junit.framework.Assert.fail(Assert.java:55)\nat junit.framework.Assert.assertTrue(Assert.java:22)\nat junit.framework.Assert.assertFalse(Assert.java:39)\nat junit.framework.Assert.assertFalse(Assert.java:47)\nat junit.framework.TestCase.assertFalse(TestCase.java:219)\nat org.apache.commons.math.util.MathUtilsTest.testArrayEquals(MathUtilsTest.java:456)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:equals(DD)Z",
            "method_body": "public static boolean equals(double x, double y) {\nreturn (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:equals([D[D)Z",
            "method_body": "public static boolean equals(double[] x, double[] y) {\nif ((x == null) || (y == null)) {\nreturn !((x == null) ^ (y == null));\n}\nif (x.length != y.length) {\nreturn false;\n}\nfor (int i = 0; i < x.length; ++i) {\nif (!equals(x[i], y[i])) {\nreturn false;\n}\n}\nreturn true;\n}",
            "method_id": 1
        }
    ]
}
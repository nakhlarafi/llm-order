{
    "bug_id": 78,
    "test_id": 0,
    "test_name": "org.apache.commons.math.ode.events.EventStateTest.closeEvents",
    "test_body": "public void closeEvents()\nthrows EventException, ConvergenceException, DerivativeException {\nfinal double r1  = 90.0;\nfinal double r2  = 135.0;\nfinal double gap = r2 - r1;\nEventHandler closeEventsGenerator = new EventHandler() {\npublic void resetState(double t, double[] y) {\n}\npublic double g(double t, double[] y) {\nreturn (t - r1) * (r2 - t);\n}\npublic int eventOccurred(double t, double[] y, boolean increasing) {\nreturn CONTINUE;\n}\n};\nfinal double tolerance = 0.1;\nEventState es = new EventState(closeEventsGenerator, 1.5 * gap, tolerance, 10);\ndouble t0 = r1 - 0.5 * gap;\nes.reinitializeBegin(t0, new double[0]);\nAbstractStepInterpolator interpolator =\nnew DummyStepInterpolator(new double[0], true);\ninterpolator.storeTime(t0);\ninterpolator.shift();\ninterpolator.storeTime(0.5 * (r1 + r2));\nAssert.assertTrue(es.evaluateStep(interpolator));\nAssert.assertEquals(r1, es.getEventTime(), tolerance);\nes.stepAccepted(es.getEventTime(), new double[0]);\ninterpolator.shift();\ninterpolator.storeTime(r2 + 0.4 * gap);\nAssert.assertTrue(es.evaluateStep(interpolator));\nAssert.assertEquals(r2, es.getEventTime(), tolerance);\n}\n",
    "stack_trace": "org.apache.commons.math.MathRuntimeException$4: function values at endpoints do not have different signs.  Endpoints: [89.999, 153.1], Values: [-0.066, -1,142.11]\nat org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:305)\nat org.apache.commons.math.analysis.solvers.BrentSolver.solve(BrentSolver.java:178)\nat org.apache.commons.math.ode.events.EventState.evaluateStep(EventState.java:218)\nat org.apache.commons.math.ode.events.EventStateTest.closeEvents(EventStateTest.java:66)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DD)D",
            "method_body": "public double solve(final UnivariateRealFunction f,\nfinal double min, final double max)\nthrows MaxIterationsExceededException,\nFunctionEvaluationException {\n\nclearResult();\nverifyInterval(min, max);\n\ndouble ret = Double.NaN;\n\ndouble yMin = f.value(min);\ndouble yMax = f.value(max);\n\n// Verify bracketing\ndouble sign = yMin * yMax;\nif (sign > 0) {\n// check if either value is close to a zero\nif (Math.abs(yMin) <= functionValueAccuracy) {\nsetResult(min, 0);\nret = min;\n} else if (Math.abs(yMax) <= functionValueAccuracy) {\nsetResult(max, 0);\nret = max;\n} else {\n// neither value is close to zero and min and max do not bracket root.\nthrow MathRuntimeException.createIllegalArgumentException(\n\"function values at endpoints do not have different signs.  \" +\n\"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\nmin, max, yMin, yMax);\n}\n} else if (sign < 0){\n// solve using only the first endpoint as initial guess\nret = solve(f, min, yMin, max, yMax, min, yMin);\n} else {\n// either min or max is a root\nif (yMin == 0.0) {\nret = min;\n} else {\nret = max;\n}\n}\n\nreturn ret;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:<init>(ID)V",
            "method_body": "protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,\nfinal double defaultAbsoluteAccuracy) {\nthis.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;\nthis.defaultRelativeAccuracy = 1.0e-14;\nthis.absoluteAccuracy = defaultAbsoluteAccuracy;\nthis.relativeAccuracy = defaultRelativeAccuracy;\nthis.defaultMaximalIterationCount = defaultMaximalIterationCount;\nthis.maximalIterationCount = defaultMaximalIterationCount;\nthis.iterationCount = 0;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.ode.events.EventState:getEventTime()D",
            "method_body": "public double getEventTime() {\nreturn pendingEventTime;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator:<init>([DZ)V",
            "method_body": "protected AbstractStepInterpolator(final double[] y, final boolean forward) {\n\npreviousTime      = Double.NaN;\ncurrentTime       = Double.NaN;\nh                 = Double.NaN;\ninterpolatedTime  = Double.NaN;\n\ncurrentState            = y;\ninterpolatedState       = new double[y.length];\ninterpolatedDerivatives = new double[y.length];\n\nfinalized         = false;\nthis.forward      = forward;\nthis.dirtyState   = true;\n\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.analysis.solvers.BrentSolver:<init>()V",
            "method_body": "public BrentSolver() {\nsuper(100, 1E-6);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.ode.events.EventState$1:value(D)D",
            "method_body": "public boolean evaluateStep(final StepInterpolator interpolator)\nthrows DerivativeException, EventException, ConvergenceException {\n\ntry {\n\nforward = interpolator.isForward();\nfinal double t1 = interpolator.getCurrentTime();\nfinal int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\nfinal double h  = (t1 - t0) / n;\n\ndouble ta = t0;\ndouble ga = g0;\ndouble tb = t0 + (interpolator.isForward() ? convergence : -convergence);\nfor (int i = 0; i < n; ++i) {\n\n// evaluate handler value at the end of the substep\ntb += h;\ninterpolator.setInterpolatedTime(tb);\nfinal double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n// check events occurrence\nif (g0Positive ^ (gb >= 0)) {\n// there is a sign change: an event is expected during this step\n\n// this is a corner case:\n// - there was an event near ta,\n// - there is another event between ta and tb\n// - when ta was computed, convergence was reached on the \"wrong side\" of the interval\n// this implies that the real sign of ga is the same as gb, so we need to slightly\n// shift ta to make sure ga and gb get opposite signs and the solver won't complain\n// about bracketing\n// this should never happen\n\n// variation direction, with respect to the integration direction\nincreasing = gb >= ga;\n\nfinal UnivariateRealFunction f = new UnivariateRealFunction() {\npublic double value(final double t) throws FunctionEvaluationException {\ntry {\ninterpolator.setInterpolatedTime(t);\nreturn handler.g(t, interpolator.getInterpolatedState());\n} catch (DerivativeException e) {\nthrow new FunctionEvaluationException(e, t);\n} catch (EventException e) {\nthrow new FunctionEvaluationException(e, t);\n}\n}\n};\nfinal BrentSolver solver = new BrentSolver();\nsolver.setAbsoluteAccuracy(convergence);\nsolver.setMaximalIterationCount(maxIterationCount);\nfinal double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\nif ((Math.abs(root - ta) <= convergence) &&\n(Math.abs(root - previousEventTime) <= convergence)) {\n// we have either found nothing or found (again ?) a past event, we simply ignore it\nta = tb;\nga = gb;\n} else if (Double.isNaN(previousEventTime) ||\n(Math.abs(previousEventTime - root) > convergence)) {\npendingEventTime = root;\nif (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n// we were already waiting for this event which was\n// found during a previous call for a step that was\n// rejected, this step must now be accepted since it\n// properly ends exactly at the event occurrence\nreturn false;\n}\n// either we were not waiting for the event or it has\n// moved in such a way the step cannot be accepted\npendingEvent = true;\nreturn true;\n}\n\n} else {\n// no sign change: there is no event for now\nta = tb;\nga = gb;\n}\n\n}\n\n// no event during the whole step\npendingEvent     = false;\npendingEventTime = Double.NaN;\nreturn false;\n\n} catch (FunctionEvaluationException e) {\nfinal Throwable cause = e.getCause();\nif ((cause != null) && (cause instanceof DerivativeException)) {\nthrow (DerivativeException) cause;\n} else if ((cause != null) && (cause instanceof EventException)) {\nthrow (EventException) cause;\n}\nthrow new EventException(e);\n}\n\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator:storeTime(D)V",
            "method_body": "public void storeTime(final double t) {\n\ncurrentTime = t;\nh           = currentTime - previousTime;\nsetInterpolatedTime(t);\n\n// the step is not finalized anymore\nfinalized  = false;\n\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.ode.events.EventState:evaluateStep(Lorg/apache/commons/math/ode/sampling/StepInterpolator;)Z",
            "method_body": "public boolean evaluateStep(final StepInterpolator interpolator)\nthrows DerivativeException, EventException, ConvergenceException {\n\ntry {\n\nforward = interpolator.isForward();\nfinal double t1 = interpolator.getCurrentTime();\nfinal int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\nfinal double h  = (t1 - t0) / n;\n\ndouble ta = t0;\ndouble ga = g0;\ndouble tb = t0 + (interpolator.isForward() ? convergence : -convergence);\nfor (int i = 0; i < n; ++i) {\n\n// evaluate handler value at the end of the substep\ntb += h;\ninterpolator.setInterpolatedTime(tb);\nfinal double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n// check events occurrence\nif (g0Positive ^ (gb >= 0)) {\n// there is a sign change: an event is expected during this step\n\n// this is a corner case:\n// - there was an event near ta,\n// - there is another event between ta and tb\n// - when ta was computed, convergence was reached on the \"wrong side\" of the interval\n// this implies that the real sign of ga is the same as gb, so we need to slightly\n// shift ta to make sure ga and gb get opposite signs and the solver won't complain\n// about bracketing\n// this should never happen\n\n// variation direction, with respect to the integration direction\nincreasing = gb >= ga;\n\nfinal UnivariateRealFunction f = new UnivariateRealFunction() {\npublic double value(final double t) throws FunctionEvaluationException {\ntry {\ninterpolator.setInterpolatedTime(t);\nreturn handler.g(t, interpolator.getInterpolatedState());\n} catch (DerivativeException e) {\nthrow new FunctionEvaluationException(e, t);\n} catch (EventException e) {\nthrow new FunctionEvaluationException(e, t);\n}\n}\n};\nfinal BrentSolver solver = new BrentSolver();\nsolver.setAbsoluteAccuracy(convergence);\nsolver.setMaximalIterationCount(maxIterationCount);\nfinal double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\nif ((Math.abs(root - ta) <= convergence) &&\n(Math.abs(root - previousEventTime) <= convergence)) {\n// we have either found nothing or found (again ?) a past event, we simply ignore it\nta = tb;\nga = gb;\n} else if (Double.isNaN(previousEventTime) ||\n(Math.abs(previousEventTime - root) > convergence)) {\npendingEventTime = root;\nif (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n// we were already waiting for this event which was\n// found during a previous call for a step that was\n// rejected, this step must now be accepted since it\n// properly ends exactly at the event occurrence\nreturn false;\n}\n// either we were not waiting for the event or it has\n// moved in such a way the step cannot be accepted\npendingEvent = true;\nreturn true;\n}\n\n} else {\n// no sign change: there is no event for now\nta = tb;\nga = gb;\n}\n\n}\n\n// no event during the whole step\npendingEvent     = false;\npendingEventTime = Double.NaN;\nreturn false;\n\n} catch (FunctionEvaluationException e) {\nfinal Throwable cause = e.getCause();\nif ((cause != null) && (cause instanceof DerivativeException)) {\nthrow (DerivativeException) cause;\n} else if ((cause != null) && (cause instanceof EventException)) {\nthrow (EventException) cause;\n}\nthrow new EventException(e);\n}\n\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDDDD)D",
            "method_body": "private double solve(final UnivariateRealFunction f,\ndouble x0, double y0,\ndouble x1, double y1,\ndouble x2, double y2)\nthrows MaxIterationsExceededException, FunctionEvaluationException {\n\ndouble delta = x1 - x0;\ndouble oldDelta = delta;\n\nint i = 0;\nwhile (i < maximalIterationCount) {\nif (Math.abs(y2) < Math.abs(y1)) {\n// use the bracket point if is better than last approximation\nx0 = x1;\nx1 = x2;\nx2 = x0;\ny0 = y1;\ny1 = y2;\ny2 = y0;\n}\nif (Math.abs(y1) <= functionValueAccuracy) {\n// Avoid division by very small values. Assume\n// the iteration has converged (the problem may\n// still be ill conditioned)\nsetResult(x1, i);\nreturn result;\n}\ndouble dx = x2 - x1;\ndouble tolerance =\nMath.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);\nif (Math.abs(dx) <= tolerance) {\nsetResult(x1, i);\nreturn result;\n}\nif ((Math.abs(oldDelta) < tolerance) ||\n(Math.abs(y0) <= Math.abs(y1))) {\n// Force bisection.\ndelta = 0.5 * dx;\noldDelta = delta;\n} else {\ndouble r3 = y1 / y0;\ndouble p;\ndouble p1;\n// the equality test (x0 == x2) is intentional,\n// it is part of the original Brent's method,\n// it should NOT be replaced by proximity test\nif (x0 == x2) {\n// Linear interpolation.\np = dx * r3;\np1 = 1.0 - r3;\n} else {\n// Inverse quadratic interpolation.\ndouble r1 = y0 / y2;\ndouble r2 = y1 / y2;\np = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));\np1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n}\nif (p > 0.0) {\np1 = -p1;\n} else {\np = -p;\n}\nif (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||\np >= Math.abs(0.5 * oldDelta * p1)) {\n// Inverse quadratic interpolation gives a value\n// in the wrong direction, or progress is slow.\n// Fall back to bisection.\ndelta = 0.5 * dx;\noldDelta = delta;\n} else {\noldDelta = delta;\ndelta = p / p1;\n}\n}\n// Save old X1, Y1\nx0 = x1;\ny0 = y1;\n// Compute new X1, Y1\nif (Math.abs(delta) > tolerance) {\nx1 = x1 + delta;\n} else if (dx > 0.0) {\nx1 = x1 + 0.5 * tolerance;\n} else if (dx <= 0.0) {\nx1 = x1 - 0.5 * tolerance;\n}\ny1 = f.value(x1);\nif ((y1 > 0) == (y2 > 0)) {\nx2 = x0;\ny2 = y0;\ndelta = x1 - x0;\noldDelta = delta;\n}\ni++;\n}\nthrow new MaxIterationsExceededException(maximalIterationCount);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.ode.events.EventState:<init>(Lorg/apache/commons/math/ode/events/EventHandler;DDI)V",
            "method_body": "public EventState(final EventHandler handler, final double maxCheckInterval,\nfinal double convergence, final int maxIterationCount) {\nthis.handler           = handler;\nthis.maxCheckInterval  = maxCheckInterval;\nthis.convergence       = Math.abs(convergence);\nthis.maxIterationCount = maxIterationCount;\n\n// some dummy values ...\nt0                = Double.NaN;\ng0                = Double.NaN;\ng0Positive        = true;\npendingEvent      = false;\npendingEventTime  = Double.NaN;\npreviousEventTime = Double.NaN;\nincreasing        = true;\nnextAction        = EventHandler.CONTINUE;\n\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator:isForward()Z",
            "method_body": "public boolean isForward() {\nreturn forward;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator:getInterpolatedState()[D",
            "method_body": "public double[] getInterpolatedState() throws DerivativeException {\n\n// lazy evaluation of the state\nif (dirtyState) {\nfinal double oneMinusThetaH = currentTime - interpolatedTime;\nfinal double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;\ncomputeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);\ndirtyState = false;\n}\n\nreturn interpolatedState;\n\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.MathRuntimeException$4:<init>(Ljava/lang/String;[Ljava/lang/Object;)V",
            "method_body": "public static IllegalArgumentException createIllegalArgumentException(final String pattern,\nreturn new IllegalArgumentException() {\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.MathRuntimeException:createIllegalArgumentException(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;",
            "method_body": "public static IllegalArgumentException createIllegalArgumentException(final String pattern,\nfinal Object ... arguments) {\nreturn new IllegalArgumentException() {\n\n/** Serializable version identifier. */\nprivate static final long serialVersionUID = -6555453980658317913L;\n\n/** {@inheritDoc} */\n@Override\npublic String getMessage() {\nreturn buildMessage(Locale.US, pattern, arguments);\n}\n\n/** {@inheritDoc} */\n@Override\npublic String getLocalizedMessage() {\nreturn buildMessage(Locale.getDefault(), pattern, arguments);\n}\n\n};\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:setResult(DI)V",
            "method_body": "protected final void setResult(final double newResult, final int iterationCount) {\nthis.result         = newResult;\nthis.iterationCount = iterationCount;\nthis.resultComputed = true;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator:shift()V",
            "method_body": "public void shift() {\npreviousTime = currentTime;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.ode.events.EventState:stepAccepted(D[D)V",
            "method_body": "public void stepAccepted(final double t, final double[] y)\nthrows EventException {\n\nt0 = t;\ng0 = handler.g(t, y);\n\nif (pendingEvent) {\n// force the sign to its value \"just after the event\"\npreviousEventTime = t;\ng0Positive        = increasing;\nnextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));\n} else {\ng0Positive = g0 >= 0;\nnextAction = EventHandler.CONTINUE;\n}\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.ode.events.EventState:reinitializeBegin(D[D)V",
            "method_body": "public void reinitializeBegin(final double tStart, final double[] yStart)\nthrows EventException {\nt0 = tStart;\ng0 = handler.g(tStart, yStart);\ng0Positive = g0 >= 0;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator:setInterpolatedTime(D)V",
            "method_body": "public void setInterpolatedTime(final double time) {\ninterpolatedTime = time;\ndirtyState       = true;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math.ode.sampling.AbstractStepInterpolator:getCurrentTime()D",
            "method_body": "public double getCurrentTime() {\nreturn currentTime;\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:setAbsoluteAccuracy(D)V",
            "method_body": "public void setAbsoluteAccuracy(double accuracy) {\nabsoluteAccuracy = accuracy;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.ode.sampling.DummyStepInterpolator:<init>([DZ)V",
            "method_body": "public DummyStepInterpolator(final double[] y, final boolean forward) {\nsuper(y, forward);\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.ode.events.EventState$1:<init>(Lorg/apache/commons/math/ode/events/EventState;Lorg/apache/commons/math/ode/sampling/StepInterpolator;)V",
            "method_body": "public boolean evaluateStep(final StepInterpolator interpolator)\nforward = interpolator.isForward();\nfinal double t1 = interpolator.getCurrentTime();\nfinal int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\nfinal double h  = (t1 - t0) / n;\ndouble ta = t0;\ndouble ga = g0;\ndouble tb = t0 + (interpolator.isForward() ? convergence : -convergence);\nfor (int i = 0; i < n; ++i) {\ntb += h;\ninterpolator.setInterpolatedTime(tb);\nfinal double gb = handler.g(tb, interpolator.getInterpolatedState());\nif (g0Positive ^ (gb >= 0)) {\nincreasing = gb >= ga;\nfinal UnivariateRealFunction f = new UnivariateRealFunction() {\ninterpolator.setInterpolatedTime(t);\nreturn handler.g(t, interpolator.getInterpolatedState());\nfinal BrentSolver solver = new BrentSolver();\nsolver.setAbsoluteAccuracy(convergence);\nsolver.setMaximalIterationCount(maxIterationCount);\nfinal double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\nif ((Math.abs(root - ta) <= convergence) &&\n} else if (Double.isNaN(previousEventTime) ||\npendingEventTime = root;\nif (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\npendingEvent = true;\nreturn true;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:clearResult()V",
            "method_body": "protected final void clearResult() {\nthis.iterationCount = 0;\nthis.resultComputed = false;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:setMaximalIterationCount(I)V",
            "method_body": "public void setMaximalIterationCount(int count) {\nmaximalIterationCount = count;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:verifyInterval(DD)V",
            "method_body": "protected void verifyInterval(final double lower, final double upper) {\nif (lower >= upper) {\nthrow MathRuntimeException.createIllegalArgumentException(\n\"endpoints do not specify an interval: [{0}, {1}]\",\nlower, upper);\n}\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math.ode.sampling.DummyStepInterpolator:computeInterpolatedStateAndDerivatives(DD)V",
            "method_body": "protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)\nthrows DerivativeException {\nSystem.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:<init>(ID)V",
            "method_body": "protected UnivariateRealSolverImpl(final int defaultMaximalIterationCount,\nfinal double defaultAbsoluteAccuracy) {\nsuper(defaultMaximalIterationCount, defaultAbsoluteAccuracy);\nthis.defaultFunctionValueAccuracy = 1.0e-15;\nthis.functionValueAccuracy = defaultFunctionValueAccuracy;\n}",
            "method_id": 27
        }
    ]
}
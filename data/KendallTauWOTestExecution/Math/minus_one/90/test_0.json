{
    "bug_id": 90,
    "test_id": 0,
    "test_name": "org.apache.commons.math.stat.FrequencyTest.testAddNonComparable",
    "test_body": "public void testAddNonComparable(){\ntry {\nf.addValue(new Object()); // This was OK\nfail(\"Expected ClassCastException\");\n} catch (ClassCastException expected) {\n}\nf.clear();\nf.addValue(1);\ntry {\nf.addValue(new Object());\nfail(\"Expected ClassCastException\"); // Previously would have been IllegalArgument\n} catch (ClassCastException expected) {\n}\n}\n",
    "stack_trace": "java.lang.IllegalArgumentException: Value not comparable to existing values.\nat org.apache.commons.math.stat.Frequency.addValue(Frequency.java:134)\nat org.apache.commons.math.stat.FrequencyTest.testAddNonComparable(FrequencyTest.java:195)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.stat.Frequency:<init>()V",
            "method_body": "public Frequency() {\nfreqTable = new TreeMap();\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Object;)V",
            "method_body": "public void addValue(Object v) {\n\n/**\n* Adds 1 to the frequency count for v.\n* <p>\n* If other objects have already been added to this Frequency, v must\n* be comparable to those that have already been added.\n* </p>\n*\n* @param v the value to add.\n* @throws IllegalArgumentException if <code>v</code> is not comparable with previous entries\n*/\nObject obj = v;\nif (v instanceof Integer) {\nobj = Long.valueOf(((Integer) v).longValue());\n}\ntry {\nLong count = (Long) freqTable.get(obj);\nif (count == null) {\nfreqTable.put(obj, Long.valueOf(1));\n} else {\nfreqTable.put(obj, Long.valueOf(count.longValue() + 1));\n}\n} catch (ClassCastException ex) {\n//TreeMap will throw ClassCastException if v is not comparable\nthrow new IllegalArgumentException(\"Value not comparable to existing values.\");\n}\n}",
            "method_id": 1
        }
    ]
}
{
    "bug_id": 6,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest.testGetIterations",
    "test_body": null,
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertTrue(Assert.java:52)\nat org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest.testGetIterations(AbstractLeastSquaresOptimizerAbstractTest.java:131)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:checkRowIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V",
            "method_body": "public static void checkRowIndex(final AnyMatrix m, final int row)\nthrows OutOfRangeException {\nif (row < 0 ||\nrow >= m.getRowDimension()) {\nthrow new OutOfRangeException(LocalizedFormats.ROW_INDEX,\nrow, 0, m.getRowDimension() - 1);\n}\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.linear.DiagonalMatrix:<init>(I)V",
            "method_body": "public DiagonalMatrix(final int dimension)\nthrows NotStrictlyPositiveException {\nsuper(dimension, dimension);\ndata = new double[dimension];\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.optim.InitialGuess:<init>([D)V",
            "method_body": "public InitialGuess(double[] startPoint) {\ninit = startPoint.clone();\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:setSubMatrix([[DII)V",
            "method_body": "public void setSubMatrix(final double[][] subMatrix, final int row,\nfinal int column)\nthrows NoDataException, OutOfRangeException,\nDimensionMismatchException, NullArgumentException {\nif (data == null) {\nif (row > 0) {\nthrow new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);\n}\nif (column > 0) {\nthrow new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);\n}\nMathUtils.checkNotNull(subMatrix);\nfinal int nRows = subMatrix.length;\nif (nRows == 0) {\nthrow new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n}\n\nfinal int nCols = subMatrix[0].length;\nif (nCols == 0) {\nthrow new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n}\ndata = new double[subMatrix.length][nCols];\nfor (int i = 0; i < data.length; ++i) {\nif (subMatrix[i].length != nCols) {\nthrow new DimensionMismatchException(subMatrix[i].length, nCols);\n}\nSystem.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);\n}\n} else {\nsuper.setSubMatrix(subMatrix, row, column);\n}\n\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.linear.BlockRealMatrix:toBlocksLayout([[D)[[D",
            "method_body": "public static double[][] toBlocksLayout(final double[][] rawData)\nthrows DimensionMismatchException {\nfinal int rows = rawData.length;\nfinal int columns = rawData[0].length;\nfinal int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;\nfinal int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\n\n// safety checks\nfor (int i = 0; i < rawData.length; ++i) {\nfinal int length = rawData[i].length;\nif (length != columns) {\nthrow new DimensionMismatchException(columns, length);\n}\n}\n\n// convert array\nfinal double[][] blocks = new double[blockRows * blockColumns][];\nint blockIndex = 0;\nfor (int iBlock = 0; iBlock < blockRows; ++iBlock) {\nfinal int pStart = iBlock * BLOCK_SIZE;\nfinal int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);\nfinal int iHeight = pEnd - pStart;\nfor (int jBlock = 0; jBlock < blockColumns; ++jBlock) {\nfinal int qStart = jBlock * BLOCK_SIZE;\nfinal int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);\nfinal int jWidth = qEnd - qStart;\n\n// allocate new block\nfinal double[] block = new double[iHeight * jWidth];\nblocks[blockIndex] = block;\n\n// copy data\nint index = 0;\nfor (int p = pStart; p < pEnd; ++p) {\nSystem.arraycopy(rawData[p], qStart, block, index, jWidth);\nindex += jWidth;\n}\n++blockIndex;\n}\n}\n\nreturn blocks;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.util.Pair:<init>(Ljava/lang/Object;Ljava/lang/Object;)V",
            "method_body": "public Pair(K k, V v) {\nkey = k;\nvalue = v;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseOptimizer:getConvergenceChecker()Lorg/apache/commons/math3/optim/ConvergenceChecker;",
            "method_body": "public ConvergenceChecker<PAIR> getConvergenceChecker() {\nreturn checker;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.linear.BlockRealMatrix:<init>(II[[DZ)V",
            "method_body": "public BlockRealMatrix(final int rows, final int columns,\nfinal double[][] blockData, final boolean copyArray)\nthrows DimensionMismatchException, NotStrictlyPositiveException {\nsuper(rows, columns);\nthis.rows = rows;\nthis.columns = columns;\n\n// number of blocks\nblockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\n\nif (copyArray) {\n// allocate storage blocks, taking care of smaller ones at right and bottom\nblocks = new double[blockRows * blockColumns][];\n} else {\n// reference existing array\nblocks = blockData;\n}\n\nint index = 0;\nfor (int iBlock = 0; iBlock < blockRows; ++iBlock) {\nfinal int iHeight = blockHeight(iBlock);\nfor (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {\nif (blockData[index].length != iHeight * blockWidth(jBlock)) {\nthrow new DimensionMismatchException(blockData[index].length,\niHeight * blockWidth(jBlock));\n}\nif (copyArray) {\nblocks[index] = blockData[index].clone();\n}\n}\n}\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.optim.AbstractConvergenceChecker:getRelativeThreshold()D",
            "method_body": "public double getRelativeThreshold() {\nreturn relativeThreshold;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer:computeJacobian([D)[[D",
            "method_body": "protected double[][] computeJacobian(final double[] params) {\nreturn jacobian.value(params);\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math3.linear.DiagonalMatrix:operate([D)[D",
            "method_body": "public double[] operate(final double[] v)\nthrows DimensionMismatchException {\nreturn multiply(new DiagonalMatrix(v, false)).getDataRef();\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.linear.LUDecomposition$Solver:solve(Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/RealVector;",
            "method_body": "public RealVector solve(RealVector b) {\nfinal int m = pivot.length;\nif (b.getDimension() != m) {\nthrow new DimensionMismatchException(b.getDimension(), m);\n}\nif (singular) {\nthrow new SingularMatrixException();\n}\n\nfinal double[] bp = new double[m];\n\n// Apply permutations to b\nfor (int row = 0; row < m; row++) {\nbp[row] = b.getEntry(pivot[row]);\n}\n\n// Solve LY = b\nfor (int col = 0; col < m; col++) {\nfinal double bpCol = bp[col];\nfor (int i = col + 1; i < m; i++) {\nbp[i] -= bpCol * lu[i][col];\n}\n}\n\n// Solve UX = Y\nfor (int col = m - 1; col >= 0; col--) {\nbp[col] /= lu[col][col];\nfinal double bpCol = bp[col];\nfor (int i = 0; i < col; i++) {\nbp[i] -= bpCol * lu[i][col];\n}\n}\n\nreturn new ArrayRealVector(bp, false);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.linear.ArrayRealVector:getDimension()I",
            "method_body": "public int getDimension() {\nreturn data.length;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.linear.ArrayRealVector:dotProduct(Lorg/apache/commons/math3/linear/RealVector;)D",
            "method_body": "public double dotProduct(RealVector v) throws DimensionMismatchException {\nif (v instanceof ArrayRealVector) {\nfinal double[] vData = ((ArrayRealVector) v).data;\ncheckVectorDimensions(vData.length);\ndouble dot = 0;\nfor (int i = 0; i < data.length; i++) {\ndot += data[i] * vData[i];\n}\nreturn dot;\n}\nreturn super.dotProduct(v);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointVectorValuePair;",
            "method_body": "public PointVectorValuePair optimize(OptimizationData... optData)\nthrows TooManyEvaluationsException,\nDimensionMismatchException {\n// Set up base class and perform computation.\nreturn super.optimize(optData);\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.linear.LUDecomposition:getSolver()Lorg/apache/commons/math3/linear/DecompositionSolver;",
            "method_body": "public DecompositionSolver getSolver() {\nreturn new Solver(lu, pivot, singular);\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.optim.PointVectorValuePair:getValueRef()[D",
            "method_body": "public double[] getValueRef() {\nreturn super.getValue();\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.linear.LUDecomposition:<init>(Lorg/apache/commons/math3/linear/RealMatrix;)V",
            "method_body": "public LUDecomposition(RealMatrix matrix) {\nthis(matrix, DEFAULT_TOO_SMALL);\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.linear.BlockRealMatrix:getColumnDimension()I",
            "method_body": "public int getColumnDimension() {\nreturn columns;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.linear.DiagonalMatrix:multiply(Lorg/apache/commons/math3/linear/DiagonalMatrix;)Lorg/apache/commons/math3/linear/DiagonalMatrix;",
            "method_body": "public DiagonalMatrix multiply(final DiagonalMatrix m)\nthrows DimensionMismatchException {\nMatrixUtils.checkMultiplicationCompatible(this, m);\n\nfinal int dim = getRowDimension();\nfinal double[] outData = new double[dim];\nfor (int i = 0; i < dim; i++) {\noutData[i] = data[i] * m.data[i];\n}\n\nreturn new DiagonalMatrix(outData, false);\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.math3.linear.DiagonalMatrix:multiply(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public RealMatrix multiply(final RealMatrix m)\nthrows DimensionMismatchException {\nif (m instanceof DiagonalMatrix) {\nreturn multiply((DiagonalMatrix) m);\n} else {\nMatrixUtils.checkMultiplicationCompatible(this, m);\nfinal int nRows = m.getRowDimension();\nfinal int nCols = m.getColumnDimension();\nfinal double[][] product = new double[nRows][nCols];\nfor (int r = 0; r < nRows; r++) {\nfor (int c = 0; c < nCols; c++) {\nproduct[r][c] = data[r] * m.getEntry(r, c);\n}\n}\nreturn new Array2DRowRealMatrix(product, false);\n}\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math3.optim.PointVectorValuePair:<init>([D[DZ)V",
            "method_body": "public PointVectorValuePair(final double[] point,\nfinal double[] value,\nfinal boolean copyArray) {\nsuper(copyArray ?\n((point == null) ? null :\npoint.clone()) :\npoint,\ncopyArray ?\n((value == null) ? null :\nvalue.clone()) :\nvalue);\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:getRow(I)[D",
            "method_body": "public double[] getRow(final int row) throws OutOfRangeException {\nMatrixUtils.checkRowIndex(this, row);\nfinal int nCols = getColumnDimension();\nfinal double[] out = new double[nCols];\nfor (int i = 0; i < nCols; ++i) {\nout[i] = getEntry(row, i);\n}\n\nreturn out;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:sqrt(D)D",
            "method_body": "public static double sqrt(final double a) {\nreturn Math.sqrt(a);\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;",
            "method_body": "public PAIR optimize(OptimizationData... optData)\nthrows TooManyEvaluationsException,\nTooManyIterationsException {\n// Parse options.\nparseOptimizationData(optData);\n\n// Reset counters.\nevaluations.resetCount();\niterations.resetCount();\n// Perform optimization.\nreturn doOptimize();\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math3.linear.LUDecomposition:<init>(Lorg/apache/commons/math3/linear/RealMatrix;D)V",
            "method_body": "public LUDecomposition(RealMatrix matrix, double singularityThreshold) {\nif (!matrix.isSquare()) {\nthrow new NonSquareMatrixException(matrix.getRowDimension(),\nmatrix.getColumnDimension());\n}\n\nfinal int m = matrix.getColumnDimension();\nlu = matrix.getData();\npivot = new int[m];\ncachedL = null;\ncachedU = null;\ncachedP = null;\n\n// Initialize permutation array and parity\nfor (int row = 0; row < m; row++) {\npivot[row] = row;\n}\neven     = true;\nsingular = false;\n\n// Loop over columns\nfor (int col = 0; col < m; col++) {\n\n// upper\nfor (int row = 0; row < col; row++) {\nfinal double[] luRow = lu[row];\ndouble sum = luRow[col];\nfor (int i = 0; i < row; i++) {\nsum -= luRow[i] * lu[i][col];\n}\nluRow[col] = sum;\n}\n\n// lower\nint max = col; // permutation row\ndouble largest = Double.NEGATIVE_INFINITY;\nfor (int row = col; row < m; row++) {\nfinal double[] luRow = lu[row];\ndouble sum = luRow[col];\nfor (int i = 0; i < col; i++) {\nsum -= luRow[i] * lu[i][col];\n}\nluRow[col] = sum;\n\n// maintain best permutation choice\nif (FastMath.abs(sum) > largest) {\nlargest = FastMath.abs(sum);\nmax = row;\n}\n}\n\n// Singularity check\nif (FastMath.abs(lu[max][col]) < singularityThreshold) {\nsingular = true;\nreturn;\n}\n\n// Pivot if necessary\nif (max != col) {\ndouble tmp = 0;\nfinal double[] luMax = lu[max];\nfinal double[] luCol = lu[col];\nfor (int i = 0; i < m; i++) {\ntmp = luMax[i];\nluMax[i] = luCol[i];\nluCol[i] = tmp;\n}\nint temp = pivot[max];\npivot[max] = pivot[col];\npivot[col] = temp;\neven = !even;\n}\n\n// Divide the lower elements by the \"winning\" diagonal elt.\nfinal double luDiag = lu[col][col];\nfor (int row = col + 1; row < m; row++) {\nlu[row][col] /= luDiag;\n}\n}\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:computeResiduals([D)[D",
            "method_body": "protected double[] computeResiduals(double[] objectiveValue) {\nfinal double[] target = getTarget();\nif (objectiveValue.length != target.length) {\nthrow new DimensionMismatchException(target.length,\nobjectiveValue.length);\n}\n\nfinal double[] residuals = new double[target.length];\nfor (int i = 0; i < target.length; i++) {\nresiduals[i] = target[i] - objectiveValue[i];\n}\n\nreturn residuals;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:checkMatrixIndex(Lorg/apache/commons/math3/linear/AnyMatrix;II)V",
            "method_body": "public static void checkMatrixIndex(final AnyMatrix m,\nfinal int row, final int column)\nthrows OutOfRangeException {\ncheckRowIndex(m, row);\ncheckColumnIndex(m, column);\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian:getModelFunctionJacobian()Lorg/apache/commons/math3/analysis/MultivariateMatrixFunction;",
            "method_body": "public MultivariateMatrixFunction getModelFunctionJacobian() {\nreturn jacobian;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:squareRoot(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "private RealMatrix squareRoot(RealMatrix m) {\nif (m instanceof DiagonalMatrix) {\nfinal int dim = m.getRowDimension();\nfinal RealMatrix sqrtM = new DiagonalMatrix(dim);\nfor (int i = 0; i < dim; i++) {\nsqrtM.setEntry(i, i, FastMath.sqrt(m.getEntry(i, i)));\n}\nreturn sqrtM;\n} else {\nfinal EigenDecomposition dec = new EigenDecomposition(m);\nreturn dec.getSquareRoot();\n}\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.math3.linear.DiagonalMatrix:getColumnDimension()I",
            "method_body": "public int getColumnDimension() {\nreturn data.length;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:operate(Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/RealVector;",
            "method_body": "public RealVector operate(final RealVector v)\nthrows DimensionMismatchException {\ntry {\nreturn new ArrayRealVector(operate(((ArrayRealVector) v).getDataRef()), false);\n} catch (ClassCastException cce) {\nfinal int nRows = getRowDimension();\nfinal int nCols = getColumnDimension();\nif (v.getDimension() != nCols) {\nthrow new DimensionMismatchException(v.getDimension(), nCols);\n}\n\nfinal double[] out = new double[nRows];\nfor (int row = 0; row < nRows; ++row) {\ndouble sum = 0;\nfor (int i = 0; i < nCols; ++i) {\nsum += getEntry(row, i) * v.getEntry(i);\n}\nout[row] = sum;\n}\n\nreturn new ArrayRealVector(out, false);\n}\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:createRealMatrix([[D)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public static RealMatrix createRealMatrix(double[][] data)\nthrows NullArgumentException, DimensionMismatchException,\nNoDataException {\nif (data == null ||\ndata[0] == null) {\nthrow new NullArgumentException();\n}\nreturn (data.length * data[0].length <= 4096) ?\nnew Array2DRowRealMatrix(data) : new BlockRealMatrix(data);\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:getColumnDimension()I",
            "method_body": "public int getColumnDimension() {\nreturn ((data == null) || (data[0] == null)) ? 0 : data[0].length;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:getRowDimension()I",
            "method_body": "public int getRowDimension() {\nreturn (data == null) ? 0 : data.length;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math3.linear.BlockRealMatrix:getRowDimension()I",
            "method_body": "public int getRowDimension() {\nreturn rows;\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math3.linear.LUDecomposition$Solver:<init>([[D[IZ)V",
            "method_body": "private Solver(final double[][] lu, final int[] pivot, final boolean singular) {\nthis.lu       = lu;\nthis.pivot    = pivot;\nthis.singular = singular;\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:min(II)I",
            "method_body": "public static int min(final int a, final int b) {\nreturn (a <= b) ? a : b;\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:getWeight()Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public RealMatrix getWeight() {\nreturn weightMatrix.copy();\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.math3.linear.BlockRealMatrix:blockHeight(I)I",
            "method_body": "private int blockHeight(final int blockRow) {\nreturn (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.apache.commons.math3.linear.DiagonalMatrix:getDataRef()[D",
            "method_body": "public double[] getDataRef() {\nreturn data;\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:copyIn([[D)V",
            "method_body": "private void copyIn(final double[][] in)\nthrows DimensionMismatchException, NoDataException, NullArgumentException {\nsetSubMatrix(in, 0, 0);\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:<init>(ZLorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "public GaussNewtonOptimizer(final boolean useLU,\nConvergenceChecker<PointVectorValuePair> checker) {\nsuper(checker);\nthis.useLU = useLU;\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.Target:getTarget()[D",
            "method_body": "public double[] getTarget() {\nreturn target.clone();\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V",
            "method_body": "protected void parseOptimizationData(OptimizationData... optData) {\n// Allow base class to register its own data.\nsuper.parseOptimizationData(optData);\n\n// The existing values (as set by the previous call) are reused if\n// not provided in the argument list.\nfor (OptimizationData data : optData) {\nif (data instanceof ModelFunctionJacobian) {\njacobian = ((ModelFunctionJacobian) data).getModelFunctionJacobian();\n// If more data must be parsed, this statement _must_ be\n// changed to \"continue\".\nbreak;\n}\n}\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseMultivariateOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "protected BaseMultivariateOptimizer(ConvergenceChecker<PAIR> checker) {\nsuper(checker);\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.math3.optim.AbstractConvergenceChecker:<init>(DD)V",
            "method_body": "public AbstractConvergenceChecker(final double relativeThreshold,\nfinal double absoluteThreshold) {\nthis.relativeThreshold = relativeThreshold;\nthis.absoluteThreshold = absoluteThreshold;\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.math3.linear.ArrayRealVector:getDataRef()[D",
            "method_body": "public double[] getDataRef() {\nreturn data;\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:computeObjectiveValue([D)[D",
            "method_body": "protected double[] computeObjectiveValue(double[] params) {\nsuper.incrementEvaluationCount();\nreturn model.value(params);\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.math3.linear.ArrayRealVector:checkVectorDimensions(I)V",
            "method_body": "protected void checkVectorDimensions(int n)\nthrows DimensionMismatchException {\nif (data.length != n) {\nthrow new DimensionMismatchException(data.length, n);\n}\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.apache.commons.math3.optim.MaxEval:<init>(I)V",
            "method_body": "public MaxEval(int max) {\nif (max <= 0) {\nthrow new NotStrictlyPositiveException(max);\n}\n\nmaxEval = max;\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.Weight:<init>([D)V",
            "method_body": "public Weight(double[] weight) {\nweightMatrix = new DiagonalMatrix(weight);\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseOptimizer:getIterations()I",
            "method_body": "public int getIterations() {\nreturn iterations.getCount();\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.apache.commons.math3.linear.DiagonalMatrix:getEntry(II)D",
            "method_body": "public double getEntry(final int row, final int column)\nthrows OutOfRangeException {\nMatrixUtils.checkMatrixIndex(this, row, column);\nreturn row == column ? data[row] : 0;\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "protected AbstractLeastSquaresOptimizer(ConvergenceChecker<PointVectorValuePair> checker) {\nsuper(checker);\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseMultivariateOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;",
            "method_body": "public PAIR optimize(OptimizationData... optData) {\n// Perform optimization.\nreturn super.optimize(optData);\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.ModelFunction:<init>(Lorg/apache/commons/math3/analysis/MultivariateVectorFunction;)V",
            "method_body": "public ModelFunction(MultivariateVectorFunction m) {\nmodel = m;\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.apache.commons.math3.linear.DiagonalMatrix:<init>([D)V",
            "method_body": "public DiagonalMatrix(final double[] d) {\nthis(d, true);\n}",
            "method_id": 57
        },
        {
            "method_signature": "org.apache.commons.math3.linear.DiagonalMatrix:getRowDimension()I",
            "method_body": "public int getRowDimension() {\nreturn data.length;\n}",
            "method_id": 58
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseMultivariateOptimizer:getUpperBound()[D",
            "method_body": "public double[] getUpperBound() {\nreturn upperBound == null ? null : upperBound.clone();\n}",
            "method_id": 59
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:checkColumnIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V",
            "method_body": "public static void checkColumnIndex(final AnyMatrix m, final int column)\nthrows OutOfRangeException {\nif (column < 0 || column >= m.getColumnDimension()) {\nthrow new OutOfRangeException(LocalizedFormats.COLUMN_INDEX,\ncolumn, 0, m.getColumnDimension() - 1);\n}\n}",
            "method_id": 60
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointVectorValuePair;",
            "method_body": "public PointVectorValuePair optimize(OptimizationData... optData)\nthrows TooManyEvaluationsException,\nDimensionMismatchException {\n// Set up base class and perform computation.\nreturn super.optimize(optData);\n}",
            "method_id": 61
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:checkParameters()V",
            "method_body": "private void checkParameters() {\nif (getLowerBound() != null ||\ngetUpperBound() != null) {\nthrow new MathUnsupportedOperationException(LocalizedFormats.CONSTRAINT);\n}\n}",
            "method_id": 62
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:<init>(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V",
            "method_body": "public Incrementor(int max, MaxCountExceededCallback cb)\nthrows NullArgumentException {\nif (cb == null){\nthrow new NullArgumentException();\n}\nmaximalCount = max;\nmaxCountCallback = cb;\n}",
            "method_id": 63
        },
        {
            "method_signature": "org.apache.commons.math3.linear.ArrayRealVector:toArray()[D",
            "method_body": "public double[] toArray(){\nreturn data.clone();\n}",
            "method_id": 64
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseMultivariateOptimizer:getStartPoint()[D",
            "method_body": "public double[] getStartPoint() {\nreturn start == null ? null : start.clone();\n}",
            "method_id": 65
        },
        {
            "method_signature": "org.apache.commons.math3.linear.DiagonalMatrix:setEntry(IID)V",
            "method_body": "public void setEntry(final int row, final int column, final double value)\nthrows OutOfRangeException, NumberIsTooLargeException {\nif (row == column) {\nMatrixUtils.checkRowIndex(this, row);\ndata[row] = value;\n} else {\nensureZero(value);\n}\n}",
            "method_id": 66
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseOptimizer:incrementEvaluationCount()V",
            "method_body": "protected abstract PAIR doOptimize();\n\n/**\n* Increment the evaluation count.\n*\n* @throws TooManyEvaluationsException if the allowed evaluations\n* have been exhausted.\n*/\nprotected void incrementEvaluationCount()\nthrows TooManyEvaluationsException {\nevaluations.incrementCount();\n}",
            "method_id": 67
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:computeCost([D)D",
            "method_body": "protected double computeCost(double[] residuals) {\nfinal ArrayRealVector r = new ArrayRealVector(residuals);\nreturn FastMath.sqrt(r.dotProduct(getWeight().operate(r)));\n}",
            "method_id": 68
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.Target:<init>([D)V",
            "method_body": "public Target(double[] observations) {\ntarget = observations.clone();\n}",
            "method_id": 69
        },
        {
            "method_signature": "org.apache.commons.math3.optim.SimpleVectorValueChecker:converged(ILorg/apache/commons/math3/optim/PointVectorValuePair;Lorg/apache/commons/math3/optim/PointVectorValuePair;)Z",
            "method_body": "public boolean converged(final int iteration,\nfinal PointVectorValuePair previous,\nfinal PointVectorValuePair current) {\nif (maxIterationCount != ITERATION_CHECK_DISABLED) {\nif (iteration >= maxIterationCount) {\nreturn true;\n}\n}\n\nfinal double[] p = previous.getValueRef();\nfinal double[] c = current.getValueRef();\nfor (int i = 0; i < p.length; ++i) {\nfinal double pi         = p[i];\nfinal double ci         = c[i];\nfinal double difference = FastMath.abs(pi - ci);\nfinal double size       = FastMath.max(FastMath.abs(pi), FastMath.abs(ci));\nif (difference > size * getRelativeThreshold() &&\ndifference > getAbsoluteThreshold()) {\nreturn false;\n}\n}\nreturn true;\n}",
            "method_id": 70
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:<init>([[DZ)V",
            "method_body": "public Array2DRowRealMatrix(final double[][] d, final boolean copyArray)\nthrows DimensionMismatchException, NoDataException,\nNullArgumentException {\nif (copyArray) {\ncopyIn(d);\n} else {\nif (d == null) {\nthrow new NullArgumentException();\n}\nfinal int nRows = d.length;\nif (nRows == 0) {\nthrow new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);\n}\nfinal int nCols = d[0].length;\nif (nCols == 0) {\nthrow new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);\n}\nfor (int r = 1; r < nRows; r++) {\nif (d[r].length != nCols) {\nthrow new DimensionMismatchException(d[r].length, nCols);\n}\n}\ndata = d;\n}\n}",
            "method_id": 71
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.Weight:getWeight()Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public RealMatrix getWeight() {\nreturn weightMatrix.copy();\n}",
            "method_id": 72
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:checkParameters()V",
            "method_body": "private void checkParameters() {\nif (target.length != weightMatrix.getColumnDimension()) {\nthrow new DimensionMismatchException(target.length,\nweightMatrix.getColumnDimension());\n}\n}",
            "method_id": 73
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:max(DD)D",
            "method_body": "public static double max(final double a, final double b) {\nif (a > b) {\nreturn a;\n}\nif (a < b) {\nreturn b;\n}\n/* if either arg is NaN, return NaN */\nif (a != b) {\nreturn Double.NaN;\n}\n/* min(+0.0,-0.0) == -0.0 */\n/* 0x8000000000000000L == Double.doubleToRawLongBits(-0.0d) */\nlong bits = Double.doubleToRawLongBits(a);\nif (bits == 0x8000000000000000L) {\nreturn b;\n}\nreturn a;\n}",
            "method_id": 74
        },
        {
            "method_signature": "org.apache.commons.math3.linear.DiagonalMatrix:copy()Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public RealMatrix copy() {\nreturn new DiagonalMatrix(data);\n}",
            "method_id": 75
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:getEntry(II)D",
            "method_body": "public double getEntry(final int row, final int column)\nthrows OutOfRangeException {\nMatrixUtils.checkMatrixIndex(this, row, column);\nreturn data[row][column];\n}",
            "method_id": 76
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V",
            "method_body": "protected void parseOptimizationData(OptimizationData... optData) {\n// Allow base class to register its own data.\nsuper.parseOptimizationData(optData);\n\n// The existing values (as set by the previous call) are reused if\n// not provided in the argument list.\nfor (OptimizationData data : optData) {\nif (data instanceof ModelFunction) {\nmodel = ((ModelFunction) data).getModelFunction();\ncontinue;\n}\nif (data instanceof Target) {\ntarget = ((Target) data).getTarget();\ncontinue;\n}\nif (data instanceof Weight) {\nweightMatrix = ((Weight) data).getWeight();\ncontinue;\n}\n}\n\n// Check input consistency.\ncheckParameters();\n}",
            "method_id": 77
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V",
            "method_body": "protected void parseOptimizationData(OptimizationData... optData) {\n// Allow base class to register its own data.\nsuper.parseOptimizationData(optData);\n\n// The existing values (as set by the previous call) are reused if\n// not provided in the argument list.\nfor (OptimizationData data : optData) {\nif (data instanceof Weight) {\nweightMatrixSqrt = squareRoot(((Weight) data).getWeight());\n// If more data must be parsed, this statement _must_ be\n// changed to \"continue\".\nbreak;\n}\n}\n}",
            "method_id": 78
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:computeWeightedJacobian([D)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "protected RealMatrix computeWeightedJacobian(double[] params) {\nreturn weightMatrixSqrt.multiply(MatrixUtils.createRealMatrix(computeJacobian(params)));\n}",
            "method_id": 79
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseMultivariateOptimizer:getLowerBound()[D",
            "method_body": "public double[] getLowerBound() {\nreturn lowerBound == null ? null : lowerBound.clone();\n}",
            "method_id": 80
        },
        {
            "method_signature": "org.apache.commons.math3.optim.MaxEval:getMaxEval()I",
            "method_body": "public int getMaxEval() {\nreturn maxEval;\n}",
            "method_id": 81
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:resetCount()V",
            "method_body": "public void resetCount() {\ncount = 0;\n}",
            "method_id": 82
        },
        {
            "method_signature": "org.apache.commons.math3.util.Pair:getValue()Ljava/lang/Object;",
            "method_body": "public V getValue() {\nreturn value;\n}",
            "method_id": 83
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:pow(DI)D",
            "method_body": "public static double pow(double d, int e) {\n\nif (e == 0) {\nreturn 1.0;\n} else if (e < 0) {\ne = -e;\nd = 1.0 / d;\n}\n\n// split d as two 26 bits numbers\n// beware the following expressions must NOT be simplified, they rely on floating point arithmetic properties\nfinal int splitFactor = 0x8000001;\nfinal double cd       = splitFactor * d;\nfinal double d1High   = cd - (cd - d);\nfinal double d1Low    = d - d1High;\n\n// prepare result\ndouble resultHigh = 1;\ndouble resultLow  = 0;\n\n// d^(2p)\ndouble d2p     = d;\ndouble d2pHigh = d1High;\ndouble d2pLow  = d1Low;\n\nwhile (e != 0) {\n\nif ((e & 0x1) != 0) {\n// accurate multiplication result = result * d^(2p) using Veltkamp TwoProduct algorithm\n// beware the following expressions must NOT be simplified, they rely on floating point arithmetic properties\nfinal double tmpHigh = resultHigh * d2p;\nfinal double cRH     = splitFactor * resultHigh;\nfinal double rHH     = cRH - (cRH - resultHigh);\nfinal double rHL     = resultHigh - rHH;\nfinal double tmpLow  = rHL * d2pLow - (((tmpHigh - rHH * d2pHigh) - rHL * d2pHigh) - rHH * d2pLow);\nresultHigh = tmpHigh;\nresultLow  = resultLow * d2p + tmpLow;\n}\n\n// accurate squaring d^(2(p+1)) = d^(2p) * d^(2p) using Veltkamp TwoProduct algorithm\n// beware the following expressions must NOT be simplified, they rely on floating point arithmetic properties\nfinal double tmpHigh = d2pHigh * d2p;\nfinal double cD2pH   = splitFactor * d2pHigh;\nfinal double d2pHH   = cD2pH - (cD2pH - d2pHigh);\nfinal double d2pHL   = d2pHigh - d2pHH;\nfinal double tmpLow  = d2pHL * d2pLow - (((tmpHigh - d2pHH * d2pHigh) - d2pHL * d2pHigh) - d2pHH * d2pLow);\nfinal double cTmpH   = splitFactor * tmpHigh;\nd2pHigh = cTmpH - (cTmpH - tmpHigh);\nd2pLow  = d2pLow * d2p + tmpLow + (tmpHigh - d2pHigh);\nd2p     = d2pHigh + d2pLow;\n\ne = e >> 1;\n\n}\n\nreturn resultHigh + resultLow;\n\n}",
            "method_id": 84
        },
        {
            "method_signature": "org.apache.commons.math3.linear.BlockRealMatrix:blockWidth(I)I",
            "method_body": "private int blockWidth(final int blockColumn) {\nreturn (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;\n}",
            "method_id": 85
        },
        {
            "method_signature": "org.apache.commons.math3.optim.PointVectorValuePair:<init>([D[D)V",
            "method_body": "public PointVectorValuePair(final double[] point,\nfinal double[] value) {\nthis(point, value, true);\n}",
            "method_id": 86
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:isSquare()Z",
            "method_body": "public boolean isSquare() {\nreturn getColumnDimension() == getRowDimension();\n}",
            "method_id": 87
        },
        {
            "method_signature": "org.apache.commons.math3.linear.ArrayRealVector:<init>([D)V",
            "method_body": "public ArrayRealVector(double[] d) {\ndata = d.clone();\n}",
            "method_id": 88
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "protected JacobianMultivariateVectorOptimizer(ConvergenceChecker<PointVectorValuePair> checker) {\nsuper(checker);\n}",
            "method_id": 89
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "protected MultivariateVectorOptimizer(ConvergenceChecker<PointVectorValuePair> checker) {\nsuper(checker);\n}",
            "method_id": 90
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V",
            "method_body": "protected void parseOptimizationData(OptimizationData... optData) {\n// The existing values (as set by the previous call) are reused if\n// not provided in the argument list.\nfor (OptimizationData data : optData) {\nif (data instanceof MaxEval) {\nevaluations.setMaximalCount(((MaxEval) data).getMaxEval());\ncontinue;\n}\nif (data instanceof MaxIter) {\niterations.setMaximalCount(((MaxIter) data).getMaxIter());\ncontinue;\n}\n}\n}",
            "method_id": 91
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "public GaussNewtonOptimizer(ConvergenceChecker<PointVectorValuePair> checker) {\nthis(true, checker);\n}",
            "method_id": 92
        },
        {
            "method_signature": "org.apache.commons.math3.linear.DiagonalMatrix:<init>([DZ)V",
            "method_body": "public DiagonalMatrix(final double[] d, final boolean copyArray)\nthrows NullArgumentException {\nMathUtils.checkNotNull(d);\ndata = copyArray ? d.clone() : d;\n}",
            "method_id": 93
        },
        {
            "method_signature": "org.apache.commons.math3.optim.SimpleVectorValueChecker:<init>(DD)V",
            "method_body": "public SimpleVectorValueChecker(final double relativeThreshold,\nfinal double absoluteThreshold) {\nsuper(relativeThreshold, absoluteThreshold);\nmaxIterationCount = ITERATION_CHECK_DISABLED;\n}",
            "method_id": 94
        },
        {
            "method_signature": "org.apache.commons.math3.util.MathUtils:checkNotNull(Ljava/lang/Object;)V",
            "method_body": "public static void checkNotNull(Object o)\nthrows NullArgumentException {\nif (o == null) {\nthrow new NullArgumentException();\n}\n}",
            "method_id": 95
        },
        {
            "method_signature": "org.apache.commons.math3.linear.ArrayRealVector:getEntry(I)D",
            "method_body": "public double getEntry(int index) throws OutOfRangeException {\ntry {\nreturn data[index];\n} catch (IndexOutOfBoundsException e) {\nthrow new OutOfRangeException(LocalizedFormats.INDEX, index, 0,\ngetDimension() - 1);\n}\n}",
            "method_id": 96
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointVectorValuePair;",
            "method_body": "public PointVectorValuePair optimize(OptimizationData... optData)\nthrows TooManyEvaluationsException {\n// Set up base class and perform computation.\nreturn super.optimize(optData);\n}",
            "method_id": 97
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian:<init>(Lorg/apache/commons/math3/analysis/MultivariateMatrixFunction;)V",
            "method_body": "public ModelFunctionJacobian(MultivariateMatrixFunction j) {\njacobian = j;\n}",
            "method_id": 98
        },
        {
            "method_signature": "org.apache.commons.math3.linear.ArrayRealVector:<init>([DZ)V",
            "method_body": "public ArrayRealVector(double[] d, boolean copyArray)\nthrows NullArgumentException {\nif (d == null) {\nthrow new NullArgumentException();\n}\ndata = copyArray ? d.clone() :  d;\n}",
            "method_id": 99
        },
        {
            "method_signature": "org.apache.commons.math3.linear.BlockRealMatrix:<init>([[D)V",
            "method_body": "public BlockRealMatrix(final double[][] rawData)\nthrows DimensionMismatchException, NotStrictlyPositiveException {\nthis(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);\n}",
            "method_id": 100
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.ModelFunction:getModelFunction()Lorg/apache/commons/math3/analysis/MultivariateVectorFunction;",
            "method_body": "public MultivariateVectorFunction getModelFunction() {\nreturn model;\n}",
            "method_id": 101
        },
        {
            "method_signature": "org.apache.commons.math3.linear.BlockRealMatrix:getData()[[D",
            "method_body": "public double[][] getData() {\nfinal double[][] data = new double[getRowDimension()][getColumnDimension()];\nfinal int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;\n\nfor (int iBlock = 0; iBlock < blockRows; ++iBlock) {\nfinal int pStart = iBlock * BLOCK_SIZE;\nfinal int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);\nint regularPos = 0;\nint lastPos = 0;\nfor (int p = pStart; p < pEnd; ++p) {\nfinal double[] dataP = data[p];\nint blockIndex = iBlock * blockColumns;\nint dataPos = 0;\nfor (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {\nSystem.arraycopy(blocks[blockIndex++], regularPos, dataP, dataPos, BLOCK_SIZE);\ndataPos += BLOCK_SIZE;\n}\nSystem.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);\nregularPos += BLOCK_SIZE;\nlastPos    += lastColumns;\n}\n}\n\nreturn data;\n}",
            "method_id": 102
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:checkMultiplicationCompatible(Lorg/apache/commons/math3/linear/AnyMatrix;Lorg/apache/commons/math3/linear/AnyMatrix;)V",
            "method_body": "public static void checkMultiplicationCompatible(final AnyMatrix left, final AnyMatrix right)\nthrows DimensionMismatchException {\n\nif (left.getColumnDimension() != right.getRowDimension()) {\nthrow new DimensionMismatchException(left.getColumnDimension(),\nright.getRowDimension());\n}\n}",
            "method_id": 103
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n}",
            "method_id": 104
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:<init>(II)V",
            "method_body": "protected AbstractRealMatrix(final int rowDimension,\nfinal int columnDimension)\nthrows NotStrictlyPositiveException {\nif (rowDimension < 1) {\nthrow new NotStrictlyPositiveException(rowDimension);\n}\nif (columnDimension < 1) {\nthrow new NotStrictlyPositiveException(columnDimension);\n}\n}",
            "method_id": 105
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseMultivariateOptimizer:checkParameters()V",
            "method_body": "private void checkParameters() {\nif (start != null) {\nfinal int dim = start.length;\nif (lowerBound != null) {\nif (lowerBound.length != dim) {\nthrow new DimensionMismatchException(lowerBound.length, dim);\n}\nfor (int i = 0; i < dim; i++) {\nfinal double v = start[i];\nfinal double lo = lowerBound[i];\nif (v < lo) {\nthrow new NumberIsTooSmallException(v, lo, true);\n}\n}\n}\nif (upperBound != null) {\nif (upperBound.length != dim) {\nthrow new DimensionMismatchException(upperBound.length, dim);\n}\nfor (int i = 0; i < dim; i++) {\nfinal double v = start[i];\nfinal double hi = upperBound[i];\nif (v > hi) {\nthrow new NumberIsTooLargeException(v, hi, true);\n}\n}\n}\n}\n}",
            "method_id": 106
        },
        {
            "method_signature": "org.apache.commons.math3.optim.InitialGuess:getInitialGuess()[D",
            "method_body": "public double[] getInitialGuess() {\nreturn init.clone();\n}",
            "method_id": 107
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:incrementCount()V",
            "method_body": "public void incrementCount() throws MaxCountExceededException {\nif (++count > maximalCount) {\nmaxCountCallback.trigger(maximalCount);\n}\n}",
            "method_id": 108
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:setCost(D)V",
            "method_body": "protected void setCost(double cost) {\nthis.cost = cost;\n}",
            "method_id": 109
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:setMaximalCount(I)V",
            "method_body": "public void setMaximalCount(int max) {\nmaximalCount = max;\n}",
            "method_id": 110
        },
        {
            "method_signature": "org.apache.commons.math3.optim.AbstractConvergenceChecker:getAbsoluteThreshold()D",
            "method_body": "public double getAbsoluteThreshold() {\nreturn absoluteThreshold;\n}",
            "method_id": 111
        },
        {
            "method_signature": "org.apache.commons.math3.linear.Array2DRowRealMatrix:<init>([[D)V",
            "method_body": "public Array2DRowRealMatrix(final double[][] d)\nthrows DimensionMismatchException, NoDataException, NullArgumentException {\ncopyIn(d);\n}",
            "method_id": 112
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:getCount()I",
            "method_body": "public int getCount() {\nreturn count;\n}",
            "method_id": 113
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:getTarget()[D",
            "method_body": "public double[] getTarget() {\nreturn target.clone();\n}",
            "method_id": 114
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
            "method_body": "public PointVectorValuePair doOptimize() {\ncheckParameters();\n\nfinal ConvergenceChecker<PointVectorValuePair> checker\n= getConvergenceChecker();\n\n// Computation will be useless without a checker (see \"for-loop\").\nif (checker == null) {\nthrow new NullArgumentException();\n}\n\nfinal double[] targetValues = getTarget();\nfinal int nR = targetValues.length; // Number of observed data.\n\nfinal RealMatrix weightMatrix = getWeight();\n// Diagonal of the weight matrix.\nfinal double[] residualsWeights = new double[nR];\nfor (int i = 0; i < nR; i++) {\nresidualsWeights[i] = weightMatrix.getEntry(i, i);\n}\n\nfinal double[] currentPoint = getStartPoint();\nfinal int nC = currentPoint.length;\n\n// iterate until convergence is reached\nPointVectorValuePair current = null;\nint iter = 0;\nfor (boolean converged = false; !converged;) {\n++iter;\n\n// evaluate the objective function and its jacobian\nPointVectorValuePair previous = current;\n// Value of the objective function at \"currentPoint\".\nfinal double[] currentObjective = computeObjectiveValue(currentPoint);\nfinal double[] currentResiduals = computeResiduals(currentObjective);\nfinal RealMatrix weightedJacobian = computeWeightedJacobian(currentPoint);\ncurrent = new PointVectorValuePair(currentPoint, currentObjective);\n\n// build the linear problem\nfinal double[]   b = new double[nC];\nfinal double[][] a = new double[nC][nC];\nfor (int i = 0; i < nR; ++i) {\n\nfinal double[] grad   = weightedJacobian.getRow(i);\nfinal double weight   = residualsWeights[i];\nfinal double residual = currentResiduals[i];\n\n// compute the normal equation\nfinal double wr = weight * residual;\nfor (int j = 0; j < nC; ++j) {\nb[j] += wr * grad[j];\n}\n\n// build the contribution matrix for measurement i\nfor (int k = 0; k < nC; ++k) {\ndouble[] ak = a[k];\ndouble wgk = weight * grad[k];\nfor (int l = 0; l < nC; ++l) {\nak[l] += wgk * grad[l];\n}\n}\n}\n\ntry {\n// solve the linearized least squares problem\nRealMatrix mA = new BlockRealMatrix(a);\nDecompositionSolver solver = useLU ?\nnew LUDecomposition(mA).getSolver() :\nnew QRDecomposition(mA).getSolver();\nfinal double[] dX = solver.solve(new ArrayRealVector(b, false)).toArray();\n// update the estimated parameters\nfor (int i = 0; i < nC; ++i) {\ncurrentPoint[i] += dX[i];\n}\n} catch (SingularMatrixException e) {\nthrow new ConvergenceException(LocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM);\n}\n\n// Check convergence.\nif (previous != null) {\nconverged = checker.converged(iter, previous, current);\nif (converged) {\nsetCost(computeCost(currentResiduals));\nreturn current;\n}\n}\n}\n// Must never happen.\nthrow new MathInternalError();\n}",
            "method_id": 115
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "protected BaseOptimizer(ConvergenceChecker<PAIR> checker) {\nthis.checker = checker;\n\nevaluations = new Incrementor(0, new MaxEvalCallback());\niterations = new Incrementor(0, new MaxIterCallback());\n}",
            "method_id": 116
        }
    ]
}
{
    "bug_id": 27,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.fraction.FractionTest.testMath835",
    "test_body": "public void testMath835() {\nfinal int numer = Integer.MAX_VALUE / 99;\nfinal int denom = 1;\nfinal double percentage = 100 * ((double) numer) / denom;\nfinal Fraction frac = new Fraction(numer, denom);\n// With the implementation that preceded the fix suggested in MATH-835,\n// this test was failing, due to overflow.\nAssert.assertEquals(percentage, frac.percentageValue(), Math.ulp(percentage));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<2.1691754E9> but was:<-2.125791896E9>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math3.fraction.FractionTest.testMath835(FractionTest.java:253)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.fraction.Fraction:percentageValue()D",
            "method_body": "public double percentageValue() {\nreturn multiply(100).doubleValue();\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.fraction.Fraction:doubleValue()D",
            "method_body": "public double doubleValue() {\nreturn (double)numerator / (double)denominator;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.fraction.Fraction:<init>(II)V",
            "method_body": "public Fraction(int num, int den) {\nif (den == 0) {\nthrow new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION,\nnum, den);\n}\nif (den < 0) {\nif (num == Integer.MIN_VALUE ||\nden == Integer.MIN_VALUE) {\nthrow new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION,\nnum, den);\n}\nnum = -num;\nden = -den;\n}\n// reduce numerator and denominator by greatest common denominator.\nfinal int d = ArithmeticUtils.gcd(num, den);\nif (d > 1) {\nnum /= d;\nden /= d;\n}\n\n// move sign to numerator.\nif (den < 0) {\nnum = -num;\nden = -den;\n}\nthis.numerator   = num;\nthis.denominator = den;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.util.ArithmeticUtils:gcd(II)I",
            "method_body": "public static int gcd(final int p, final int q) {\nint u = p;\nint v = q;\nif ((u == 0) || (v == 0)) {\nif ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {\nthrow new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,\np, q);\n}\nreturn FastMath.abs(u) + FastMath.abs(v);\n}\n// keep u and v negative, as negative integers range down to\n// -2^31, while positive numbers can only be as large as 2^31-1\n// (i.e. we can't necessarily negate a negative number without\n// overflow)\n/* assert u!=0 && v!=0; */\nif (u > 0) {\nu = -u;\n} // make u negative\nif (v > 0) {\nv = -v;\n} // make v negative\n// B1. [Find power of 2]\nint k = 0;\nwhile ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are\n// both even...\nu /= 2;\nv /= 2;\nk++; // cast out twos.\n}\nif (k == 31) {\nthrow new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,\np, q);\n}\n// B2. Initialize: u and v have been divided by 2^k and at least\n// one is odd.\nint t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;\n// t negative: u was odd, v may be even (t replaces v)\n// t positive: u was even, v is odd (t replaces u)\ndo {\n/* assert u<0 && v<0; */\n// B4/B3: cast out twos from t.\nwhile ((t & 1) == 0) { // while t is even..\nt /= 2; // cast out twos\n}\n// B5 [reset max(u,v)]\nif (t > 0) {\nu = -t;\n} else {\nv = t;\n}\n// B6/B3. at this point both u and v should be odd.\nt = (v - u) / 2;\n// |u| larger: t positive (replace u)\n// |v| larger: t negative (replace v)\n} while (t != 0);\nreturn -u * (1 << k); // gcd is u*2^k\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.fraction.Fraction:multiply(I)Lorg/apache/commons/math3/fraction/Fraction;",
            "method_body": "public Fraction multiply(final int i) {\nreturn new Fraction(numerator * i, denominator);\n}",
            "method_id": 4
        }
    ]
}
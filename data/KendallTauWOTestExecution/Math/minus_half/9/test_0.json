{
    "bug_id": 9,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.geometry.euclidean.threed.LineTest.testRevert",
    "test_body": "public void testRevert() {\n// setup\nLine line = new Line(new Vector3D(1653345.6696423641, 6170370.041579291, 90000),\nnew Vector3D(1650757.5050732433, 6160710.879908984, 0.9));\nVector3D expected = line.getDirection().negate();\n// action\nLine reverted = line.revert();\n// verify\nAssert.assertArrayEquals(expected.toArray(), reverted.getDirection().toArray(), 0);\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: arrays first differed at element [0]; expected:<0.028581782127907646> but was:<0.028581782243293483>\nat org.junit.internal.ComparisonCriteria.arrayEquals(ComparisonCriteria.java:50)\nat org.junit.Assert.assertArrayEquals(Assert.java:419)\nat org.junit.Assert.assertArrayEquals(Assert.java:430)\nat org.apache.commons.math3.geometry.euclidean.threed.LineTest.testRevert(LineTest.java:144)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D:<init>(DLorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;DLorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V",
            "method_body": "public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {\nthis.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x);\nthis.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y);\nthis.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D:dotProduct(Lorg/apache/commons/math3/geometry/Vector;)D",
            "method_body": "public double dotProduct(final Vector<Euclidean3D> v) {\nfinal Vector3D v3 = (Vector3D) v;\nreturn MathArrays.linearCombination(x, v3.x, y, v3.y, z, v3.z);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D:getNormSq()D",
            "method_body": "public double getNormSq() {\n// there are no cancellation problems here, so we use the straightforward formula\nreturn x * x + y * y + z * z;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.geometry.euclidean.threed.Line:getDirection()Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;",
            "method_body": "public Vector3D getDirection() {\nreturn direction;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D:toArray()[D",
            "method_body": "public double[] toArray() {\nreturn new double[] { x, y, z };\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.geometry.euclidean.threed.Line:reset(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V",
            "method_body": "public void reset(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException {\nfinal Vector3D delta = p2.subtract(p1);\nfinal double norm2 = delta.getNormSq();\nif (norm2 == 0.0) {\nthrow new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);\n}\nthis.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta);\nzero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.geometry.euclidean.threed.Line:<init>(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V",
            "method_body": "public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException {\nreset(p1, p2);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.util.MathArrays:linearCombination(DDDD)D",
            "method_body": "public static double linearCombination(final double a1, final double b1,\nfinal double a2, final double b2) {\n\n// the code below is split in many additions/subtractions that may\n// appear redundant. However, they should NOT be simplified, as they\n// use IEEE754 floating point arithmetic rounding properties.\n// as an example, the expression \"ca1 - (ca1 - a1)\" is NOT the same as \"a1\"\n// The variable naming conventions are that xyzHigh contains the most significant\n// bits of xyz and xyzLow contains its least significant bits. So theoretically\n// xyz is the sum xyzHigh + xyzLow, but in many cases below, this sum cannot\n// be represented in only one double precision number so we preserve two numbers\n// to hold it as long as we can, combining the high and low order bits together\n// only at the end, after cancellation may have occurred on high order bits\n\n// split a1 and b1 as two 26 bits numbers\nfinal double ca1        = SPLIT_FACTOR * a1;\nfinal double a1High     = ca1 - (ca1 - a1);\nfinal double a1Low      = a1 - a1High;\nfinal double cb1        = SPLIT_FACTOR * b1;\nfinal double b1High     = cb1 - (cb1 - b1);\nfinal double b1Low      = b1 - b1High;\n\n// accurate multiplication a1 * b1\nfinal double prod1High  = a1 * b1;\nfinal double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);\n\n// split a2 and b2 as two 26 bits numbers\nfinal double ca2        = SPLIT_FACTOR * a2;\nfinal double a2High     = ca2 - (ca2 - a2);\nfinal double a2Low      = a2 - a2High;\nfinal double cb2        = SPLIT_FACTOR * b2;\nfinal double b2High     = cb2 - (cb2 - b2);\nfinal double b2Low      = b2 - b2High;\n\n// accurate multiplication a2 * b2\nfinal double prod2High  = a2 * b2;\nfinal double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);\n\n// accurate addition a1 * b1 + a2 * b2\nfinal double s12High    = prod1High + prod2High;\nfinal double s12Prime   = s12High - prod2High;\nfinal double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);\n\n// final rounding, s12 may have suffered many cancellations, we try\n// to recover some bits from the extra words we have saved up to now\ndouble result = s12High + (prod1Low + prod2Low + s12Low);\n\nif (Double.isNaN(result)) {\n// either we have split infinite numbers or some coefficients were NaNs,\n// just rely on the naive implementation and let IEEE754 handle this\nresult = a1 * b1 + a2 * b2;\n}\n\nreturn result;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:sqrt(D)D",
            "method_body": "public static double sqrt(final double a) {\nreturn Math.sqrt(a);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math3.util.MathArrays:linearCombination(DDDDDD)D",
            "method_body": "public static double linearCombination(final double a1, final double b1,\nfinal double a2, final double b2,\nfinal double a3, final double b3) {\n\n// the code below is split in many additions/subtractions that may\n// appear redundant. However, they should NOT be simplified, as they\n// do use IEEE754 floating point arithmetic rounding properties.\n// as an example, the expression \"ca1 - (ca1 - a1)\" is NOT the same as \"a1\"\n// The variables naming conventions are that xyzHigh contains the most significant\n// bits of xyz and xyzLow contains its least significant bits. So theoretically\n// xyz is the sum xyzHigh + xyzLow, but in many cases below, this sum cannot\n// be represented in only one double precision number so we preserve two numbers\n// to hold it as long as we can, combining the high and low order bits together\n// only at the end, after cancellation may have occurred on high order bits\n\n// split a1 and b1 as two 26 bits numbers\nfinal double ca1        = SPLIT_FACTOR * a1;\nfinal double a1High     = ca1 - (ca1 - a1);\nfinal double a1Low      = a1 - a1High;\nfinal double cb1        = SPLIT_FACTOR * b1;\nfinal double b1High     = cb1 - (cb1 - b1);\nfinal double b1Low      = b1 - b1High;\n\n// accurate multiplication a1 * b1\nfinal double prod1High  = a1 * b1;\nfinal double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);\n\n// split a2 and b2 as two 26 bits numbers\nfinal double ca2        = SPLIT_FACTOR * a2;\nfinal double a2High     = ca2 - (ca2 - a2);\nfinal double a2Low      = a2 - a2High;\nfinal double cb2        = SPLIT_FACTOR * b2;\nfinal double b2High     = cb2 - (cb2 - b2);\nfinal double b2Low      = b2 - b2High;\n\n// accurate multiplication a2 * b2\nfinal double prod2High  = a2 * b2;\nfinal double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);\n\n// split a3 and b3 as two 26 bits numbers\nfinal double ca3        = SPLIT_FACTOR * a3;\nfinal double a3High     = ca3 - (ca3 - a3);\nfinal double a3Low      = a3 - a3High;\nfinal double cb3        = SPLIT_FACTOR * b3;\nfinal double b3High     = cb3 - (cb3 - b3);\nfinal double b3Low      = b3 - b3High;\n\n// accurate multiplication a3 * b3\nfinal double prod3High  = a3 * b3;\nfinal double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);\n\n// accurate addition a1 * b1 + a2 * b2\nfinal double s12High    = prod1High + prod2High;\nfinal double s12Prime   = s12High - prod2High;\nfinal double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);\n\n// accurate addition a1 * b1 + a2 * b2 + a3 * b3\nfinal double s123High   = s12High + prod3High;\nfinal double s123Prime  = s123High - prod3High;\nfinal double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);\n\n// final rounding, s123 may have suffered many cancellations, we try\n// to recover some bits from the extra words we have saved up to now\ndouble result = s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);\n\nif (Double.isNaN(result)) {\n// either we have split infinite numbers or some coefficients were NaNs,\n// just rely on the naive implementation and let IEEE754 handle this\nresult = a1 * b1 + a2 * b2 + a3 * b3;\n}\n\nreturn result;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D:subtract(Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;",
            "method_body": "public Vector3D subtract(final Vector<Euclidean3D> v) {\nfinal Vector3D v3 = (Vector3D) v;\nreturn new Vector3D(x - v3.x, y - v3.y, z - v3.z);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D:negate()Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;",
            "method_body": "public Vector3D negate() {\nreturn new Vector3D(-x, -y, -z);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D:<init>(DLorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V",
            "method_body": "public Vector3D(double a, Vector3D u) {\nthis.x = a * u.x;\nthis.y = a * u.y;\nthis.z = a * u.z;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.geometry.euclidean.threed.Line:revert()Lorg/apache/commons/math3/geometry/euclidean/threed/Line;",
            "method_body": "public Line revert() {\nfinal Line reverted = new Line(zero, zero.subtract(direction));\nreturn reverted;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.geometry.euclidean.threed.Vector3D:<init>(DDD)V",
            "method_body": "public Vector3D(double x, double y, double z) {\nthis.x = x;\nthis.y = y;\nthis.z = z;\n}",
            "method_id": 14
        }
    ]
}